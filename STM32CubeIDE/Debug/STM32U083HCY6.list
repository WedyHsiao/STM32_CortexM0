
STM32U083HCY6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf84  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  0800d044  0800d044  0000e044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2b0  0800d2b0  0000f0e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d2b0  0800d2b0  0000e2b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2b8  0800d2b8  0000f0e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2b8  0800d2b8  0000e2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d2bc  0800d2bc  0000e2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e8  20000000  0800d2c0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001608  200000e8  0800d3a8  0000f0e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016f0  0800d3a8  0000f6f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f0e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036bee  00000000  00000000  0000f110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007c81  00000000  00000000  00045cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  0004d980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f5e  00000000  00000000  0004ef10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027584  00000000  00000000  0004fe6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f404  00000000  00000000  000773f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bfee4  00000000  00000000  000a67f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001666da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044c4  00000000  00000000  00166720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0016abe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000e8 	.word	0x200000e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d02c 	.word	0x0800d02c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000ec 	.word	0x200000ec
 8000104:	0800d02c 	.word	0x0800d02c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	@ (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	@ (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f806 	bl	8000458 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__udivmoddi4>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	0004      	movs	r4, r0
 8000466:	000d      	movs	r5, r1
 8000468:	4692      	mov	sl, r2
 800046a:	4699      	mov	r9, r3
 800046c:	b083      	sub	sp, #12
 800046e:	428b      	cmp	r3, r1
 8000470:	d830      	bhi.n	80004d4 <__udivmoddi4+0x7c>
 8000472:	d02d      	beq.n	80004d0 <__udivmoddi4+0x78>
 8000474:	4649      	mov	r1, r9
 8000476:	4650      	mov	r0, sl
 8000478:	f000 f8ba 	bl	80005f0 <__clzdi2>
 800047c:	0029      	movs	r1, r5
 800047e:	0006      	movs	r6, r0
 8000480:	0020      	movs	r0, r4
 8000482:	f000 f8b5 	bl	80005f0 <__clzdi2>
 8000486:	1a33      	subs	r3, r6, r0
 8000488:	4698      	mov	r8, r3
 800048a:	3b20      	subs	r3, #32
 800048c:	d434      	bmi.n	80004f8 <__udivmoddi4+0xa0>
 800048e:	469b      	mov	fp, r3
 8000490:	4653      	mov	r3, sl
 8000492:	465a      	mov	r2, fp
 8000494:	4093      	lsls	r3, r2
 8000496:	4642      	mov	r2, r8
 8000498:	001f      	movs	r7, r3
 800049a:	4653      	mov	r3, sl
 800049c:	4093      	lsls	r3, r2
 800049e:	001e      	movs	r6, r3
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d83b      	bhi.n	800051c <__udivmoddi4+0xc4>
 80004a4:	42af      	cmp	r7, r5
 80004a6:	d100      	bne.n	80004aa <__udivmoddi4+0x52>
 80004a8:	e079      	b.n	800059e <__udivmoddi4+0x146>
 80004aa:	465b      	mov	r3, fp
 80004ac:	1ba4      	subs	r4, r4, r6
 80004ae:	41bd      	sbcs	r5, r7
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	da00      	bge.n	80004b6 <__udivmoddi4+0x5e>
 80004b4:	e076      	b.n	80005a4 <__udivmoddi4+0x14c>
 80004b6:	2200      	movs	r2, #0
 80004b8:	2300      	movs	r3, #0
 80004ba:	9200      	str	r2, [sp, #0]
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2301      	movs	r3, #1
 80004c0:	465a      	mov	r2, fp
 80004c2:	4093      	lsls	r3, r2
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2301      	movs	r3, #1
 80004c8:	4642      	mov	r2, r8
 80004ca:	4093      	lsls	r3, r2
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	e029      	b.n	8000524 <__udivmoddi4+0xcc>
 80004d0:	4282      	cmp	r2, r0
 80004d2:	d9cf      	bls.n	8000474 <__udivmoddi4+0x1c>
 80004d4:	2200      	movs	r2, #0
 80004d6:	2300      	movs	r3, #0
 80004d8:	9200      	str	r2, [sp, #0]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <__udivmoddi4+0x8e>
 80004e2:	601c      	str	r4, [r3, #0]
 80004e4:	605d      	str	r5, [r3, #4]
 80004e6:	9800      	ldr	r0, [sp, #0]
 80004e8:	9901      	ldr	r1, [sp, #4]
 80004ea:	b003      	add	sp, #12
 80004ec:	bcf0      	pop	{r4, r5, r6, r7}
 80004ee:	46bb      	mov	fp, r7
 80004f0:	46b2      	mov	sl, r6
 80004f2:	46a9      	mov	r9, r5
 80004f4:	46a0      	mov	r8, r4
 80004f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f8:	4642      	mov	r2, r8
 80004fa:	469b      	mov	fp, r3
 80004fc:	2320      	movs	r3, #32
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	4652      	mov	r2, sl
 8000502:	40da      	lsrs	r2, r3
 8000504:	4641      	mov	r1, r8
 8000506:	0013      	movs	r3, r2
 8000508:	464a      	mov	r2, r9
 800050a:	408a      	lsls	r2, r1
 800050c:	0017      	movs	r7, r2
 800050e:	4642      	mov	r2, r8
 8000510:	431f      	orrs	r7, r3
 8000512:	4653      	mov	r3, sl
 8000514:	4093      	lsls	r3, r2
 8000516:	001e      	movs	r6, r3
 8000518:	42af      	cmp	r7, r5
 800051a:	d9c3      	bls.n	80004a4 <__udivmoddi4+0x4c>
 800051c:	2200      	movs	r2, #0
 800051e:	2300      	movs	r3, #0
 8000520:	9200      	str	r2, [sp, #0]
 8000522:	9301      	str	r3, [sp, #4]
 8000524:	4643      	mov	r3, r8
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0d8      	beq.n	80004dc <__udivmoddi4+0x84>
 800052a:	07fb      	lsls	r3, r7, #31
 800052c:	0872      	lsrs	r2, r6, #1
 800052e:	431a      	orrs	r2, r3
 8000530:	4646      	mov	r6, r8
 8000532:	087b      	lsrs	r3, r7, #1
 8000534:	e00e      	b.n	8000554 <__udivmoddi4+0xfc>
 8000536:	42ab      	cmp	r3, r5
 8000538:	d101      	bne.n	800053e <__udivmoddi4+0xe6>
 800053a:	42a2      	cmp	r2, r4
 800053c:	d80c      	bhi.n	8000558 <__udivmoddi4+0x100>
 800053e:	1aa4      	subs	r4, r4, r2
 8000540:	419d      	sbcs	r5, r3
 8000542:	2001      	movs	r0, #1
 8000544:	1924      	adds	r4, r4, r4
 8000546:	416d      	adcs	r5, r5
 8000548:	2100      	movs	r1, #0
 800054a:	3e01      	subs	r6, #1
 800054c:	1824      	adds	r4, r4, r0
 800054e:	414d      	adcs	r5, r1
 8000550:	2e00      	cmp	r6, #0
 8000552:	d006      	beq.n	8000562 <__udivmoddi4+0x10a>
 8000554:	42ab      	cmp	r3, r5
 8000556:	d9ee      	bls.n	8000536 <__udivmoddi4+0xde>
 8000558:	3e01      	subs	r6, #1
 800055a:	1924      	adds	r4, r4, r4
 800055c:	416d      	adcs	r5, r5
 800055e:	2e00      	cmp	r6, #0
 8000560:	d1f8      	bne.n	8000554 <__udivmoddi4+0xfc>
 8000562:	9800      	ldr	r0, [sp, #0]
 8000564:	9901      	ldr	r1, [sp, #4]
 8000566:	465b      	mov	r3, fp
 8000568:	1900      	adds	r0, r0, r4
 800056a:	4169      	adcs	r1, r5
 800056c:	2b00      	cmp	r3, #0
 800056e:	db24      	blt.n	80005ba <__udivmoddi4+0x162>
 8000570:	002b      	movs	r3, r5
 8000572:	465a      	mov	r2, fp
 8000574:	4644      	mov	r4, r8
 8000576:	40d3      	lsrs	r3, r2
 8000578:	002a      	movs	r2, r5
 800057a:	40e2      	lsrs	r2, r4
 800057c:	001c      	movs	r4, r3
 800057e:	465b      	mov	r3, fp
 8000580:	0015      	movs	r5, r2
 8000582:	2b00      	cmp	r3, #0
 8000584:	db2a      	blt.n	80005dc <__udivmoddi4+0x184>
 8000586:	0026      	movs	r6, r4
 8000588:	409e      	lsls	r6, r3
 800058a:	0033      	movs	r3, r6
 800058c:	0026      	movs	r6, r4
 800058e:	4647      	mov	r7, r8
 8000590:	40be      	lsls	r6, r7
 8000592:	0032      	movs	r2, r6
 8000594:	1a80      	subs	r0, r0, r2
 8000596:	4199      	sbcs	r1, r3
 8000598:	9000      	str	r0, [sp, #0]
 800059a:	9101      	str	r1, [sp, #4]
 800059c:	e79e      	b.n	80004dc <__udivmoddi4+0x84>
 800059e:	42a3      	cmp	r3, r4
 80005a0:	d8bc      	bhi.n	800051c <__udivmoddi4+0xc4>
 80005a2:	e782      	b.n	80004aa <__udivmoddi4+0x52>
 80005a4:	4642      	mov	r2, r8
 80005a6:	2320      	movs	r3, #32
 80005a8:	2100      	movs	r1, #0
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	2200      	movs	r2, #0
 80005ae:	9100      	str	r1, [sp, #0]
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	2201      	movs	r2, #1
 80005b4:	40da      	lsrs	r2, r3
 80005b6:	9201      	str	r2, [sp, #4]
 80005b8:	e785      	b.n	80004c6 <__udivmoddi4+0x6e>
 80005ba:	4642      	mov	r2, r8
 80005bc:	2320      	movs	r3, #32
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	002a      	movs	r2, r5
 80005c2:	4646      	mov	r6, r8
 80005c4:	409a      	lsls	r2, r3
 80005c6:	0023      	movs	r3, r4
 80005c8:	40f3      	lsrs	r3, r6
 80005ca:	4644      	mov	r4, r8
 80005cc:	4313      	orrs	r3, r2
 80005ce:	002a      	movs	r2, r5
 80005d0:	40e2      	lsrs	r2, r4
 80005d2:	001c      	movs	r4, r3
 80005d4:	465b      	mov	r3, fp
 80005d6:	0015      	movs	r5, r2
 80005d8:	2b00      	cmp	r3, #0
 80005da:	dad4      	bge.n	8000586 <__udivmoddi4+0x12e>
 80005dc:	4642      	mov	r2, r8
 80005de:	002f      	movs	r7, r5
 80005e0:	2320      	movs	r3, #32
 80005e2:	0026      	movs	r6, r4
 80005e4:	4097      	lsls	r7, r2
 80005e6:	1a9b      	subs	r3, r3, r2
 80005e8:	40de      	lsrs	r6, r3
 80005ea:	003b      	movs	r3, r7
 80005ec:	4333      	orrs	r3, r6
 80005ee:	e7cd      	b.n	800058c <__udivmoddi4+0x134>

080005f0 <__clzdi2>:
 80005f0:	b510      	push	{r4, lr}
 80005f2:	2900      	cmp	r1, #0
 80005f4:	d103      	bne.n	80005fe <__clzdi2+0xe>
 80005f6:	f000 f807 	bl	8000608 <__clzsi2>
 80005fa:	3020      	adds	r0, #32
 80005fc:	e002      	b.n	8000604 <__clzdi2+0x14>
 80005fe:	0008      	movs	r0, r1
 8000600:	f000 f802 	bl	8000608 <__clzsi2>
 8000604:	bd10      	pop	{r4, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)

08000608 <__clzsi2>:
 8000608:	211c      	movs	r1, #28
 800060a:	2301      	movs	r3, #1
 800060c:	041b      	lsls	r3, r3, #16
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0xe>
 8000612:	0c00      	lsrs	r0, r0, #16
 8000614:	3910      	subs	r1, #16
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	4298      	cmp	r0, r3
 800061a:	d301      	bcc.n	8000620 <__clzsi2+0x18>
 800061c:	0a00      	lsrs	r0, r0, #8
 800061e:	3908      	subs	r1, #8
 8000620:	091b      	lsrs	r3, r3, #4
 8000622:	4298      	cmp	r0, r3
 8000624:	d301      	bcc.n	800062a <__clzsi2+0x22>
 8000626:	0900      	lsrs	r0, r0, #4
 8000628:	3904      	subs	r1, #4
 800062a:	a202      	add	r2, pc, #8	@ (adr r2, 8000634 <__clzsi2+0x2c>)
 800062c:	5c10      	ldrb	r0, [r2, r0]
 800062e:	1840      	adds	r0, r0, r1
 8000630:	4770      	bx	lr
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	02020304 	.word	0x02020304
 8000638:	01010101 	.word	0x01010101
	...

08000644 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Add this function for UART printf redirection
int _write(int file, char *ptr, int len)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	b29a      	uxth	r2, r3
 8000654:	2301      	movs	r3, #1
 8000656:	425b      	negs	r3, r3
 8000658:	68b9      	ldr	r1, [r7, #8]
 800065a:	4804      	ldr	r0, [pc, #16]	@ (800066c <_write+0x28>)
 800065c:	f005 fba0 	bl	8005da0 <HAL_UART_Transmit>
    return len;
 8000660:	687b      	ldr	r3, [r7, #4]
}
 8000662:	0018      	movs	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	b004      	add	sp, #16
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	20000104 	.word	0x20000104

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000674:	f001 fb18 	bl	8001ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 f810 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067c:	f000 f904 	bl	8000888 <MX_GPIO_Init>
  MX_USBX_Device_Init();
 8000680:	f000 fb76 	bl	8000d70 <MX_USBX_Device_Init>
  MX_USART2_UART_Init();
 8000684:	f000 f888 	bl	8000798 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Welcome to Wedy world !\n\r");
 8000688:	4b03      	ldr	r3, [pc, #12]	@ (8000698 <main+0x28>)
 800068a:	0018      	movs	r0, r3
 800068c:	f00b fe32 	bl	800c2f4 <iprintf>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	  //USBX_Device_Process(NULL);
	  CheckPA15State();
 8000690:	f000 f98a 	bl	80009a8 <CheckPA15State>
 8000694:	e7fc      	b.n	8000690 <main+0x20>
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	0800d044 	.word	0x0800d044

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b09f      	sub	sp, #124	@ 0x7c
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	242c      	movs	r4, #44	@ 0x2c
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	0018      	movs	r0, r3
 80006a8:	234c      	movs	r3, #76	@ 0x4c
 80006aa:	001a      	movs	r2, r3
 80006ac:	2100      	movs	r1, #0
 80006ae:	f00b fe7d 	bl	800c3ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b2:	231c      	movs	r3, #28
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	0018      	movs	r0, r3
 80006b8:	2310      	movs	r3, #16
 80006ba:	001a      	movs	r2, r3
 80006bc:	2100      	movs	r1, #0
 80006be:	f00b fe75 	bl	800c3ac <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	0018      	movs	r0, r3
 80006c6:	2318      	movs	r3, #24
 80006c8:	001a      	movs	r2, r3
 80006ca:	2100      	movs	r1, #0
 80006cc:	f00b fe6e 	bl	800c3ac <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	2380      	movs	r3, #128	@ 0x80
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f003 fbdd 	bl	8003e94 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 80006da:	0021      	movs	r1, r4
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2230      	movs	r2, #48	@ 0x30
 80006e0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2201      	movs	r2, #1
 80006e6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	22b0      	movs	r2, #176	@ 0xb0
 80006f2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2201      	movs	r2, #1
 80006f8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2200      	movs	r2, #0
 80006fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	187b      	adds	r3, r7, r1
 8000702:	0018      	movs	r0, r3
 8000704:	f003 fc40 	bl	8003f88 <HAL_RCC_OscConfig>
 8000708:	1e03      	subs	r3, r0, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800070c:	f000 f994 	bl	8000a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	211c      	movs	r1, #28
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2207      	movs	r2, #7
 8000716:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2101      	movs	r1, #1
 800072e:	0018      	movs	r0, r3
 8000730:	f004 f854 	bl	80047dc <HAL_RCC_ClockConfig>
 8000734:	1e03      	subs	r3, r0, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000738:	f000 f97e 	bl	8000a38 <Error_Handler>
  }

  /** Enable the CRS clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <SystemClock_Config+0xf4>)
 800073e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000740:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <SystemClock_Config+0xf4>)
 8000742:	2180      	movs	r1, #128	@ 0x80
 8000744:	0249      	lsls	r1, r1, #9
 8000746:	430a      	orrs	r2, r1
 8000748:	659a      	str	r2, [r3, #88]	@ 0x58
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <SystemClock_Config+0xf4>)
 800074c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800074e:	2380      	movs	r3, #128	@ 0x80
 8000750:	025b      	lsls	r3, r3, #9
 8000752:	4013      	ands	r3, r2
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2280      	movs	r2, #128	@ 0x80
 8000762:	0592      	lsls	r2, r2, #22
 8000764:	605a      	str	r2, [r3, #4]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	4a09      	ldr	r2, [pc, #36]	@ (8000794 <SystemClock_Config+0xf8>)
 8000770:	60da      	str	r2, [r3, #12]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2222      	movs	r2, #34	@ 0x22
 8000776:	611a      	str	r2, [r3, #16]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2220      	movs	r2, #32
 800077c:	615a      	str	r2, [r3, #20]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	0018      	movs	r0, r3
 8000782:	f005 fa71 	bl	8005c68 <HAL_RCCEx_CRSConfig>
}
 8000786:	46c0      	nop			@ (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b01f      	add	sp, #124	@ 0x7c
 800078c:	bd90      	pop	{r4, r7, pc}
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	40021000 	.word	0x40021000
 8000794:	0000bb7f 	.word	0x0000bb7f

08000798 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800079c:	4b23      	ldr	r3, [pc, #140]	@ (800082c <MX_USART2_UART_Init+0x94>)
 800079e:	4a24      	ldr	r2, [pc, #144]	@ (8000830 <MX_USART2_UART_Init+0x98>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a2:	4b22      	ldr	r3, [pc, #136]	@ (800082c <MX_USART2_UART_Init+0x94>)
 80007a4:	22e1      	movs	r2, #225	@ 0xe1
 80007a6:	0252      	lsls	r2, r2, #9
 80007a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b20      	ldr	r3, [pc, #128]	@ (800082c <MX_USART2_UART_Init+0x94>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b1e      	ldr	r3, [pc, #120]	@ (800082c <MX_USART2_UART_Init+0x94>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b1d      	ldr	r3, [pc, #116]	@ (800082c <MX_USART2_UART_Init+0x94>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <MX_USART2_UART_Init+0x94>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	@ (800082c <MX_USART2_UART_Init+0x94>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b18      	ldr	r3, [pc, #96]	@ (800082c <MX_USART2_UART_Init+0x94>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ce:	4b17      	ldr	r3, [pc, #92]	@ (800082c <MX_USART2_UART_Init+0x94>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007d4:	4b15      	ldr	r3, [pc, #84]	@ (800082c <MX_USART2_UART_Init+0x94>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007da:	4b14      	ldr	r3, [pc, #80]	@ (800082c <MX_USART2_UART_Init+0x94>)
 80007dc:	2200      	movs	r2, #0
 80007de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e0:	4b12      	ldr	r3, [pc, #72]	@ (800082c <MX_USART2_UART_Init+0x94>)
 80007e2:	0018      	movs	r0, r3
 80007e4:	f005 fa86 	bl	8005cf4 <HAL_UART_Init>
 80007e8:	1e03      	subs	r3, r0, #0
 80007ea:	d001      	beq.n	80007f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007ec:	f000 f924 	bl	8000a38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f0:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_USART2_UART_Init+0x94>)
 80007f2:	2100      	movs	r1, #0
 80007f4:	0018      	movs	r0, r3
 80007f6:	f005 ffb7 	bl	8006768 <HAL_UARTEx_SetTxFifoThreshold>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007fe:	f000 f91b 	bl	8000a38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000802:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <MX_USART2_UART_Init+0x94>)
 8000804:	2100      	movs	r1, #0
 8000806:	0018      	movs	r0, r3
 8000808:	f005 ffee 	bl	80067e8 <HAL_UARTEx_SetRxFifoThreshold>
 800080c:	1e03      	subs	r3, r0, #0
 800080e:	d001      	beq.n	8000814 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000810:	f000 f912 	bl	8000a38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000814:	4b05      	ldr	r3, [pc, #20]	@ (800082c <MX_USART2_UART_Init+0x94>)
 8000816:	0018      	movs	r0, r3
 8000818:	f005 ff6c 	bl	80066f4 <HAL_UARTEx_DisableFifoMode>
 800081c:	1e03      	subs	r3, r0, #0
 800081e:	d001      	beq.n	8000824 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000820:	f000 f90a 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000824:	46c0      	nop			@ (mov r8, r8)
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	20000104 	.word	0x20000104
 8000830:	40004400 	.word	0x40004400

08000834 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
void MX_USB_PCD_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000838:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_USB_PCD_Init+0x4c>)
 800083a:	4a12      	ldr	r2, [pc, #72]	@ (8000884 <MX_USB_PCD_Init+0x50>)
 800083c:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800083e:	4b10      	ldr	r3, [pc, #64]	@ (8000880 <MX_USB_PCD_Init+0x4c>)
 8000840:	2208      	movs	r2, #8
 8000842:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000844:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <MX_USB_PCD_Init+0x4c>)
 8000846:	2202      	movs	r2, #2
 8000848:	715a      	strb	r2, [r3, #5]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800084a:	4b0d      	ldr	r3, [pc, #52]	@ (8000880 <MX_USB_PCD_Init+0x4c>)
 800084c:	2202      	movs	r2, #2
 800084e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000850:	4b0b      	ldr	r3, [pc, #44]	@ (8000880 <MX_USB_PCD_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	721a      	strb	r2, [r3, #8]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000856:	4b0a      	ldr	r3, [pc, #40]	@ (8000880 <MX_USB_PCD_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 800085c:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <MX_USB_PCD_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000862:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <MX_USB_PCD_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000868:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <MX_USB_PCD_Init+0x4c>)
 800086a:	0018      	movs	r0, r3
 800086c:	f001 fd8a 	bl	8002384 <HAL_PCD_Init>
 8000870:	1e03      	subs	r3, r0, #0
 8000872:	d001      	beq.n	8000878 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000874:	f000 f8e0 	bl	8000a38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000878:	46c0      	nop			@ (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			@ (mov r8, r8)
 8000880:	20000198 	.word	0x20000198
 8000884:	40005c00 	.word	0x40005c00

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b089      	sub	sp, #36	@ 0x24
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	240c      	movs	r4, #12
 8000890:	193b      	adds	r3, r7, r4
 8000892:	0018      	movs	r0, r3
 8000894:	2314      	movs	r3, #20
 8000896:	001a      	movs	r2, r3
 8000898:	2100      	movs	r1, #0
 800089a:	f00b fd87 	bl	800c3ac <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b3f      	ldr	r3, [pc, #252]	@ (800099c <MX_GPIO_Init+0x114>)
 80008a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008a2:	4b3e      	ldr	r3, [pc, #248]	@ (800099c <MX_GPIO_Init+0x114>)
 80008a4:	2101      	movs	r1, #1
 80008a6:	430a      	orrs	r2, r1
 80008a8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80008aa:	4b3c      	ldr	r3, [pc, #240]	@ (800099c <MX_GPIO_Init+0x114>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ae:	2201      	movs	r2, #1
 80008b0:	4013      	ands	r3, r2
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	4b39      	ldr	r3, [pc, #228]	@ (800099c <MX_GPIO_Init+0x114>)
 80008b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008ba:	4b38      	ldr	r3, [pc, #224]	@ (800099c <MX_GPIO_Init+0x114>)
 80008bc:	2102      	movs	r1, #2
 80008be:	430a      	orrs	r2, r1
 80008c0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80008c2:	4b36      	ldr	r3, [pc, #216]	@ (800099c <MX_GPIO_Init+0x114>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c6:	2202      	movs	r2, #2
 80008c8:	4013      	ands	r3, r2
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80008ce:	2380      	movs	r3, #128	@ 0x80
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	4833      	ldr	r0, [pc, #204]	@ (80009a0 <MX_GPIO_Init+0x118>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	0019      	movs	r1, r3
 80008d8:	f001 fcd1 	bl	800227e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80008dc:	23a0      	movs	r3, #160	@ 0xa0
 80008de:	05db      	lsls	r3, r3, #23
 80008e0:	2200      	movs	r2, #0
 80008e2:	2120      	movs	r1, #32
 80008e4:	0018      	movs	r0, r3
 80008e6:	f001 fcca 	bl	800227e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	2280      	movs	r2, #128	@ 0x80
 80008ee:	0212      	lsls	r2, r2, #8
 80008f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	2200      	movs	r2, #0
 80008f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	2202      	movs	r2, #2
 80008fc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	193a      	adds	r2, r7, r4
 8000900:	23a0      	movs	r3, #160	@ 0xa0
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	0011      	movs	r1, r2
 8000906:	0018      	movs	r0, r3
 8000908:	f001 fb28 	bl	8001f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800090c:	0021      	movs	r1, r4
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2280      	movs	r2, #128	@ 0x80
 8000912:	0052      	lsls	r2, r2, #1
 8000914:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	000c      	movs	r4, r1
 8000918:	193b      	adds	r3, r7, r4
 800091a:	2201      	movs	r2, #1
 800091c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	193b      	adds	r3, r7, r4
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	193b      	adds	r3, r7, r4
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	193b      	adds	r3, r7, r4
 800092c:	4a1c      	ldr	r2, [pc, #112]	@ (80009a0 <MX_GPIO_Init+0x118>)
 800092e:	0019      	movs	r1, r3
 8000930:	0010      	movs	r0, r2
 8000932:	f001 fb13 	bl	8001f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000936:	193b      	adds	r3, r7, r4
 8000938:	2220      	movs	r2, #32
 800093a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	193b      	adds	r3, r7, r4
 800093e:	2201      	movs	r2, #1
 8000940:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	193b      	adds	r3, r7, r4
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	193b      	adds	r3, r7, r4
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	193a      	adds	r2, r7, r4
 8000950:	23a0      	movs	r3, #160	@ 0xa0
 8000952:	05db      	lsls	r3, r3, #23
 8000954:	0011      	movs	r1, r2
 8000956:	0018      	movs	r0, r3
 8000958:	f001 fb00 	bl	8001f5c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /*Configure GPIO pin : USER_BUTTON_Pin */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <MX_GPIO_Init+0x114>)
 800095e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000960:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <MX_GPIO_Init+0x114>)
 8000962:	2104      	movs	r1, #4
 8000964:	430a      	orrs	r2, r1
 8000966:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000968:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <MX_GPIO_Init+0x114>)
 800096a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096c:	2204      	movs	r2, #4
 800096e:	4013      	ands	r3, r2
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	683b      	ldr	r3, [r7, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000974:	193b      	adds	r3, r7, r4
 8000976:	2204      	movs	r2, #4
 8000978:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097a:	193b      	adds	r3, r7, r4
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000980:	193b      	adds	r3, r7, r4
 8000982:	2202      	movs	r2, #2
 8000984:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000986:	193b      	adds	r3, r7, r4
 8000988:	4a06      	ldr	r2, [pc, #24]	@ (80009a4 <MX_GPIO_Init+0x11c>)
 800098a:	0019      	movs	r1, r3
 800098c:	0010      	movs	r0, r2
 800098e:	f001 fae5 	bl	8001f5c <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	b009      	add	sp, #36	@ 0x24
 8000998:	bd90      	pop	{r4, r7, pc}
 800099a:	46c0      	nop			@ (mov r8, r8)
 800099c:	40021000 	.word	0x40021000
 80009a0:	50000400 	.word	0x50000400
 80009a4:	50000800 	.word	0x50000800

080009a8 <CheckPA15State>:

/* USER CODE BEGIN 4 */
static void CheckPA15State(void)
{
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
  // Read the state of PA15
  GPIO_PinState pa15_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 80009ae:	1dfc      	adds	r4, r7, #7
 80009b0:	2380      	movs	r3, #128	@ 0x80
 80009b2:	021a      	lsls	r2, r3, #8
 80009b4:	23a0      	movs	r3, #160	@ 0xa0
 80009b6:	05db      	lsls	r3, r3, #23
 80009b8:	0011      	movs	r1, r2
 80009ba:	0018      	movs	r0, r3
 80009bc:	f001 fc42 	bl	8002244 <HAL_GPIO_ReadPin>
 80009c0:	0003      	movs	r3, r0
 80009c2:	7023      	strb	r3, [r4, #0]
  GPIO_PinState pa12_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 80009c4:	1dbc      	adds	r4, r7, #6
 80009c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a30 <CheckPA15State+0x88>)
 80009c8:	2104      	movs	r1, #4
 80009ca:	0018      	movs	r0, r3
 80009cc:	f001 fc3a 	bl	8002244 <HAL_GPIO_ReadPin>
 80009d0:	0003      	movs	r3, r0
 80009d2:	7023      	strb	r3, [r4, #0]

  if(pa15_state == GPIO_PIN_SET||pa12_state == GPIO_PIN_SET)
 80009d4:	1dfb      	adds	r3, r7, #7
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d003      	beq.n	80009e4 <CheckPA15State+0x3c>
 80009dc:	1dbb      	adds	r3, r7, #6
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d111      	bne.n	8000a08 <CheckPA15State+0x60>
  {
    // PA15 is high - PB8 is high
    // Add your code here for when PB8 is high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,GPIO_PIN_SET);
 80009e4:	2380      	movs	r3, #128	@ 0x80
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	4812      	ldr	r0, [pc, #72]	@ (8000a34 <CheckPA15State+0x8c>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	0019      	movs	r1, r3
 80009ee:	f001 fc46 	bl	800227e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_SET);
 80009f2:	23a0      	movs	r3, #160	@ 0xa0
 80009f4:	05db      	lsls	r3, r3, #23
 80009f6:	2201      	movs	r2, #1
 80009f8:	2120      	movs	r1, #32
 80009fa:	0018      	movs	r0, r3
 80009fc:	f001 fc3f 	bl	800227e <HAL_GPIO_WritePin>
	USBX_Device_Process(NULL);
 8000a00:	2000      	movs	r0, #0
 8000a02:	f000 fa76 	bl	8000ef2 <USBX_Device_Process>
 8000a06:	e00e      	b.n	8000a26 <CheckPA15State+0x7e>
  }
  else
  {
    // PA15 is low - PB8 is low
    // Add your code here for when PB8 is low
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a08:	2380      	movs	r3, #128	@ 0x80
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	4809      	ldr	r0, [pc, #36]	@ (8000a34 <CheckPA15State+0x8c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	0019      	movs	r1, r3
 8000a12:	f001 fc34 	bl	800227e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a16:	23a0      	movs	r3, #160	@ 0xa0
 8000a18:	05db      	lsls	r3, r3, #23
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f001 fc2d 	bl	800227e <HAL_GPIO_WritePin>
  }
}
 8000a24:	46c0      	nop			@ (mov r8, r8)
 8000a26:	46c0      	nop			@ (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	b003      	add	sp, #12
 8000a2c:	bd90      	pop	{r4, r7, pc}
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	50000800 	.word	0x50000800
 8000a34:	50000400 	.word	0x50000400

08000a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3c:	b672      	cpsid	i
}
 8000a3e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a40:	46c0      	nop			@ (mov r8, r8)
 8000a42:	e7fd      	b.n	8000a40 <Error_Handler+0x8>

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <HAL_MspInit+0x44>)
 8000a4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <HAL_MspInit+0x44>)
 8000a50:	2180      	movs	r1, #128	@ 0x80
 8000a52:	0549      	lsls	r1, r1, #21
 8000a54:	430a      	orrs	r2, r1
 8000a56:	659a      	str	r2, [r3, #88]	@ 0x58
 8000a58:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <HAL_MspInit+0x44>)
 8000a5a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000a5c:	2380      	movs	r3, #128	@ 0x80
 8000a5e:	055b      	lsls	r3, r3, #21
 8000a60:	4013      	ands	r3, r2
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a66:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <HAL_MspInit+0x44>)
 8000a68:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000a6a:	4b07      	ldr	r3, [pc, #28]	@ (8000a88 <HAL_MspInit+0x44>)
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	661a      	str	r2, [r3, #96]	@ 0x60
 8000a72:	4b05      	ldr	r3, [pc, #20]	@ (8000a88 <HAL_MspInit+0x44>)
 8000a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a76:	2201      	movs	r2, #1
 8000a78:	4013      	ands	r3, r2
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	46c0      	nop			@ (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b002      	add	sp, #8
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			@ (mov r8, r8)
 8000a88:	40021000 	.word	0x40021000

08000a8c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b09b      	sub	sp, #108	@ 0x6c
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	2354      	movs	r3, #84	@ 0x54
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	0018      	movs	r0, r3
 8000a9a:	2314      	movs	r3, #20
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	f00b fc84 	bl	800c3ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa4:	2410      	movs	r4, #16
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	2344      	movs	r3, #68	@ 0x44
 8000aac:	001a      	movs	r2, r3
 8000aae:	2100      	movs	r1, #0
 8000ab0:	f00b fc7c 	bl	800c3ac <memset>
  if(huart->Instance==USART2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a22      	ldr	r2, [pc, #136]	@ (8000b44 <HAL_UART_MspInit+0xb8>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d13e      	bne.n	8000b3c <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aca:	193b      	adds	r3, r7, r4
 8000acc:	0018      	movs	r0, r3
 8000ace:	f004 f89b 	bl	8004c08 <HAL_RCCEx_PeriphCLKConfig>
 8000ad2:	1e03      	subs	r3, r0, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ad6:	f7ff ffaf 	bl	8000a38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ada:	4b1b      	ldr	r3, [pc, #108]	@ (8000b48 <HAL_UART_MspInit+0xbc>)
 8000adc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000ade:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <HAL_UART_MspInit+0xbc>)
 8000ae0:	2180      	movs	r1, #128	@ 0x80
 8000ae2:	0289      	lsls	r1, r1, #10
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	659a      	str	r2, [r3, #88]	@ 0x58
 8000ae8:	4b17      	ldr	r3, [pc, #92]	@ (8000b48 <HAL_UART_MspInit+0xbc>)
 8000aea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000aec:	2380      	movs	r3, #128	@ 0x80
 8000aee:	029b      	lsls	r3, r3, #10
 8000af0:	4013      	ands	r3, r2
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <HAL_UART_MspInit+0xbc>)
 8000af8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000afa:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <HAL_UART_MspInit+0xbc>)
 8000afc:	2101      	movs	r1, #1
 8000afe:	430a      	orrs	r2, r1
 8000b00:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <HAL_UART_MspInit+0xbc>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b06:	2201      	movs	r2, #1
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8000b0e:	2154      	movs	r1, #84	@ 0x54
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	220c      	movs	r2, #12
 8000b14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	2202      	movs	r2, #2
 8000b1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	2200      	movs	r2, #0
 8000b26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2207      	movs	r2, #7
 8000b2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	187a      	adds	r2, r7, r1
 8000b30:	23a0      	movs	r3, #160	@ 0xa0
 8000b32:	05db      	lsls	r3, r3, #23
 8000b34:	0011      	movs	r1, r2
 8000b36:	0018      	movs	r0, r3
 8000b38:	f001 fa10 	bl	8001f5c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b3c:	46c0      	nop			@ (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b01b      	add	sp, #108	@ 0x6c
 8000b42:	bd90      	pop	{r4, r7, pc}
 8000b44:	40004400 	.word	0x40004400
 8000b48:	40021000 	.word	0x40021000

08000b4c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b095      	sub	sp, #84	@ 0x54
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b54:	240c      	movs	r4, #12
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	0018      	movs	r0, r3
 8000b5a:	2344      	movs	r3, #68	@ 0x44
 8000b5c:	001a      	movs	r2, r3
 8000b5e:	2100      	movs	r1, #0
 8000b60:	f00b fc24 	bl	800c3ac <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a17      	ldr	r2, [pc, #92]	@ (8000bc8 <HAL_PCD_MspInit+0x7c>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d127      	bne.n	8000bbe <HAL_PCD_MspInit+0x72>

    /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	2280      	movs	r2, #128	@ 0x80
 8000b72:	0152      	lsls	r2, r2, #5
 8000b74:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	22c0      	movs	r2, #192	@ 0xc0
 8000b7a:	0512      	lsls	r2, r2, #20
 8000b7c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	0018      	movs	r0, r3
 8000b82:	f004 f841 	bl	8004c08 <HAL_RCCEx_PeriphCLKConfig>
 8000b86:	1e03      	subs	r3, r0, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_PCD_MspInit+0x42>
    {
      Error_Handler();
 8000b8a:	f7ff ff55 	bl	8000a38 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 8000b8e:	f003 f9ed 	bl	8003f6c <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000b92:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <HAL_PCD_MspInit+0x80>)
 8000b94:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000b96:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <HAL_PCD_MspInit+0x80>)
 8000b98:	2180      	movs	r1, #128	@ 0x80
 8000b9a:	0189      	lsls	r1, r1, #6
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	659a      	str	r2, [r3, #88]	@ 0x58
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <HAL_PCD_MspInit+0x80>)
 8000ba2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000ba4:	2380      	movs	r3, #128	@ 0x80
 8000ba6:	019b      	lsls	r3, r3, #6
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2008      	movs	r0, #8
 8000bb4:	f001 f9a0 	bl	8001ef8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 8000bb8:	2008      	movs	r0, #8
 8000bba:	f001 f9b2 	bl	8001f22 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8000bbe:	46c0      	nop			@ (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b015      	add	sp, #84	@ 0x54
 8000bc4:	bd90      	pop	{r4, r7, pc}
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	40005c00 	.word	0x40005c00
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd4:	46c0      	nop			@ (mov r8, r8)
 8000bd6:	e7fd      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bdc:	46c0      	nop			@ (mov r8, r8)
 8000bde:	e7fd      	b.n	8000bdc <HardFault_Handler+0x4>

08000be0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be4:	46c0      	nop			@ (mov r8, r8)
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf8:	f001 f8b8 	bl	8001d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfc:	46c0      	nop			@ (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8000c08:	4b03      	ldr	r3, [pc, #12]	@ (8000c18 <USB_DRD_FS_IRQHandler+0x14>)
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f001 fcf8 	bl	8002600 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 8000c10:	46c0      	nop			@ (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	20000198 	.word	0x20000198

08000c1c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	e00a      	b.n	8000c44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c2e:	e000      	b.n	8000c32 <_read+0x16>
 8000c30:	bf00      	nop
 8000c32:	0001      	movs	r1, r0
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	60ba      	str	r2, [r7, #8]
 8000c3a:	b2ca      	uxtb	r2, r1
 8000c3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	3301      	adds	r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697a      	ldr	r2, [r7, #20]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	dbf0      	blt.n	8000c2e <_read+0x12>
  }

  return len;
 8000c4c:	687b      	ldr	r3, [r7, #4]
}
 8000c4e:	0018      	movs	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b006      	add	sp, #24
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	425b      	negs	r3, r3
}
 8000c62:	0018      	movs	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b002      	add	sp, #8
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
 8000c72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	2280      	movs	r2, #128	@ 0x80
 8000c78:	0192      	lsls	r2, r2, #6
 8000c7a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	0018      	movs	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b002      	add	sp, #8
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <_isatty>:

int _isatty(int file)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	0018      	movs	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b002      	add	sp, #8
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b004      	add	sp, #16
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb8:	4a14      	ldr	r2, [pc, #80]	@ (8000d0c <_sbrk+0x5c>)
 8000cba:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <_sbrk+0x60>)
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc4:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d102      	bne.n	8000cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <_sbrk+0x64>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	@ (8000d18 <_sbrk+0x68>)
 8000cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd2:	4b10      	ldr	r3, [pc, #64]	@ (8000d14 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	18d3      	adds	r3, r2, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d207      	bcs.n	8000cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce0:	f00b fbba 	bl	800c458 <__errno>
 8000ce4:	0003      	movs	r3, r0
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cea:	2301      	movs	r3, #1
 8000cec:	425b      	negs	r3, r3
 8000cee:	e009      	b.n	8000d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf0:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf6:	4b07      	ldr	r3, [pc, #28]	@ (8000d14 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	18d2      	adds	r2, r2, r3
 8000cfe:	4b05      	ldr	r3, [pc, #20]	@ (8000d14 <_sbrk+0x64>)
 8000d00:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d02:	68fb      	ldr	r3, [r7, #12]
}
 8000d04:	0018      	movs	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	b006      	add	sp, #24
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	2000a000 	.word	0x2000a000
 8000d10:	00000400 	.word	0x00000400
 8000d14:	20000474 	.word	0x20000474
 8000d18:	200016f0 	.word	0x200016f0

08000d1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d1c:	480d      	ldr	r0, [pc, #52]	@ (8000d54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d1e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d20:	f000 ff96 	bl	8001c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d24:	480c      	ldr	r0, [pc, #48]	@ (8000d58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d26:	490d      	ldr	r1, [pc, #52]	@ (8000d5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d28:	4a0d      	ldr	r2, [pc, #52]	@ (8000d60 <LoopForever+0xe>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d2c:	e002      	b.n	8000d34 <LoopCopyDataInit>

08000d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d32:	3304      	adds	r3, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d38:	d3f9      	bcc.n	8000d2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d68 <LoopForever+0x16>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d40:	e001      	b.n	8000d46 <LoopFillZerobss>

08000d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d44:	3204      	adds	r2, #4

08000d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d48:	d3fb      	bcc.n	8000d42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d4a:	f00b fb8b 	bl	800c464 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d4e:	f7ff fc8f 	bl	8000670 <main>

08000d52 <LoopForever>:

LoopForever:
  b LoopForever
 8000d52:	e7fe      	b.n	8000d52 <LoopForever>
  ldr   r0, =_estack
 8000d54:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d5c:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8000d60:	0800d2c0 	.word	0x0800d2c0
  ldr r2, =_sbss
 8000d64:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8000d68:	200016f0 	.word	0x200016f0

08000d6c <ADC_COMP1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d6c:	e7fe      	b.n	8000d6c <ADC_COMP1_2_IRQHandler>
	...

08000d70 <MX_USBX_Device_Init>:
  * @param  none
  * @retval status
  */

UINT MX_USBX_Device_Init(VOID)
{
 8000d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d72:	b091      	sub	sp, #68	@ 0x44
 8000d74:	af06      	add	r7, sp, #24
   UINT ret = UX_SUCCESS;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
  UCHAR *pointer;

  /* USER CODE BEGIN MX_USBX_Device_Init0 */

  /* USER CODE END MX_USBX_Device_Init0 */
  pointer = ux_device_byte_pool_buffer;
 8000d7a:	4b40      	ldr	r3, [pc, #256]	@ (8000e7c <MX_USBX_Device_Init+0x10c>)
 8000d7c:	623b      	str	r3, [r7, #32]

  /* Initialize USBX Memory */
  if (ux_system_initialize(pointer, USBX_DEVICE_MEMORY_STACK_SIZE, UX_NULL, 0) != UX_SUCCESS)
 8000d7e:	23c0      	movs	r3, #192	@ 0xc0
 8000d80:	0119      	lsls	r1, r3, #4
 8000d82:	6a38      	ldr	r0, [r7, #32]
 8000d84:	2300      	movs	r3, #0
 8000d86:	2200      	movs	r2, #0
 8000d88:	f007 fcde 	bl	8008748 <_uxe_system_initialize>
 8000d8c:	1e03      	subs	r3, r0, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_USBX_Device_Init+0x24>
  {
    /* USER CODE BEGIN USBX_SYSTEM_INITIALIZE_ERROR */
    return UX_ERROR;
 8000d90:	23ff      	movs	r3, #255	@ 0xff
 8000d92:	e06f      	b.n	8000e74 <MX_USBX_Device_Init+0x104>
    /* USER CODE END USBX_SYSTEM_INITIALIZE_ERROR */
  }

  /* Get Device Framework High Speed and get the length */
  device_framework_high_speed = USBD_Get_Device_Framework_Speed(USBD_HIGH_SPEED,
 8000d94:	230c      	movs	r3, #12
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	0019      	movs	r1, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f000 f8de 	bl	8000f5c <USBD_Get_Device_Framework_Speed>
 8000da0:	0003      	movs	r3, r0
 8000da2:	61fb      	str	r3, [r7, #28]
                                                                &device_framework_hs_length);

  /* Get Device Framework Full Speed and get the length */
  device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 8000da4:	2308      	movs	r3, #8
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	0019      	movs	r1, r3
 8000daa:	2000      	movs	r0, #0
 8000dac:	f000 f8d6 	bl	8000f5c <USBD_Get_Device_Framework_Speed>
 8000db0:	0003      	movs	r3, r0
 8000db2:	61bb      	str	r3, [r7, #24]
                                                                &device_framework_fs_length);

  /* Get String Framework and get the length */
  string_framework = USBD_Get_String_Framework(&string_framework_length);
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	0018      	movs	r0, r3
 8000db8:	f000 f91a 	bl	8000ff0 <USBD_Get_String_Framework>
 8000dbc:	0003      	movs	r3, r0
 8000dbe:	617b      	str	r3, [r7, #20]

  /* Get Language Id Framework and get the length */
  language_id_framework = USBD_Get_Language_Id_Framework(&language_id_framework_length);
 8000dc0:	003b      	movs	r3, r7
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f000 f9b6 	bl	8001134 <USBD_Get_Language_Id_Framework>
 8000dc8:	0003      	movs	r3, r0
 8000dca:	613b      	str	r3, [r7, #16]

  /* Install the device portion of USBX */
  if (ux_device_stack_initialize(device_framework_high_speed,
 8000dcc:	68f9      	ldr	r1, [r7, #12]
 8000dce:	68bd      	ldr	r5, [r7, #8]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	683a      	ldr	r2, [r7, #0]
 8000dd4:	69bc      	ldr	r4, [r7, #24]
 8000dd6:	69f8      	ldr	r0, [r7, #28]
 8000dd8:	2600      	movs	r6, #0
 8000dda:	9604      	str	r6, [sp, #16]
 8000ddc:	9203      	str	r2, [sp, #12]
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	9202      	str	r2, [sp, #8]
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	002b      	movs	r3, r5
 8000dea:	0022      	movs	r2, r4
 8000dec:	f00a fcba 	bl	800b764 <_ux_device_stack_initialize>
 8000df0:	1e03      	subs	r3, r0, #0
 8000df2:	d001      	beq.n	8000df8 <MX_USBX_Device_Init+0x88>
                                 language_id_framework,
                                 language_id_framework_length,
                                 UX_NULL) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_INITIALIZE_ERROR */
    return UX_ERROR;
 8000df4:	23ff      	movs	r3, #255	@ 0xff
 8000df6:	e03d      	b.n	8000e74 <MX_USBX_Device_Init+0x104>
    /* USER CODE END USBX_DEVICE_INITIALIZE_ERROR */
  }

  /* Initialize the hid keyboard class parameters for the device */
  hid_keyboard_parameter.ux_slave_class_hid_instance_activate         = USBD_HID_Keyboard_Activate;
 8000df8:	4b21      	ldr	r3, [pc, #132]	@ (8000e80 <MX_USBX_Device_Init+0x110>)
 8000dfa:	4a22      	ldr	r2, [pc, #136]	@ (8000e84 <MX_USBX_Device_Init+0x114>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hid_keyboard_parameter.ux_slave_class_hid_instance_deactivate       = USBD_HID_Keyboard_Deactivate;
 8000dfe:	4b20      	ldr	r3, [pc, #128]	@ (8000e80 <MX_USBX_Device_Init+0x110>)
 8000e00:	4a21      	ldr	r2, [pc, #132]	@ (8000e88 <MX_USBX_Device_Init+0x118>)
 8000e02:	605a      	str	r2, [r3, #4]
  hid_keyboard_parameter.ux_device_class_hid_parameter_report_address = USBD_HID_ReportDesc(INTERFACE_HID_KEYBOARD);
 8000e04:	2001      	movs	r0, #1
 8000e06:	f000 fa21 	bl	800124c <USBD_HID_ReportDesc>
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e80 <MX_USBX_Device_Init+0x110>)
 8000e0e:	609a      	str	r2, [r3, #8]
  hid_keyboard_parameter.ux_device_class_hid_parameter_report_length  = USBD_HID_ReportDesc_length(INTERFACE_HID_KEYBOARD);
 8000e10:	2001      	movs	r0, #1
 8000e12:	f000 fa33 	bl	800127c <USBD_HID_ReportDesc_length>
 8000e16:	0003      	movs	r3, r0
 8000e18:	001a      	movs	r2, r3
 8000e1a:	4b19      	ldr	r3, [pc, #100]	@ (8000e80 <MX_USBX_Device_Init+0x110>)
 8000e1c:	611a      	str	r2, [r3, #16]
  hid_keyboard_parameter.ux_device_class_hid_parameter_report_id      = UX_FALSE;
 8000e1e:	4b18      	ldr	r3, [pc, #96]	@ (8000e80 <MX_USBX_Device_Init+0x110>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
  hid_keyboard_parameter.ux_device_class_hid_parameter_callback       = USBD_HID_Keyboard_SetReport;
 8000e24:	4b16      	ldr	r3, [pc, #88]	@ (8000e80 <MX_USBX_Device_Init+0x110>)
 8000e26:	4a19      	ldr	r2, [pc, #100]	@ (8000e8c <MX_USBX_Device_Init+0x11c>)
 8000e28:	615a      	str	r2, [r3, #20]
  hid_keyboard_parameter.ux_device_class_hid_parameter_get_callback   = USBD_HID_Keyboard_GetReport;
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <MX_USBX_Device_Init+0x110>)
 8000e2c:	4a18      	ldr	r2, [pc, #96]	@ (8000e90 <MX_USBX_Device_Init+0x120>)
 8000e2e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN HID_KEYBOARD_PARAMETER */

  /* USER CODE END HID_KEYBOARD_PARAMETER */

  /* Get hid keyboard configuration number */
  hid_keyboard_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_HID, INTERFACE_HID_KEYBOARD);
 8000e30:	2101      	movs	r1, #1
 8000e32:	2001      	movs	r0, #1
 8000e34:	f000 f9f6 	bl	8001224 <USBD_Get_Configuration_Number>
 8000e38:	0003      	movs	r3, r0
 8000e3a:	001a      	movs	r2, r3
 8000e3c:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <MX_USBX_Device_Init+0x124>)
 8000e3e:	601a      	str	r2, [r3, #0]

  /* Find hid keyboard interface number */
  hid_keyboard_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_HID, INTERFACE_HID_KEYBOARD);
 8000e40:	2101      	movs	r1, #1
 8000e42:	2001      	movs	r0, #1
 8000e44:	f000 f99e 	bl	8001184 <USBD_Get_Interface_Number>
 8000e48:	0003      	movs	r3, r0
 8000e4a:	001a      	movs	r2, r3
 8000e4c:	4b12      	ldr	r3, [pc, #72]	@ (8000e98 <MX_USBX_Device_Init+0x128>)
 8000e4e:	601a      	str	r2, [r3, #0]

  /* Initialize the device hid keyboard class */
  if (ux_device_stack_class_register(_ux_system_slave_class_hid_name,
 8000e50:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <MX_USBX_Device_Init+0x124>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b10      	ldr	r3, [pc, #64]	@ (8000e98 <MX_USBX_Device_Init+0x128>)
 8000e56:	681c      	ldr	r4, [r3, #0]
 8000e58:	4910      	ldr	r1, [pc, #64]	@ (8000e9c <MX_USBX_Device_Init+0x12c>)
 8000e5a:	4811      	ldr	r0, [pc, #68]	@ (8000ea0 <MX_USBX_Device_Init+0x130>)
 8000e5c:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <MX_USBX_Device_Init+0x110>)
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	0023      	movs	r3, r4
 8000e62:	f009 fdb9 	bl	800a9d8 <_ux_device_stack_class_register>
 8000e66:	1e03      	subs	r3, r0, #0
 8000e68:	d001      	beq.n	8000e6e <MX_USBX_Device_Init+0xfe>
                                     hid_keyboard_configuration_number,
                                     hid_keyboard_interface_number,
                                     &hid_keyboard_parameter) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_HID_KEYBOARD_REGISTER_ERROR */
    return UX_ERROR;
 8000e6a:	23ff      	movs	r3, #255	@ 0xff
 8000e6c:	e002      	b.n	8000e74 <MX_USBX_Device_Init+0x104>
    /* USER CODE END USBX_DEVICE_HID_KEYBOARD_REGISTER_ERROR */
  }

  /* USER CODE BEGIN MX_USBX_Device_Init1 */
  USBX_APP_Device_Init(); //Initialization of USB device
 8000e6e:	f000 f84b 	bl	8000f08 <USBX_APP_Device_Init>
  /* USER CODE END MX_USBX_Device_Init1 */

  return ret;
 8000e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000e74:	0018      	movs	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b00b      	add	sp, #44	@ 0x2c
 8000e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e7c:	20000478 	.word	0x20000478
 8000e80:	20001080 	.word	0x20001080
 8000e84:	08001c01 	.word	0x08001c01
 8000e88:	08001c11 	.word	0x08001c11
 8000e8c:	08001c21 	.word	0x08001c21
 8000e90:	08001c39 	.word	0x08001c39
 8000e94:	2000107c 	.word	0x2000107c
 8000e98:	20001078 	.word	0x20001078
 8000e9c:	08009259 	.word	0x08009259
 8000ea0:	20000078 	.word	0x20000078

08000ea4 <_ux_utility_interrupt_disable>:
  *         USB utility interrupt disable.
  * @param  none
  * @retval none
  */
ALIGN_TYPE _ux_utility_interrupt_disable(VOID)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8000eae:	603b      	str	r3, [r7, #0]
  return(result);
 8000eb0:	683b      	ldr	r3, [r7, #0]
  UINT interrupt_save;
  /* USER CODE BEGIN _ux_utility_interrupt_disable */
  interrupt_save = __get_PRIMASK();
 8000eb2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  /* USER CODE END _ux_utility_interrupt_disable */

  return interrupt_save;
 8000eb8:	687b      	ldr	r3, [r7, #4]
}
 8000eba:	0018      	movs	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b002      	add	sp, #8
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <_ux_utility_interrupt_restore>:
  *         USB utility interrupt restore.
  * @param  flags
  * @retval none
  */
VOID _ux_utility_interrupt_restore(ALIGN_TYPE flags)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f383 8810 	msr	PRIMASK, r3
}
 8000ed4:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN _ux_utility_interrupt_restore */
  __set_PRIMASK(flags);
  /* USER CODE END _ux_utility_interrupt_restore */
}
 8000ed6:	46c0      	nop			@ (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b004      	add	sp, #16
 8000edc:	bd80      	pop	{r7, pc}

08000ede <_ux_utility_time_get>:
  *         Get Time Tick for host timing.
  * @param  none
  * @retval time tick
  */
ULONG _ux_utility_time_get(VOID)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
  ULONG time_tick = 0U;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	607b      	str	r3, [r7, #4]

  /* USER CODE BEGIN _ux_utility_time_get */

  /* USER CODE END _ux_utility_time_get */

  return time_tick;
 8000ee8:	687b      	ldr	r3, [r7, #4]
}
 8000eea:	0018      	movs	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <USBX_Device_Process>:

/* USER CODE BEGIN 1 */
// Run USBX state machine
VOID USBX_Device_Process (VOID *arg)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
	ux_device_stack_tasks_run();
 8000efa:	f00a fff1 	bl	800bee0 <_ux_device_stack_tasks_run>
}
 8000efe:	46c0      	nop			@ (mov r8, r8)
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b002      	add	sp, #8
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <USBX_APP_Device_Init>:

//Initialization of USB device
VOID USBX_APP_Device_Init(VOID)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	HAL_PWREx_EnableVddUSB();
 8000f0c:	f003 f82e 	bl	8003f6c <HAL_PWREx_EnableVddUSB>

	MX_USB_PCD_Init(); // Initialize the device controller HAL driver
 8000f10:	f7ff fc90 	bl	8000834 <MX_USB_PCD_Init>

	//USB_Device_Init_PreTreatment_1
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS,0x00,PCD_SNG_BUF,0x0C);
 8000f14:	480f      	ldr	r0, [pc, #60]	@ (8000f54 <USBX_APP_Device_Init+0x4c>)
 8000f16:	230c      	movs	r3, #12
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	f002 ff3e 	bl	8003d9c <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS,0x80,PCD_SNG_BUF,0x4C);
 8000f20:	480c      	ldr	r0, [pc, #48]	@ (8000f54 <USBX_APP_Device_Init+0x4c>)
 8000f22:	234c      	movs	r3, #76	@ 0x4c
 8000f24:	2200      	movs	r2, #0
 8000f26:	2180      	movs	r1, #128	@ 0x80
 8000f28:	f002 ff38 	bl	8003d9c <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS,0x81,PCD_SNG_BUF,0x8C);
 8000f2c:	4809      	ldr	r0, [pc, #36]	@ (8000f54 <USBX_APP_Device_Init+0x4c>)
 8000f2e:	238c      	movs	r3, #140	@ 0x8c
 8000f30:	2200      	movs	r2, #0
 8000f32:	2181      	movs	r1, #129	@ 0x81
 8000f34:	f002 ff32 	bl	8003d9c <HAL_PCDEx_PMAConfig>

	//Initialize and link controller HAL driver
	ux_dcd_stm32_initialize((ULONG)USB_DRD_FS,(ULONG)&hpcd_USB_DRD_FS);
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <USBX_APP_Device_Init+0x4c>)
 8000f3a:	4a07      	ldr	r2, [pc, #28]	@ (8000f58 <USBX_APP_Device_Init+0x50>)
 8000f3c:	0019      	movs	r1, r3
 8000f3e:	0010      	movs	r0, r2
 8000f40:	f009 f93a 	bl	800a1b8 <_ux_dcd_stm32_initialize>

	//Start the USB device
	HAL_PCD_Start(&hpcd_USB_DRD_FS);
 8000f44:	4b03      	ldr	r3, [pc, #12]	@ (8000f54 <USBX_APP_Device_Init+0x4c>)
 8000f46:	0018      	movs	r0, r3
 8000f48:	f001 fb10 	bl	800256c <HAL_PCD_Start>
}
 8000f4c:	46c0      	nop			@ (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			@ (mov r8, r8)
 8000f54:	20000198 	.word	0x20000198
 8000f58:	40005c00 	.word	0x40005c00

08000f5c <USBD_Get_Device_Framework_Speed>:
  * @param  Speed : HIGH or FULL SPEED flag
  * @param  length : length of HIGH or FULL SPEED array
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Get_Device_Framework_Speed(uint8_t Speed, ULONG *Length)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	0002      	movs	r2, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	1dfb      	adds	r3, r7, #7
 8000f68:	701a      	strb	r2, [r3, #0]
  uint8_t *pFrameWork = NULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN Device_Framework0 */

  /* USER CODE END Device_Framework0 */

  if (USBD_FULL_SPEED == Speed)
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d116      	bne.n	8000fa4 <USBD_Get_Device_Framework_Speed+0x48>
  {
    USBD_Device_Framework_Builder(&USBD_Device_FS, pDevFrameWorkDesc_FS,
 8000f76:	4b19      	ldr	r3, [pc, #100]	@ (8000fdc <USBD_Get_Device_Framework_Speed+0x80>)
 8000f78:	6819      	ldr	r1, [r3, #0]
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	4a18      	ldr	r2, [pc, #96]	@ (8000fe0 <USBD_Get_Device_Framework_Speed+0x84>)
 8000f80:	4818      	ldr	r0, [pc, #96]	@ (8000fe4 <USBD_Get_Device_Framework_Speed+0x88>)
 8000f82:	f000 f9ef 	bl	8001364 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_full_speed */
    *Length = (ULONG)(USBD_Device_FS.CurrDevDescSz + USBD_Device_FS.CurrConfDescSz);
 8000f86:	4a17      	ldr	r2, [pc, #92]	@ (8000fe4 <USBD_Get_Device_Framework_Speed+0x88>)
 8000f88:	2390      	movs	r3, #144	@ 0x90
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	58d2      	ldr	r2, [r2, r3]
 8000f8e:	4915      	ldr	r1, [pc, #84]	@ (8000fe4 <USBD_Get_Device_Framework_Speed+0x88>)
 8000f90:	2392      	movs	r3, #146	@ 0x92
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	58cb      	ldr	r3, [r1, r3]
 8000f96:	18d2      	adds	r2, r2, r3
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_FS;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <USBD_Get_Device_Framework_Speed+0x80>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	e015      	b.n	8000fd0 <USBD_Get_Device_Framework_Speed+0x74>
  }
  else
  {
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 8000fa4:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <USBD_Get_Device_Framework_Speed+0x8c>)
 8000fa6:	6819      	ldr	r1, [r3, #0]
 8000fa8:	1dfb      	adds	r3, r7, #7
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4a0c      	ldr	r2, [pc, #48]	@ (8000fe0 <USBD_Get_Device_Framework_Speed+0x84>)
 8000fae:	480f      	ldr	r0, [pc, #60]	@ (8000fec <USBD_Get_Device_Framework_Speed+0x90>)
 8000fb0:	f000 f9d8 	bl	8001364 <USBD_Device_Framework_Builder>
                                  UserClassInstance, Speed);

    /* Get the length of USBD_device_framework_high_speed */
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fec <USBD_Get_Device_Framework_Speed+0x90>)
 8000fb6:	2390      	movs	r3, #144	@ 0x90
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	58d2      	ldr	r2, [r2, r3]
 8000fbc:	490b      	ldr	r1, [pc, #44]	@ (8000fec <USBD_Get_Device_Framework_Speed+0x90>)
 8000fbe:	2392      	movs	r3, #146	@ 0x92
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	58cb      	ldr	r3, [r1, r3]
 8000fc4:	18d2      	adds	r2, r2, r3
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	601a      	str	r2, [r3, #0]

    pFrameWork = pDevFrameWorkDesc_HS;
 8000fca:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <USBD_Get_Device_Framework_Speed+0x8c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE BEGIN Device_Framework1 */

  /* USER CODE END Device_Framework1 */
  return pFrameWork;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
}
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b004      	add	sp, #16
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	46c0      	nop			@ (mov r8, r8)
 8000fdc:	20000010 	.word	0x20000010
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	2000109c 	.word	0x2000109c
 8000fe8:	20000014 	.word	0x20000014
 8000fec:	200011c4 	.word	0x200011c4

08000ff0 <USBD_Get_String_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of String_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_String_Framework(ULONG *Length)
{
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint16_t len = 0U;
 8000ff8:	250c      	movs	r5, #12
 8000ffa:	197b      	adds	r3, r7, r5
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	801a      	strh	r2, [r3, #0]
  uint8_t count = 0U;
 8001000:	240f      	movs	r4, #15
 8001002:	193b      	adds	r3, r7, r4
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN String_Framework0 */

  /* USER CODE END String_Framework0 */

  /* Set the Manufacturer language Id and index in USBD_string_framework */
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8001008:	193b      	adds	r3, r7, r4
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	193a      	adds	r2, r7, r4
 800100e:	1c59      	adds	r1, r3, #1
 8001010:	7011      	strb	r1, [r2, #0]
 8001012:	001a      	movs	r2, r3
 8001014:	4b43      	ldr	r3, [pc, #268]	@ (8001124 <USBD_Get_String_Framework+0x134>)
 8001016:	2109      	movs	r1, #9
 8001018:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 800101a:	193b      	adds	r3, r7, r4
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	193a      	adds	r2, r7, r4
 8001020:	1c59      	adds	r1, r3, #1
 8001022:	7011      	strb	r1, [r2, #0]
 8001024:	001a      	movs	r2, r3
 8001026:	4b3f      	ldr	r3, [pc, #252]	@ (8001124 <USBD_Get_String_Framework+0x134>)
 8001028:	2104      	movs	r1, #4
 800102a:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 800102c:	193b      	adds	r3, r7, r4
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	193a      	adds	r2, r7, r4
 8001032:	1c59      	adds	r1, r3, #1
 8001034:	7011      	strb	r1, [r2, #0]
 8001036:	001a      	movs	r2, r3
 8001038:	4b3a      	ldr	r3, [pc, #232]	@ (8001124 <USBD_Get_String_Framework+0x134>)
 800103a:	2101      	movs	r1, #1
 800103c:	5499      	strb	r1, [r3, r2]

  /* Set the Manufacturer string in string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_string_framework + count, &len);
 800103e:	193b      	adds	r3, r7, r4
 8001040:	781a      	ldrb	r2, [r3, #0]
 8001042:	4b38      	ldr	r3, [pc, #224]	@ (8001124 <USBD_Get_String_Framework+0x134>)
 8001044:	18d1      	adds	r1, r2, r3
 8001046:	197a      	adds	r2, r7, r5
 8001048:	4b37      	ldr	r3, [pc, #220]	@ (8001128 <USBD_Get_String_Framework+0x138>)
 800104a:	0018      	movs	r0, r3
 800104c:	f000 f930 	bl	80012b0 <USBD_Desc_GetString>

  /* Set the Product language Id and index in USBD_string_framework */
  count += len + 1;
 8001050:	197b      	adds	r3, r7, r5
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	b2da      	uxtb	r2, r3
 8001056:	193b      	adds	r3, r7, r4
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	18d3      	adds	r3, r2, r3
 800105c:	b2da      	uxtb	r2, r3
 800105e:	193b      	adds	r3, r7, r4
 8001060:	3201      	adds	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8001064:	193b      	adds	r3, r7, r4
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	193a      	adds	r2, r7, r4
 800106a:	1c59      	adds	r1, r3, #1
 800106c:	7011      	strb	r1, [r2, #0]
 800106e:	001a      	movs	r2, r3
 8001070:	4b2c      	ldr	r3, [pc, #176]	@ (8001124 <USBD_Get_String_Framework+0x134>)
 8001072:	2109      	movs	r1, #9
 8001074:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 8001076:	193b      	adds	r3, r7, r4
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	193a      	adds	r2, r7, r4
 800107c:	1c59      	adds	r1, r3, #1
 800107e:	7011      	strb	r1, [r2, #0]
 8001080:	001a      	movs	r2, r3
 8001082:	4b28      	ldr	r3, [pc, #160]	@ (8001124 <USBD_Get_String_Framework+0x134>)
 8001084:	2104      	movs	r1, #4
 8001086:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 8001088:	193b      	adds	r3, r7, r4
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	193a      	adds	r2, r7, r4
 800108e:	1c59      	adds	r1, r3, #1
 8001090:	7011      	strb	r1, [r2, #0]
 8001092:	001a      	movs	r2, r3
 8001094:	4b23      	ldr	r3, [pc, #140]	@ (8001124 <USBD_Get_String_Framework+0x134>)
 8001096:	2102      	movs	r1, #2
 8001098:	5499      	strb	r1, [r3, r2]

  /* Set the Product string in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_string_framework + count, &len);
 800109a:	193b      	adds	r3, r7, r4
 800109c:	781a      	ldrb	r2, [r3, #0]
 800109e:	4b21      	ldr	r3, [pc, #132]	@ (8001124 <USBD_Get_String_Framework+0x134>)
 80010a0:	18d1      	adds	r1, r2, r3
 80010a2:	197a      	adds	r2, r7, r5
 80010a4:	4b21      	ldr	r3, [pc, #132]	@ (800112c <USBD_Get_String_Framework+0x13c>)
 80010a6:	0018      	movs	r0, r3
 80010a8:	f000 f902 	bl	80012b0 <USBD_Desc_GetString>

  /* Set Serial language Id and index in string_framework */
  count += len + 1;
 80010ac:	197b      	adds	r3, r7, r5
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	193b      	adds	r3, r7, r4
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	18d3      	adds	r3, r2, r3
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	3201      	adds	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 80010c0:	193b      	adds	r3, r7, r4
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	0020      	movs	r0, r4
 80010c6:	193a      	adds	r2, r7, r4
 80010c8:	1c59      	adds	r1, r3, #1
 80010ca:	7011      	strb	r1, [r2, #0]
 80010cc:	001a      	movs	r2, r3
 80010ce:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <USBD_Get_String_Framework+0x134>)
 80010d0:	2109      	movs	r1, #9
 80010d2:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 80010d4:	183b      	adds	r3, r7, r0
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	183a      	adds	r2, r7, r0
 80010da:	1c59      	adds	r1, r3, #1
 80010dc:	7011      	strb	r1, [r2, #0]
 80010de:	001a      	movs	r2, r3
 80010e0:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <USBD_Get_String_Framework+0x134>)
 80010e2:	2104      	movs	r1, #4
 80010e4:	5499      	strb	r1, [r3, r2]
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 80010e6:	183b      	adds	r3, r7, r0
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	183a      	adds	r2, r7, r0
 80010ec:	1c59      	adds	r1, r3, #1
 80010ee:	7011      	strb	r1, [r2, #0]
 80010f0:	001a      	movs	r2, r3
 80010f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <USBD_Get_String_Framework+0x134>)
 80010f4:	2103      	movs	r1, #3
 80010f6:	5499      	strb	r1, [r3, r2]

  /* Set the Serial number in USBD_string_framework */
  USBD_Desc_GetString((uint8_t *)USBD_SERIAL_NUMBER, USBD_string_framework + count, &len);
 80010f8:	183b      	adds	r3, r7, r0
 80010fa:	781a      	ldrb	r2, [r3, #0]
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <USBD_Get_String_Framework+0x134>)
 80010fe:	18d1      	adds	r1, r2, r3
 8001100:	197a      	adds	r2, r7, r5
 8001102:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <USBD_Get_String_Framework+0x140>)
 8001104:	0018      	movs	r0, r3
 8001106:	f000 f8d3 	bl	80012b0 <USBD_Desc_GetString>
  /* USER CODE BEGIN String_Framework1 */

  /* USER CODE END String_Framework1 */

  /* Get the length of USBD_string_framework */
  *Length = strlen((const char *)USBD_string_framework);
 800110a:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <USBD_Get_String_Framework+0x134>)
 800110c:	0018      	movs	r0, r3
 800110e:	f7fe fffb 	bl	8000108 <strlen>
 8001112:	0002      	movs	r2, r0
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	601a      	str	r2, [r3, #0]

  return USBD_string_framework;
 8001118:	4b02      	ldr	r3, [pc, #8]	@ (8001124 <USBD_Get_String_Framework+0x134>)
}
 800111a:	0018      	movs	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	b004      	add	sp, #16
 8001120:	bdb0      	pop	{r4, r5, r7, pc}
 8001122:	46c0      	nop			@ (mov r8, r8)
 8001124:	2000147c 	.word	0x2000147c
 8001128:	0800d060 	.word	0x0800d060
 800112c:	0800d074 	.word	0x0800d074
 8001130:	0800d084 	.word	0x0800d084

08001134 <USBD_Get_Language_Id_Framework>:
  *         Return the language_id_framework
  * @param  Length : Length of Language_Id_Framework
  * @retval Pointer to language_id_framework buffer
  */
uint8_t *USBD_Get_Language_Id_Framework(ULONG *Length)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint8_t count = 0U;
 800113c:	200f      	movs	r0, #15
 800113e:	183b      	adds	r3, r7, r0
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]

  /* Set the language Id in USBD_language_id_framework */
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 8001144:	183b      	adds	r3, r7, r0
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	183a      	adds	r2, r7, r0
 800114a:	1c59      	adds	r1, r3, #1
 800114c:	7011      	strb	r1, [r2, #0]
 800114e:	001a      	movs	r2, r3
 8001150:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <USBD_Get_Language_Id_Framework+0x4c>)
 8001152:	2109      	movs	r1, #9
 8001154:	5499      	strb	r1, [r3, r2]
  USBD_language_id_framework[count++] = USBD_LANGID_STRING >> 8;
 8001156:	183b      	adds	r3, r7, r0
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	183a      	adds	r2, r7, r0
 800115c:	1c59      	adds	r1, r3, #1
 800115e:	7011      	strb	r1, [r2, #0]
 8001160:	001a      	movs	r2, r3
 8001162:	4b07      	ldr	r3, [pc, #28]	@ (8001180 <USBD_Get_Language_Id_Framework+0x4c>)
 8001164:	2104      	movs	r1, #4
 8001166:	5499      	strb	r1, [r3, r2]

  /* Get the length of USBD_language_id_framework */
  *Length = strlen((const char *)USBD_language_id_framework);
 8001168:	4b05      	ldr	r3, [pc, #20]	@ (8001180 <USBD_Get_Language_Id_Framework+0x4c>)
 800116a:	0018      	movs	r0, r3
 800116c:	f7fe ffcc 	bl	8000108 <strlen>
 8001170:	0002      	movs	r2, r0
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	601a      	str	r2, [r3, #0]

  return USBD_language_id_framework;
 8001176:	4b02      	ldr	r3, [pc, #8]	@ (8001180 <USBD_Get_Language_Id_Framework+0x4c>)
}
 8001178:	0018      	movs	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	b004      	add	sp, #16
 800117e:	bd80      	pop	{r7, pc}
 8001180:	2000157c 	.word	0x2000157c

08001184 <USBD_Get_Interface_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval interface number
  */
uint16_t USBD_Get_Interface_Number(uint8_t class_type, uint8_t interface_type)
{
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	0002      	movs	r2, r0
 800118c:	1dfb      	adds	r3, r7, #7
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	1dbb      	adds	r3, r7, #6
 8001192:	1c0a      	adds	r2, r1, #0
 8001194:	701a      	strb	r2, [r3, #0]
  uint8_t itf_num = 0U;
 8001196:	230f      	movs	r3, #15
 8001198:	18fb      	adds	r3, r7, r3
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0U;
 800119e:	210e      	movs	r1, #14
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN USBD_Get_Interface_Number0 */

  /* USER CODE END USBD_Get_Interface_Number0 */

  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	e02a      	b.n	8001204 <USBD_Get_Interface_Number+0x80>
  {
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 80011ae:	200e      	movs	r0, #14
 80011b0:	183b      	adds	r3, r7, r0
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001220 <USBD_Get_Interface_Number+0x9c>)
 80011b6:	215c      	movs	r1, #92	@ 0x5c
 80011b8:	434b      	muls	r3, r1
 80011ba:	18d3      	adds	r3, r2, r3
 80011bc:	330c      	adds	r3, #12
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	1dfa      	adds	r2, r7, #7
 80011c2:	7812      	ldrb	r2, [r2, #0]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d117      	bne.n	80011f8 <USBD_Get_Interface_Number+0x74>
        (USBD_Device_FS.tclasslist[idx].InterfaceType == interface_type))
 80011c8:	183b      	adds	r3, r7, r0
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4a14      	ldr	r2, [pc, #80]	@ (8001220 <USBD_Get_Interface_Number+0x9c>)
 80011ce:	215c      	movs	r1, #92	@ 0x5c
 80011d0:	434b      	muls	r3, r1
 80011d2:	18d3      	adds	r3, r2, r3
 80011d4:	3314      	adds	r3, #20
 80011d6:	781b      	ldrb	r3, [r3, #0]
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 80011d8:	1dba      	adds	r2, r7, #6
 80011da:	7812      	ldrb	r2, [r2, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d10b      	bne.n	80011f8 <USBD_Get_Interface_Number+0x74>
    {
      itf_num = USBD_Device_FS.tclasslist[idx].Ifs[0];
 80011e0:	183b      	adds	r3, r7, r0
 80011e2:	781a      	ldrb	r2, [r3, #0]
 80011e4:	230f      	movs	r3, #15
 80011e6:	18fb      	adds	r3, r7, r3
 80011e8:	490d      	ldr	r1, [pc, #52]	@ (8001220 <USBD_Get_Interface_Number+0x9c>)
 80011ea:	205a      	movs	r0, #90	@ 0x5a
 80011ec:	245c      	movs	r4, #92	@ 0x5c
 80011ee:	4362      	muls	r2, r4
 80011f0:	188a      	adds	r2, r1, r2
 80011f2:	1812      	adds	r2, r2, r0
 80011f4:	7812      	ldrb	r2, [r2, #0]
 80011f6:	701a      	strb	r2, [r3, #0]
  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 80011f8:	210e      	movs	r1, #14
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	781a      	ldrb	r2, [r3, #0]
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	3201      	adds	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
 8001204:	230e      	movs	r3, #14
 8001206:	18fb      	adds	r3, r7, r3
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d9cf      	bls.n	80011ae <USBD_Get_Interface_Number+0x2a>

  /* USER CODE BEGIN USBD_Get_Interface_Number1 */

  /* USER CODE END USBD_Get_Interface_Number1 */

  return itf_num;
 800120e:	230f      	movs	r3, #15
 8001210:	18fb      	adds	r3, r7, r3
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b29b      	uxth	r3, r3
}
 8001216:	0018      	movs	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	b005      	add	sp, #20
 800121c:	bd90      	pop	{r4, r7, pc}
 800121e:	46c0      	nop			@ (mov r8, r8)
 8001220:	2000109c 	.word	0x2000109c

08001224 <USBD_Get_Configuration_Number>:
  * @param  class_type : Device class type
  * @param  interface_type : Device interface type
  * @retval configuration number
  */
uint16_t USBD_Get_Configuration_Number(uint8_t class_type, uint8_t interface_type)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	0002      	movs	r2, r0
 800122c:	1dfb      	adds	r3, r7, #7
 800122e:	701a      	strb	r2, [r3, #0]
 8001230:	1dbb      	adds	r3, r7, #6
 8001232:	1c0a      	adds	r2, r1, #0
 8001234:	701a      	strb	r2, [r3, #0]
  uint8_t cfg_num = 1U;
 8001236:	210f      	movs	r1, #15
 8001238:	187b      	adds	r3, r7, r1
 800123a:	2201      	movs	r2, #1
 800123c:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN USBD_Get_CONFIGURATION_Number1 */

  /* USER CODE END USBD_Get_CONFIGURATION_Number1 */

  return cfg_num;
 800123e:	187b      	adds	r3, r7, r1
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b29b      	uxth	r3, r3
}
 8001244:	0018      	movs	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	b004      	add	sp, #16
 800124a:	bd80      	pop	{r7, pc}

0800124c <USBD_HID_ReportDesc>:
  *         Return the device HID Report Descriptor
  * @param  hid_type : HID Device type
  * @retval Pointer to HID Report Descriptor buffer
  */
uint8_t *USBD_HID_ReportDesc(uint8_t hid_type)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	0002      	movs	r2, r0
 8001254:	1dfb      	adds	r3, r7, #7
 8001256:	701a      	strb	r2, [r3, #0]
  uint8_t *pHidReportDesc = NULL;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN HidReportDesc0 */

  /* USER CODE END HidReportDesc0 */

  switch(hid_type)
 800125c:	1dfb      	adds	r3, r7, #7
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d102      	bne.n	800126a <USBD_HID_ReportDesc+0x1e>
  {
    case INTERFACE_HID_KEYBOARD:
      pHidReportDesc = USBD_HID_KEYBOARD_ReportDesc;
 8001264:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <USBD_HID_ReportDesc+0x2c>)
 8001266:	60fb      	str	r3, [r7, #12]
      break;
 8001268:	e000      	b.n	800126c <USBD_HID_ReportDesc+0x20>
    default:
      break;
 800126a:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN HidReportDesc1 */

  /* USER CODE END HidReportDesc1 */

  return pHidReportDesc;
 800126c:	68fb      	ldr	r3, [r7, #12]
}
 800126e:	0018      	movs	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	b004      	add	sp, #16
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	20000018 	.word	0x20000018

0800127c <USBD_HID_ReportDesc_length>:
  *         Return the device HID Report Descriptor
  * @param  hid_type : HID Device type
  * @retval Size of HID Report Descriptor buffer
  */
uint16_t USBD_HID_ReportDesc_length(uint8_t hid_type)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	0002      	movs	r2, r0
 8001284:	1dfb      	adds	r3, r7, #7
 8001286:	701a      	strb	r2, [r3, #0]
  uint16_t ReportDesc_Size = 0;
 8001288:	210e      	movs	r1, #14
 800128a:	187b      	adds	r3, r7, r1
 800128c:	2200      	movs	r2, #0
 800128e:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN ReportDesc_Size0 */

  /* USER CODE END ReportDesc_Size0 */

  switch(hid_type)
 8001290:	1dfb      	adds	r3, r7, #7
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d103      	bne.n	80012a0 <USBD_HID_ReportDesc_length+0x24>
  {
    case INTERFACE_HID_KEYBOARD:
      ReportDesc_Size = sizeof(USBD_HID_KEYBOARD_ReportDesc);
 8001298:	187b      	adds	r3, r7, r1
 800129a:	2222      	movs	r2, #34	@ 0x22
 800129c:	801a      	strh	r2, [r3, #0]
      break;
 800129e:	e000      	b.n	80012a2 <USBD_HID_ReportDesc_length+0x26>
    default:
      break;
 80012a0:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN ReportDesc_Size1 */

  /* USER CODE END ReportDesc_Size1 */

  return ReportDesc_Size;
 80012a2:	230e      	movs	r3, #14
 80012a4:	18fb      	adds	r3, r7, r3
 80012a6:	881b      	ldrh	r3, [r3, #0]
}
 80012a8:	0018      	movs	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b004      	add	sp, #16
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <USBD_Desc_GetString>:
  * @param  Unicode : Formatted string buffer (Unicode)
  * @param  len : descriptor length
  * @retval None
  */
static void USBD_Desc_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b087      	sub	sp, #28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80012bc:	2417      	movs	r4, #23
 80012be:	193b      	adds	r3, r7, r4
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
  uint8_t *pdesc;

  if (desc == NULL)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d029      	beq.n	800131e <USBD_Desc_GetString+0x6e>
  {
    return;
  }

  pdesc = desc;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	613b      	str	r3, [r7, #16]
  *len = (uint16_t)USBD_Desc_GetLen(pdesc);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	0018      	movs	r0, r3
 80012d2:	f000 f828 	bl	8001326 <USBD_Desc_GetLen>
 80012d6:	0003      	movs	r3, r0
 80012d8:	001a      	movs	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	801a      	strh	r2, [r3, #0]

  unicode[idx++] = *(uint8_t *)len;
 80012de:	193b      	adds	r3, r7, r4
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	193a      	adds	r2, r7, r4
 80012e4:	1c59      	adds	r1, r3, #1
 80012e6:	7011      	strb	r1, [r2, #0]
 80012e8:	001a      	movs	r2, r3
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	189b      	adds	r3, r3, r2
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	7812      	ldrb	r2, [r2, #0]
 80012f2:	701a      	strb	r2, [r3, #0]

  while (*pdesc != (uint8_t)'\0')
 80012f4:	e00e      	b.n	8001314 <USBD_Desc_GetString+0x64>
  {
    unicode[idx++] = *pdesc;
 80012f6:	2217      	movs	r2, #23
 80012f8:	18bb      	adds	r3, r7, r2
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	18ba      	adds	r2, r7, r2
 80012fe:	1c59      	adds	r1, r3, #1
 8001300:	7011      	strb	r1, [r2, #0]
 8001302:	001a      	movs	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	189b      	adds	r3, r3, r2
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	7812      	ldrb	r2, [r2, #0]
 800130c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	3301      	adds	r3, #1
 8001312:	613b      	str	r3, [r7, #16]
  while (*pdesc != (uint8_t)'\0')
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1ec      	bne.n	80012f6 <USBD_Desc_GetString+0x46>
 800131c:	e000      	b.n	8001320 <USBD_Desc_GetString+0x70>
    return;
 800131e:	46c0      	nop			@ (mov r8, r8)
  }
}
 8001320:	46bd      	mov	sp, r7
 8001322:	b007      	add	sp, #28
 8001324:	bd90      	pop	{r4, r7, pc}

08001326 <USBD_Desc_GetLen>:
  *         return the string length
  * @param  buf : pointer to the ASCII string buffer
  * @retval string length
  */
static uint8_t USBD_Desc_GetLen(uint8_t *buf)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800132e:	230f      	movs	r3, #15
 8001330:	18fb      	adds	r3, r7, r3
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]
  uint8_t *pbuff = buf;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800133a:	e008      	b.n	800134e <USBD_Desc_GetLen+0x28>
  {
    len++;
 800133c:	210f      	movs	r1, #15
 800133e:	187b      	adds	r3, r7, r1
 8001340:	781a      	ldrb	r2, [r3, #0]
 8001342:	187b      	adds	r3, r7, r1
 8001344:	3201      	adds	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
    pbuff++;
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	3301      	adds	r3, #1
 800134c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f2      	bne.n	800133c <USBD_Desc_GetLen+0x16>
  }

  return len;
 8001356:	230f      	movs	r3, #15
 8001358:	18fb      	adds	r3, r7, r3
 800135a:	781b      	ldrb	r3, [r3, #0]
}
 800135c:	0018      	movs	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	b004      	add	sp, #16
 8001362:	bd80      	pop	{r7, pc}

08001364 <USBD_Device_Framework_Builder>:
  */
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
                                              uint8_t *pDevFrameWorkDesc,
                                              uint8_t *UserClassInstance,
                                              uint8_t Speed)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af02      	add	r7, sp, #8
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
 8001370:	001a      	movs	r2, r3
 8001372:	1cfb      	adds	r3, r7, #3
 8001374:	701a      	strb	r2, [r3, #0]
  static USBD_DeviceDescTypedef   *pDevDesc;
  static USBD_DevQualiDescTypedef *pDevQualDesc;
  uint8_t Idx_Instance = 0U;
 8001376:	2317      	movs	r3, #23
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]

  /* Set Dev and conf descriptors size to 0 */
  pdev->CurrConfDescSz = 0U;
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	2392      	movs	r3, #146	@ 0x92
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	2100      	movs	r1, #0
 8001386:	50d1      	str	r1, [r2, r3]
  pdev->CurrDevDescSz = 0U;
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	2390      	movs	r3, #144	@ 0x90
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2100      	movs	r1, #0
 8001390:	50d1      	str	r1, [r2, r3]

  /* Set the pointer to the device descriptor area*/
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 8001392:	4b88      	ldr	r3, [pc, #544]	@ (80015b4 <USBD_Device_Framework_Builder+0x250>)
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	601a      	str	r2, [r3, #0]

  /* Start building the generic device descriptor common part */
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 8001398:	4b86      	ldr	r3, [pc, #536]	@ (80015b4 <USBD_Device_Framework_Builder+0x250>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2212      	movs	r2, #18
 800139e:	701a      	strb	r2, [r3, #0]
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 80013a0:	4b84      	ldr	r3, [pc, #528]	@ (80015b4 <USBD_Device_Framework_Builder+0x250>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2201      	movs	r2, #1
 80013a6:	705a      	strb	r2, [r3, #1]
  pDevDesc->bcdUSB = USB_BCDUSB;
 80013a8:	4b82      	ldr	r3, [pc, #520]	@ (80015b4 <USBD_Device_Framework_Builder+0x250>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	789a      	ldrb	r2, [r3, #2]
 80013ae:	2100      	movs	r1, #0
 80013b0:	400a      	ands	r2, r1
 80013b2:	709a      	strb	r2, [r3, #2]
 80013b4:	78da      	ldrb	r2, [r3, #3]
 80013b6:	2100      	movs	r1, #0
 80013b8:	400a      	ands	r2, r1
 80013ba:	1c11      	adds	r1, r2, #0
 80013bc:	2202      	movs	r2, #2
 80013be:	430a      	orrs	r2, r1
 80013c0:	70da      	strb	r2, [r3, #3]
  pDevDesc->bDeviceClass = 0x00;
 80013c2:	4b7c      	ldr	r3, [pc, #496]	@ (80015b4 <USBD_Device_Framework_Builder+0x250>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2200      	movs	r2, #0
 80013c8:	711a      	strb	r2, [r3, #4]
  pDevDesc->bDeviceSubClass = 0x00;
 80013ca:	4b7a      	ldr	r3, [pc, #488]	@ (80015b4 <USBD_Device_Framework_Builder+0x250>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2200      	movs	r2, #0
 80013d0:	715a      	strb	r2, [r3, #5]
  pDevDesc->bDeviceProtocol = 0x00;
 80013d2:	4b78      	ldr	r3, [pc, #480]	@ (80015b4 <USBD_Device_Framework_Builder+0x250>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2200      	movs	r2, #0
 80013d8:	719a      	strb	r2, [r3, #6]
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 80013da:	4b76      	ldr	r3, [pc, #472]	@ (80015b4 <USBD_Device_Framework_Builder+0x250>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2240      	movs	r2, #64	@ 0x40
 80013e0:	71da      	strb	r2, [r3, #7]
  pDevDesc->idVendor = USBD_VID;
 80013e2:	4b74      	ldr	r3, [pc, #464]	@ (80015b4 <USBD_Device_Framework_Builder+0x250>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	7a1a      	ldrb	r2, [r3, #8]
 80013e8:	2100      	movs	r1, #0
 80013ea:	400a      	ands	r2, r1
 80013ec:	1c11      	adds	r1, r2, #0
 80013ee:	2234      	movs	r2, #52	@ 0x34
 80013f0:	430a      	orrs	r2, r1
 80013f2:	721a      	strb	r2, [r3, #8]
 80013f4:	7a5a      	ldrb	r2, [r3, #9]
 80013f6:	2100      	movs	r1, #0
 80013f8:	400a      	ands	r2, r1
 80013fa:	1c11      	adds	r1, r2, #0
 80013fc:	2212      	movs	r2, #18
 80013fe:	430a      	orrs	r2, r1
 8001400:	725a      	strb	r2, [r3, #9]
  pDevDesc->idProduct = USBD_PID;
 8001402:	4b6c      	ldr	r3, [pc, #432]	@ (80015b4 <USBD_Device_Framework_Builder+0x250>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	7a9a      	ldrb	r2, [r3, #10]
 8001408:	2100      	movs	r1, #0
 800140a:	400a      	ands	r2, r1
 800140c:	1c11      	adds	r1, r2, #0
 800140e:	2278      	movs	r2, #120	@ 0x78
 8001410:	430a      	orrs	r2, r1
 8001412:	729a      	strb	r2, [r3, #10]
 8001414:	7ada      	ldrb	r2, [r3, #11]
 8001416:	2100      	movs	r1, #0
 8001418:	400a      	ands	r2, r1
 800141a:	1c11      	adds	r1, r2, #0
 800141c:	2256      	movs	r2, #86	@ 0x56
 800141e:	430a      	orrs	r2, r1
 8001420:	72da      	strb	r2, [r3, #11]
  pDevDesc->bcdDevice = 0x0200;
 8001422:	4b64      	ldr	r3, [pc, #400]	@ (80015b4 <USBD_Device_Framework_Builder+0x250>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	7b1a      	ldrb	r2, [r3, #12]
 8001428:	2100      	movs	r1, #0
 800142a:	400a      	ands	r2, r1
 800142c:	731a      	strb	r2, [r3, #12]
 800142e:	7b5a      	ldrb	r2, [r3, #13]
 8001430:	2100      	movs	r1, #0
 8001432:	400a      	ands	r2, r1
 8001434:	1c11      	adds	r1, r2, #0
 8001436:	2202      	movs	r2, #2
 8001438:	430a      	orrs	r2, r1
 800143a:	735a      	strb	r2, [r3, #13]
  pDevDesc->iManufacturer = USBD_IDX_MFC_STR;
 800143c:	4b5d      	ldr	r3, [pc, #372]	@ (80015b4 <USBD_Device_Framework_Builder+0x250>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2201      	movs	r2, #1
 8001442:	739a      	strb	r2, [r3, #14]
  pDevDesc->iProduct = USBD_IDX_PRODUCT_STR;
 8001444:	4b5b      	ldr	r3, [pc, #364]	@ (80015b4 <USBD_Device_Framework_Builder+0x250>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2202      	movs	r2, #2
 800144a:	73da      	strb	r2, [r3, #15]
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 800144c:	4b59      	ldr	r3, [pc, #356]	@ (80015b4 <USBD_Device_Framework_Builder+0x250>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2203      	movs	r2, #3
 8001452:	741a      	strb	r2, [r3, #16]
  pDevDesc->bNumConfigurations = USBD_MAX_NUM_CONFIGURATION;
 8001454:	4b57      	ldr	r3, [pc, #348]	@ (80015b4 <USBD_Device_Framework_Builder+0x250>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2201      	movs	r2, #1
 800145a:	745a      	strb	r2, [r3, #17]
  pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	2390      	movs	r3, #144	@ 0x90
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	58d3      	ldr	r3, [r2, r3]
 8001464:	3312      	adds	r3, #18
 8001466:	0019      	movs	r1, r3
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	2390      	movs	r3, #144	@ 0x90
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	50d1      	str	r1, [r2, r3]

  /* Check if USBx is in high speed mode to add qualifier descriptor */
  if (Speed == USBD_HIGH_SPEED)
 8001470:	1cfb      	adds	r3, r7, #3
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d172      	bne.n	800155e <USBD_Device_Framework_Builder+0x1fa>
  {
    pDevQualDesc = (USBD_DevQualiDescTypedef *)(pDevFrameWorkDesc + pdev->CurrDevDescSz);
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	2390      	movs	r3, #144	@ 0x90
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	58d3      	ldr	r3, [r2, r3]
 8001480:	68ba      	ldr	r2, [r7, #8]
 8001482:	18d2      	adds	r2, r2, r3
 8001484:	4b4c      	ldr	r3, [pc, #304]	@ (80015b8 <USBD_Device_Framework_Builder+0x254>)
 8001486:	601a      	str	r2, [r3, #0]
    pDevQualDesc->bLength = (uint8_t)sizeof(USBD_DevQualiDescTypedef);
 8001488:	4b4b      	ldr	r3, [pc, #300]	@ (80015b8 <USBD_Device_Framework_Builder+0x254>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	220a      	movs	r2, #10
 800148e:	701a      	strb	r2, [r3, #0]
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 8001490:	4b49      	ldr	r3, [pc, #292]	@ (80015b8 <USBD_Device_Framework_Builder+0x254>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2206      	movs	r2, #6
 8001496:	705a      	strb	r2, [r3, #1]
    pDevQualDesc->bcdDevice = 0x0200;
 8001498:	4b47      	ldr	r3, [pc, #284]	@ (80015b8 <USBD_Device_Framework_Builder+0x254>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	789a      	ldrb	r2, [r3, #2]
 800149e:	2100      	movs	r1, #0
 80014a0:	400a      	ands	r2, r1
 80014a2:	709a      	strb	r2, [r3, #2]
 80014a4:	78da      	ldrb	r2, [r3, #3]
 80014a6:	2100      	movs	r1, #0
 80014a8:	400a      	ands	r2, r1
 80014aa:	1c11      	adds	r1, r2, #0
 80014ac:	2202      	movs	r2, #2
 80014ae:	430a      	orrs	r2, r1
 80014b0:	70da      	strb	r2, [r3, #3]
    pDevQualDesc->Class = 0x00;
 80014b2:	4b41      	ldr	r3, [pc, #260]	@ (80015b8 <USBD_Device_Framework_Builder+0x254>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2200      	movs	r2, #0
 80014b8:	711a      	strb	r2, [r3, #4]
    pDevQualDesc->SubClass = 0x00;
 80014ba:	4b3f      	ldr	r3, [pc, #252]	@ (80015b8 <USBD_Device_Framework_Builder+0x254>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2200      	movs	r2, #0
 80014c0:	715a      	strb	r2, [r3, #5]
    pDevQualDesc->Protocol = 0x00;
 80014c2:	4b3d      	ldr	r3, [pc, #244]	@ (80015b8 <USBD_Device_Framework_Builder+0x254>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2200      	movs	r2, #0
 80014c8:	719a      	strb	r2, [r3, #6]
    pDevQualDesc->bMaxPacketSize = 0x40;
 80014ca:	4b3b      	ldr	r3, [pc, #236]	@ (80015b8 <USBD_Device_Framework_Builder+0x254>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2240      	movs	r2, #64	@ 0x40
 80014d0:	71da      	strb	r2, [r3, #7]
    pDevQualDesc->bNumConfigurations = 0x01;
 80014d2:	4b39      	ldr	r3, [pc, #228]	@ (80015b8 <USBD_Device_Framework_Builder+0x254>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2201      	movs	r2, #1
 80014d8:	721a      	strb	r2, [r3, #8]
    pDevQualDesc->bReserved = 0x00;
 80014da:	4b37      	ldr	r3, [pc, #220]	@ (80015b8 <USBD_Device_Framework_Builder+0x254>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2200      	movs	r2, #0
 80014e0:	725a      	strb	r2, [r3, #9]
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	2390      	movs	r3, #144	@ 0x90
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	58d3      	ldr	r3, [r2, r3]
 80014ea:	330a      	adds	r3, #10
 80014ec:	0019      	movs	r1, r3
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	2390      	movs	r3, #144	@ 0x90
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	50d1      	str	r1, [r2, r3]
  }

  /* Build the device framework */
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 80014f6:	e032      	b.n	800155e <USBD_Device_Framework_Builder+0x1fa>
  {
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d828      	bhi.n	8001552 <USBD_Device_Framework_Builder+0x1ee>
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	689b      	ldr	r3, [r3, #8]
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 8001504:	2b02      	cmp	r3, #2
 8001506:	d824      	bhi.n	8001552 <USBD_Device_Framework_Builder+0x1ee>
        (UserClassInstance[Idx_Instance] != CLASS_TYPE_NONE))
 8001508:	2117      	movs	r1, #23
 800150a:	187b      	adds	r3, r7, r1
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	18d3      	adds	r3, r2, r3
 8001512:	781b      	ldrb	r3, [r3, #0]
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 8001514:	2b00      	cmp	r3, #0
 8001516:	d01c      	beq.n	8001552 <USBD_Device_Framework_Builder+0x1ee>
    {
      /* Call the composite class builder */
      (void)USBD_FrameWork_AddClass(pdev,
                                    (USBD_CompositeClassTypeDef)UserClassInstance[Idx_Instance],
 8001518:	187b      	adds	r3, r7, r1
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	18d3      	adds	r3, r2, r3
      (void)USBD_FrameWork_AddClass(pdev,
 8001520:	7819      	ldrb	r1, [r3, #0]
                                    0, Speed,
                                    (pDevFrameWorkDesc + pdev->CurrDevDescSz));
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	2390      	movs	r3, #144	@ 0x90
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	58d3      	ldr	r3, [r2, r3]
      (void)USBD_FrameWork_AddClass(pdev,
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	18d3      	adds	r3, r2, r3
 800152e:	1cfa      	adds	r2, r7, #3
 8001530:	7812      	ldrb	r2, [r2, #0]
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	0013      	movs	r3, r2
 8001538:	2200      	movs	r2, #0
 800153a:	f000 f83f 	bl	80015bc <USBD_FrameWork_AddClass>

      /* Increment the ClassId for the next occurrence */
      pdev->classId ++;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	605a      	str	r2, [r3, #4]
      pdev->NumClasses ++;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	1c5a      	adds	r2, r3, #1
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	609a      	str	r2, [r3, #8]
    }

    Idx_Instance++;
 8001552:	2117      	movs	r1, #23
 8001554:	187b      	adds	r3, r7, r1
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	187b      	adds	r3, r7, r1
 800155a:	3201      	adds	r2, #1
 800155c:	701a      	strb	r2, [r3, #0]
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 800155e:	2317      	movs	r3, #23
 8001560:	18fb      	adds	r3, r7, r3
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b02      	cmp	r3, #2
 8001566:	d9c7      	bls.n	80014f8 <USBD_Device_Framework_Builder+0x194>
  }

  /* Check if there is a composite class and update device class */
  if (pdev->NumClasses > 1)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d90c      	bls.n	800158a <USBD_Device_Framework_Builder+0x226>
  {
    pDevDesc->bDeviceClass = 0xEF;
 8001570:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <USBD_Device_Framework_Builder+0x250>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	22ef      	movs	r2, #239	@ 0xef
 8001576:	711a      	strb	r2, [r3, #4]
    pDevDesc->bDeviceSubClass = 0x02;
 8001578:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <USBD_Device_Framework_Builder+0x250>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2202      	movs	r2, #2
 800157e:	715a      	strb	r2, [r3, #5]
    pDevDesc->bDeviceProtocol = 0x01;
 8001580:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <USBD_Device_Framework_Builder+0x250>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2201      	movs	r2, #1
 8001586:	719a      	strb	r2, [r3, #6]
 8001588:	e00f      	b.n	80015aa <USBD_Device_Framework_Builder+0x246>
  }
  else
  {
    /* Check if the CDC ACM class is set and update device class */
    if (UserClassInstance[0] == CLASS_TYPE_CDC_ACM)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d10b      	bne.n	80015aa <USBD_Device_Framework_Builder+0x246>
    {
      pDevDesc->bDeviceClass = 0x02;
 8001592:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <USBD_Device_Framework_Builder+0x250>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2202      	movs	r2, #2
 8001598:	711a      	strb	r2, [r3, #4]
      pDevDesc->bDeviceSubClass = 0x02;
 800159a:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <USBD_Device_Framework_Builder+0x250>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2202      	movs	r2, #2
 80015a0:	715a      	strb	r2, [r3, #5]
      pDevDesc->bDeviceProtocol = 0x00;
 80015a2:	4b04      	ldr	r3, [pc, #16]	@ (80015b4 <USBD_Device_Framework_Builder+0x250>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2200      	movs	r2, #0
 80015a8:	719a      	strb	r2, [r3, #6]
    }
  }

  return pDevFrameWorkDesc;
 80015aa:	68bb      	ldr	r3, [r7, #8]
}
 80015ac:	0018      	movs	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b006      	add	sp, #24
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20001580 	.word	0x20001580
 80015b8:	20001584 	.word	0x20001584

080015bc <USBD_FrameWork_AddClass>:
  */
uint8_t  USBD_FrameWork_AddClass(USBD_DevClassHandleTypeDef *pdev,
                                 USBD_CompositeClassTypeDef class,
                                 uint8_t cfgidx, uint8_t Speed,
                                 uint8_t *pCmpstConfDesc)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	000c      	movs	r4, r1
 80015c6:	0010      	movs	r0, r2
 80015c8:	0019      	movs	r1, r3
 80015ca:	1cfb      	adds	r3, r7, #3
 80015cc:	1c22      	adds	r2, r4, #0
 80015ce:	701a      	strb	r2, [r3, #0]
 80015d0:	1cbb      	adds	r3, r7, #2
 80015d2:	1c02      	adds	r2, r0, #0
 80015d4:	701a      	strb	r2, [r3, #0]
 80015d6:	1c7b      	adds	r3, r7, #1
 80015d8:	1c0a      	adds	r2, r1, #0
 80015da:	701a      	strb	r2, [r3, #0]

  static uint8_t interface_idx = 0U;

  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d850      	bhi.n	8001686 <USBD_FrameWork_AddClass+0xca>
      (pdev->tclasslist[pdev->classId].Active == 0U))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	215c      	movs	r1, #92	@ 0x5c
 80015ec:	434b      	muls	r3, r1
 80015ee:	18d3      	adds	r3, r2, r3
 80015f0:	3318      	adds	r3, #24
 80015f2:	681b      	ldr	r3, [r3, #0]
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d146      	bne.n	8001686 <USBD_FrameWork_AddClass+0xca>
  {
    /* Store the class parameters in the global tab */
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6858      	ldr	r0, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	235c      	movs	r3, #92	@ 0x5c
 8001604:	4343      	muls	r3, r0
 8001606:	18cb      	adds	r3, r1, r3
 8001608:	3310      	adds	r3, #16
 800160a:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].Active = 1U;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	215c      	movs	r1, #92	@ 0x5c
 8001614:	434b      	muls	r3, r1
 8001616:	18d3      	adds	r3, r2, r3
 8001618:	3318      	adds	r3, #24
 800161a:	2201      	movs	r2, #1
 800161c:	601a      	str	r2, [r3, #0]
    pdev->tclasslist[pdev->classId].ClassType = class;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	215c      	movs	r1, #92	@ 0x5c
 8001626:	434b      	muls	r3, r1
 8001628:	18d3      	adds	r3, r2, r3
 800162a:	330c      	adds	r3, #12
 800162c:	1cfa      	adds	r2, r7, #3
 800162e:	7812      	ldrb	r2, [r2, #0]
 8001630:	701a      	strb	r2, [r3, #0]

    if (class == CLASS_TYPE_HID)
 8001632:	1cfb      	adds	r3, r7, #3
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d11a      	bne.n	8001670 <USBD_FrameWork_AddClass+0xb4>
    {
      pdev->tclasslist[pdev->classId].InterfaceType = UserHIDInterface[interface_idx];
 800163a:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <USBD_FrameWork_AddClass+0xd4>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	0019      	movs	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	4a13      	ldr	r2, [pc, #76]	@ (8001694 <USBD_FrameWork_AddClass+0xd8>)
 8001646:	5c50      	ldrb	r0, [r2, r1]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	215c      	movs	r1, #92	@ 0x5c
 800164c:	434b      	muls	r3, r1
 800164e:	18d3      	adds	r3, r2, r3
 8001650:	3314      	adds	r3, #20
 8001652:	1c02      	adds	r2, r0, #0
 8001654:	701a      	strb	r2, [r3, #0]

      interface_idx++;
 8001656:	4b0e      	ldr	r3, [pc, #56]	@ (8001690 <USBD_FrameWork_AddClass+0xd4>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	3301      	adds	r3, #1
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <USBD_FrameWork_AddClass+0xd4>)
 8001660:	701a      	strb	r2, [r3, #0]

      if (interface_idx == sizeof(UserHIDInterface))
 8001662:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <USBD_FrameWork_AddClass+0xd4>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d102      	bne.n	8001670 <USBD_FrameWork_AddClass+0xb4>
      {
        interface_idx = 0U;
 800166a:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <USBD_FrameWork_AddClass+0xd4>)
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Call configuration descriptor builder and endpoint configuration builder */
    if (USBD_FrameWork_AddToConfDesc(pdev, Speed, pCmpstConfDesc) != UX_SUCCESS)
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	1c7b      	adds	r3, r7, #1
 8001674:	7819      	ldrb	r1, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	0018      	movs	r0, r3
 800167a:	f000 f80d 	bl	8001698 <USBD_FrameWork_AddToConfDesc>
 800167e:	1e03      	subs	r3, r0, #0
 8001680:	d001      	beq.n	8001686 <USBD_FrameWork_AddClass+0xca>
    {
      return UX_ERROR;
 8001682:	23ff      	movs	r3, #255	@ 0xff
 8001684:	e000      	b.n	8001688 <USBD_FrameWork_AddClass+0xcc>
    }
  }

  UNUSED(cfgidx);

  return UX_SUCCESS;
 8001686:	2300      	movs	r3, #0
}
 8001688:	0018      	movs	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	b003      	add	sp, #12
 800168e:	bd90      	pop	{r4, r7, pc}
 8001690:	20001588 	.word	0x20001588
 8001694:	2000000c 	.word	0x2000000c

08001698 <USBD_FrameWork_AddToConfDesc>:
  * @param  pCmpstConfDesc: to composite device configuration descriptor
  * @retval status
  */
uint8_t  USBD_FrameWork_AddToConfDesc(USBD_DevClassHandleTypeDef *pdev, uint8_t Speed,
                                      uint8_t *pCmpstConfDesc)
{
 8001698:	b5b0      	push	{r4, r5, r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	607a      	str	r2, [r7, #4]
 80016a2:	200b      	movs	r0, #11
 80016a4:	183b      	adds	r3, r7, r0
 80016a6:	1c0a      	adds	r2, r1, #0
 80016a8:	701a      	strb	r2, [r3, #0]
  uint8_t interface = 0U;
 80016aa:	2317      	movs	r3, #23
 80016ac:	18fb      	adds	r3, r7, r3
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN FrameWork_AddToConfDesc_0 */

  /* USER CODE END FrameWork_AddToConfDesc_0 */

  /* The USB drivers do not set the speed value, so set it here before starting */
  pdev->Speed = Speed;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	183a      	adds	r2, r7, r0
 80016b6:	7812      	ldrb	r2, [r2, #0]
 80016b8:	701a      	strb	r2, [r3, #0]

  /* start building the config descriptor common part */
  if (pdev->classId == 0U)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d107      	bne.n	80016d2 <USBD_FrameWork_AddToConfDesc+0x3a>
  {
    /* Add configuration and IAD descriptors */
    USBD_FrameWork_AddConfDesc((uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	3325      	adds	r3, #37	@ 0x25
 80016c8:	33ff      	adds	r3, #255	@ 0xff
 80016ca:	0019      	movs	r1, r3
 80016cc:	0010      	movs	r0, r2
 80016ce:	f000 f886 	bl	80017de <USBD_FrameWork_AddConfDesc>
  }

  switch (pdev->tclasslist[pdev->classId].ClassType)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	215c      	movs	r1, #92	@ 0x5c
 80016da:	434b      	muls	r3, r1
 80016dc:	18d3      	adds	r3, r2, r3
 80016de:	330c      	adds	r3, #12
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d14b      	bne.n	800177e <USBD_FrameWork_AddToConfDesc+0xe6>

#if USBD_HID_CLASS_ACTIVATED == 1U

    case CLASS_TYPE_HID:

      switch(pdev->tclasslist[pdev->classId].InterfaceType)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	215c      	movs	r1, #92	@ 0x5c
 80016ee:	434b      	muls	r3, r1
 80016f0:	18d3      	adds	r3, r2, r3
 80016f2:	3314      	adds	r3, #20
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d13f      	bne.n	800177a <USBD_FrameWork_AddToConfDesc+0xe2>
#if USBD_HID_KEYBOARD_ACTIVATED == 1U

        case INTERFACE_HID_KEYBOARD:

          /* Find the first available interface slot and Assign number of interfaces */
          interface = USBD_FrameWork_FindFreeIFNbr(pdev);
 80016fa:	2517      	movs	r5, #23
 80016fc:	197c      	adds	r4, r7, r5
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	0018      	movs	r0, r3
 8001702:	f000 f842 	bl	800178a <USBD_FrameWork_FindFreeIFNbr>
 8001706:	0003      	movs	r3, r0
 8001708:	7023      	strb	r3, [r4, #0]
          pdev->tclasslist[pdev->classId].NumIf = 1U;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	215c      	movs	r1, #92	@ 0x5c
 8001712:	434b      	muls	r3, r1
 8001714:	18d3      	adds	r3, r2, r3
 8001716:	3320      	adds	r3, #32
 8001718:	2201      	movs	r2, #1
 800171a:	601a      	str	r2, [r3, #0]
          pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	215a      	movs	r1, #90	@ 0x5a
 8001724:	205c      	movs	r0, #92	@ 0x5c
 8001726:	4343      	muls	r3, r0
 8001728:	18d3      	adds	r3, r2, r3
 800172a:	185b      	adds	r3, r3, r1
 800172c:	197a      	adds	r2, r7, r5
 800172e:	7812      	ldrb	r2, [r2, #0]
 8001730:	701a      	strb	r2, [r3, #0]

          /* Assign endpoint numbers */
          pdev->tclasslist[pdev->classId].NumEps = 1U; /* EP_IN */
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	215c      	movs	r1, #92	@ 0x5c
 800173a:	434b      	muls	r3, r1
 800173c:	18d3      	adds	r3, r2, r3
 800173e:	331c      	adds	r3, #28
 8001740:	2201      	movs	r2, #1
 8001742:	601a      	str	r2, [r3, #0]

          /* Check the current speed to assign endpoint IN */
          if (pdev->Speed == USBD_HIGH_SPEED)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d106      	bne.n	800175a <USBD_FrameWork_AddToConfDesc+0xc2>
          {
            /* Assign IN Endpoint */
            USBD_FrameWork_AssignEp(pdev, USBD_HID_KEYBOARD_EPIN_ADDR,
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	2304      	movs	r3, #4
 8001750:	2203      	movs	r2, #3
 8001752:	2182      	movs	r1, #130	@ 0x82
 8001754:	f000 f872 	bl	800183c <USBD_FrameWork_AssignEp>
 8001758:	e005      	b.n	8001766 <USBD_FrameWork_AddToConfDesc+0xce>
                                    USBD_EP_TYPE_INTR, USBD_HID_KEYBOARD_EPIN_HS_MPS);
          }
          else
          {
            /* Assign IN Endpoint */
            USBD_FrameWork_AssignEp(pdev, USBD_HID_KEYBOARD_EPIN_ADDR,
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	2304      	movs	r3, #4
 800175e:	2203      	movs	r2, #3
 8001760:	2182      	movs	r1, #130	@ 0x82
 8001762:	f000 f86b 	bl	800183c <USBD_FrameWork_AssignEp>
                                    USBD_EP_TYPE_INTR, USBD_HID_KEYBOARD_EPIN_FS_MPS);
          }

          /* Configure and Append the Descriptor */
          USBD_FrameWork_HID_Desc(pdev, (uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	3325      	adds	r3, #37	@ 0x25
 800176c:	33ff      	adds	r3, #255	@ 0xff
 800176e:	001a      	movs	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	0018      	movs	r0, r3
 8001774:	f000 f8dc 	bl	8001930 <USBD_FrameWork_HID_Desc>

          break;
 8001778:	e000      	b.n	800177c <USBD_FrameWork_AddToConfDesc+0xe4>

#endif /* USBD_HID_KEYBOARD_ACTIVATED == 1U */

        default:
          break;
 800177a:	46c0      	nop			@ (mov r8, r8)
      }

      break;
 800177c:	e000      	b.n	8001780 <USBD_FrameWork_AddToConfDesc+0xe8>

    default:
      /* USER CODE BEGIN FrameWork_AddToConfDesc_2 */

      /* USER CODE END FrameWork_AddToConfDesc_2 */
      break;
 800177e:	46c0      	nop			@ (mov r8, r8)
  }

  return UX_SUCCESS;
 8001780:	2300      	movs	r3, #0
}
 8001782:	0018      	movs	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	b006      	add	sp, #24
 8001788:	bdb0      	pop	{r4, r5, r7, pc}

0800178a <USBD_FrameWork_FindFreeIFNbr>:
  *         Find the first interface available slot
  * @param  pdev: device instance
  * @retval The interface number to be used
  */
static uint8_t USBD_FrameWork_FindFreeIFNbr(USBD_DevClassHandleTypeDef *pdev)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  uint32_t idx = 0U;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]

  /* Unroll all already activated classes */
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	e015      	b.n	80017c8 <USBD_FrameWork_FindFreeIFNbr+0x3e>
  {
    /* Unroll each class interfaces */
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	e005      	b.n	80017ae <USBD_FrameWork_FindFreeIFNbr+0x24>
    {
      /* Increment the interface counter index */
      idx++;
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	3301      	adds	r3, #1
 80017a6:	617b      	str	r3, [r7, #20]
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3301      	adds	r3, #1
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	215c      	movs	r1, #92	@ 0x5c
 80017b4:	434b      	muls	r3, r1
 80017b6:	18d3      	adds	r3, r2, r3
 80017b8:	3320      	adds	r3, #32
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d3ef      	bcc.n	80017a2 <USBD_FrameWork_FindFreeIFNbr+0x18>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	3301      	adds	r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d3e4      	bcc.n	800179c <USBD_FrameWork_FindFreeIFNbr+0x12>
    }
  }

  /* Return the first available interface slot */
  return (uint8_t)idx;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	b2db      	uxtb	r3, r3
}
 80017d6:	0018      	movs	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	b006      	add	sp, #24
 80017dc:	bd80      	pop	{r7, pc}

080017de <USBD_FrameWork_AddConfDesc>:
  * @param  Conf: configuration descriptor
  * @param  pSze: pointer to the configuration descriptor size
  * @retval none
  */
static void  USBD_FrameWork_AddConfDesc(uint32_t Conf, uint32_t *pSze)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b084      	sub	sp, #16
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
  /* Intermediate variable to comply with MISRA-C Rule 11.3 */
  USBD_ConfigDescTypedef *ptr = (USBD_ConfigDescTypedef *)Conf;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	60fb      	str	r3, [r7, #12]

  ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypedef);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2209      	movs	r2, #9
 80017f0:	701a      	strb	r2, [r3, #0]
  ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2202      	movs	r2, #2
 80017f6:	705a      	strb	r2, [r3, #1]
  ptr->wDescriptorLength = 0U;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	789a      	ldrb	r2, [r3, #2]
 80017fc:	2100      	movs	r1, #0
 80017fe:	400a      	ands	r2, r1
 8001800:	709a      	strb	r2, [r3, #2]
 8001802:	78da      	ldrb	r2, [r3, #3]
 8001804:	2100      	movs	r1, #0
 8001806:	400a      	ands	r2, r1
 8001808:	70da      	strb	r2, [r3, #3]
  ptr->bNumInterfaces = 0U;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	711a      	strb	r2, [r3, #4]
  ptr->bConfigurationValue = 1U;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2201      	movs	r2, #1
 8001814:	715a      	strb	r2, [r3, #5]
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	719a      	strb	r2, [r3, #6]
  ptr->bmAttributes = USBD_CONFIG_BMATTRIBUTES;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	22c0      	movs	r2, #192	@ 0xc0
 8001820:	71da      	strb	r2, [r3, #7]
  ptr->bMaxPower = USBD_CONFIG_MAXPOWER;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2219      	movs	r2, #25
 8001826:	721a      	strb	r2, [r3, #8]
  *pSze += sizeof(USBD_ConfigDescTypedef);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	3309      	adds	r3, #9
 800182e:	001a      	movs	r2, r3
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	601a      	str	r2, [r3, #0]
}
 8001834:	46c0      	nop			@ (mov r8, r8)
 8001836:	46bd      	mov	sp, r7
 8001838:	b004      	add	sp, #16
 800183a:	bd80      	pop	{r7, pc}

0800183c <USBD_FrameWork_AssignEp>:
  * @param  Sze: Endpoint max packet size
  * @retval none
  */
static void  USBD_FrameWork_AssignEp(USBD_DevClassHandleTypeDef *pdev,
                                     uint8_t Add, uint8_t Type, uint32_t Sze)
{
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b087      	sub	sp, #28
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	0008      	movs	r0, r1
 8001846:	0011      	movs	r1, r2
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	230b      	movs	r3, #11
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	1c02      	adds	r2, r0, #0
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	230a      	movs	r3, #10
 8001854:	18fb      	adds	r3, r7, r3
 8001856:	1c0a      	adds	r2, r1, #0
 8001858:	701a      	strb	r2, [r3, #0]
  uint32_t idx = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 800185e:	e002      	b.n	8001866 <USBD_FrameWork_AssignEp+0x2a>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
  {
    /* Increment the index */
    idx++;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	3301      	adds	r3, #1
 8001864:	617b      	str	r3, [r7, #20]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	215c      	movs	r1, #92	@ 0x5c
 800186e:	434b      	muls	r3, r1
 8001870:	18d3      	adds	r3, r2, r3
 8001872:	331c      	adds	r3, #28
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	429a      	cmp	r2, r3
 800187a:	d210      	bcs.n	800189e <USBD_FrameWork_AssignEp+0x62>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6858      	ldr	r0, [r3, #4]
 8001880:	68f9      	ldr	r1, [r7, #12]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	2428      	movs	r4, #40	@ 0x28
 8001886:	0013      	movs	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	189b      	adds	r3, r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	225c      	movs	r2, #92	@ 0x5c
 8001890:	4342      	muls	r2, r0
 8001892:	189b      	adds	r3, r3, r2
 8001894:	18cb      	adds	r3, r1, r3
 8001896:	191b      	adds	r3, r3, r4
 8001898:	781b      	ldrb	r3, [r3, #0]
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1e0      	bne.n	8001860 <USBD_FrameWork_AssignEp+0x24>
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6858      	ldr	r0, [r3, #4]
 80018a2:	68f9      	ldr	r1, [r7, #12]
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	2424      	movs	r4, #36	@ 0x24
 80018a8:	0013      	movs	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	189b      	adds	r3, r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	225c      	movs	r2, #92	@ 0x5c
 80018b2:	4342      	muls	r2, r0
 80018b4:	189b      	adds	r3, r3, r2
 80018b6:	18cb      	adds	r3, r1, r3
 80018b8:	191b      	adds	r3, r3, r4
 80018ba:	220b      	movs	r2, #11
 80018bc:	18ba      	adds	r2, r7, r2
 80018be:	7812      	ldrb	r2, [r2, #0]
 80018c0:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6858      	ldr	r0, [r3, #4]
 80018c6:	68f9      	ldr	r1, [r7, #12]
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	2425      	movs	r4, #37	@ 0x25
 80018cc:	0013      	movs	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	189b      	adds	r3, r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	225c      	movs	r2, #92	@ 0x5c
 80018d6:	4342      	muls	r2, r0
 80018d8:	189b      	adds	r3, r3, r2
 80018da:	18cb      	adds	r3, r1, r3
 80018dc:	191b      	adds	r3, r3, r4
 80018de:	220a      	movs	r2, #10
 80018e0:	18ba      	adds	r2, r7, r2
 80018e2:	7812      	ldrb	r2, [r2, #0]
 80018e4:	701a      	strb	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint16_t) Sze;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6858      	ldr	r0, [r3, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	b29c      	uxth	r4, r3
 80018ee:	68f9      	ldr	r1, [r7, #12]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	0013      	movs	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	189b      	adds	r3, r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	225c      	movs	r2, #92	@ 0x5c
 80018fc:	4342      	muls	r2, r0
 80018fe:	189b      	adds	r3, r3, r2
 8001900:	18cb      	adds	r3, r1, r3
 8001902:	3326      	adds	r3, #38	@ 0x26
 8001904:	1c22      	adds	r2, r4, #0
 8001906:	801a      	strh	r2, [r3, #0]
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6858      	ldr	r0, [r3, #4]
 800190c:	68f9      	ldr	r1, [r7, #12]
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	2428      	movs	r4, #40	@ 0x28
 8001912:	0013      	movs	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	189b      	adds	r3, r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	225c      	movs	r2, #92	@ 0x5c
 800191c:	4342      	muls	r2, r0
 800191e:	189b      	adds	r3, r3, r2
 8001920:	18cb      	adds	r3, r1, r3
 8001922:	191b      	adds	r3, r3, r4
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
}
 8001928:	46c0      	nop			@ (mov r8, r8)
 800192a:	46bd      	mov	sp, r7
 800192c:	b007      	add	sp, #28
 800192e:	bd90      	pop	{r4, r7, pc}

08001930 <USBD_FrameWork_HID_Desc>:
  * @param  Sze: pointer to the current configuration descriptor size
  * @retval None
  */
static void  USBD_FrameWork_HID_Desc(USBD_DevClassHandleTypeDef *pdev,
                                     uint32_t pConf, uint32_t *Sze)
{
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  static USBD_IfDescTypedef       *pIfDesc;
  static USBD_EpDescTypedef       *pEpDesc;
  static USBD_HIDDescTypedef      *pHidDesc;

  switch(pdev->tclasslist[pdev->classId].InterfaceType)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	215c      	movs	r1, #92	@ 0x5c
 8001944:	434b      	muls	r3, r1
 8001946:	18d3      	adds	r3, r2, r3
 8001948:	3314      	adds	r3, #20
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d000      	beq.n	8001952 <USBD_FrameWork_HID_Desc+0x22>
 8001950:	e12e      	b.n	8001bb0 <USBD_FrameWork_HID_Desc+0x280>

#if USBD_HID_KEYBOARD_ACTIVATED == 1U
    case INTERFACE_HID_KEYBOARD:

      /* Append HID Interface descriptor to Configuration descriptor */
      __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U,
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	18d3      	adds	r3, r2, r3
 800195a:	001a      	movs	r2, r3
 800195c:	4ba5      	ldr	r3, [pc, #660]	@ (8001bf4 <USBD_FrameWork_HID_Desc+0x2c4>)
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	4ba4      	ldr	r3, [pc, #656]	@ (8001bf4 <USBD_FrameWork_HID_Desc+0x2c4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2209      	movs	r2, #9
 8001966:	701a      	strb	r2, [r3, #0]
 8001968:	4ba2      	ldr	r3, [pc, #648]	@ (8001bf4 <USBD_FrameWork_HID_Desc+0x2c4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2204      	movs	r2, #4
 800196e:	705a      	strb	r2, [r3, #1]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	4b9f      	ldr	r3, [pc, #636]	@ (8001bf4 <USBD_FrameWork_HID_Desc+0x2c4>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68f9      	ldr	r1, [r7, #12]
 800197a:	205a      	movs	r0, #90	@ 0x5a
 800197c:	245c      	movs	r4, #92	@ 0x5c
 800197e:	4362      	muls	r2, r4
 8001980:	188a      	adds	r2, r1, r2
 8001982:	1812      	adds	r2, r2, r0
 8001984:	7812      	ldrb	r2, [r2, #0]
 8001986:	709a      	strb	r2, [r3, #2]
 8001988:	4b9a      	ldr	r3, [pc, #616]	@ (8001bf4 <USBD_FrameWork_HID_Desc+0x2c4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2200      	movs	r2, #0
 800198e:	70da      	strb	r2, [r3, #3]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	215c      	movs	r1, #92	@ 0x5c
 8001998:	434b      	muls	r3, r1
 800199a:	18d3      	adds	r3, r2, r3
 800199c:	331c      	adds	r3, #28
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b94      	ldr	r3, [pc, #592]	@ (8001bf4 <USBD_FrameWork_HID_Desc+0x2c4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	711a      	strb	r2, [r3, #4]
 80019a8:	4b92      	ldr	r3, [pc, #584]	@ (8001bf4 <USBD_FrameWork_HID_Desc+0x2c4>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2203      	movs	r2, #3
 80019ae:	715a      	strb	r2, [r3, #5]
 80019b0:	4b90      	ldr	r3, [pc, #576]	@ (8001bf4 <USBD_FrameWork_HID_Desc+0x2c4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2201      	movs	r2, #1
 80019b6:	719a      	strb	r2, [r3, #6]
 80019b8:	4b8e      	ldr	r3, [pc, #568]	@ (8001bf4 <USBD_FrameWork_HID_Desc+0x2c4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2201      	movs	r2, #1
 80019be:	71da      	strb	r2, [r3, #7]
 80019c0:	4b8c      	ldr	r3, [pc, #560]	@ (8001bf4 <USBD_FrameWork_HID_Desc+0x2c4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2200      	movs	r2, #0
 80019c6:	721a      	strb	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	3309      	adds	r3, #9
 80019ce:	001a      	movs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	601a      	str	r2, [r3, #0]
                              (uint8_t)(pdev->tclasslist[pdev->classId].NumEps),
                              UX_DEVICE_CLASS_HID_CLASS,
                              0x01U, INTERFACE_HID_KEYBOARD, 0U);

      /* Append HID Functional descriptor to Configuration descriptor */
      pHidDesc = ((USBD_HIDDescTypedef *)(pConf + *Sze));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	18d3      	adds	r3, r2, r3
 80019dc:	001a      	movs	r2, r3
 80019de:	4b86      	ldr	r3, [pc, #536]	@ (8001bf8 <USBD_FrameWork_HID_Desc+0x2c8>)
 80019e0:	601a      	str	r2, [r3, #0]
      pHidDesc->bLength = (uint8_t)sizeof(USBD_HIDDescTypedef);
 80019e2:	4b85      	ldr	r3, [pc, #532]	@ (8001bf8 <USBD_FrameWork_HID_Desc+0x2c8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2209      	movs	r2, #9
 80019e8:	701a      	strb	r2, [r3, #0]
      pHidDesc->bDescriptorType = UX_DEVICE_CLASS_HID_DESCRIPTOR_HID;
 80019ea:	4b83      	ldr	r3, [pc, #524]	@ (8001bf8 <USBD_FrameWork_HID_Desc+0x2c8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2221      	movs	r2, #33	@ 0x21
 80019f0:	705a      	strb	r2, [r3, #1]
      pHidDesc->bcdHID = 0x0111U;
 80019f2:	4b81      	ldr	r3, [pc, #516]	@ (8001bf8 <USBD_FrameWork_HID_Desc+0x2c8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	789a      	ldrb	r2, [r3, #2]
 80019f8:	2100      	movs	r1, #0
 80019fa:	400a      	ands	r2, r1
 80019fc:	1c11      	adds	r1, r2, #0
 80019fe:	2211      	movs	r2, #17
 8001a00:	430a      	orrs	r2, r1
 8001a02:	709a      	strb	r2, [r3, #2]
 8001a04:	78da      	ldrb	r2, [r3, #3]
 8001a06:	2100      	movs	r1, #0
 8001a08:	400a      	ands	r2, r1
 8001a0a:	1c11      	adds	r1, r2, #0
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	70da      	strb	r2, [r3, #3]
      pHidDesc->bCountryCode = 0x00U;
 8001a12:	4b79      	ldr	r3, [pc, #484]	@ (8001bf8 <USBD_FrameWork_HID_Desc+0x2c8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2200      	movs	r2, #0
 8001a18:	711a      	strb	r2, [r3, #4]
      pHidDesc->bNumDescriptors = 0x01U;
 8001a1a:	4b77      	ldr	r3, [pc, #476]	@ (8001bf8 <USBD_FrameWork_HID_Desc+0x2c8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	715a      	strb	r2, [r3, #5]
      pHidDesc->bHIDDescriptorType = 0x22U;
 8001a22:	4b75      	ldr	r3, [pc, #468]	@ (8001bf8 <USBD_FrameWork_HID_Desc+0x2c8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2222      	movs	r2, #34	@ 0x22
 8001a28:	719a      	strb	r2, [r3, #6]
      pHidDesc->wDescriptorLength = USBD_HID_ReportDesc_length(INTERFACE_HID_KEYBOARD);
 8001a2a:	4b73      	ldr	r3, [pc, #460]	@ (8001bf8 <USBD_FrameWork_HID_Desc+0x2c8>)
 8001a2c:	681c      	ldr	r4, [r3, #0]
 8001a2e:	2001      	movs	r0, #1
 8001a30:	f7ff fc24 	bl	800127c <USBD_HID_ReportDesc_length>
 8001a34:	0003      	movs	r3, r0
 8001a36:	001a      	movs	r2, r3
 8001a38:	1de3      	adds	r3, r4, #7
 8001a3a:	21ff      	movs	r1, #255	@ 0xff
 8001a3c:	4011      	ands	r1, r2
 8001a3e:	000c      	movs	r4, r1
 8001a40:	7819      	ldrb	r1, [r3, #0]
 8001a42:	2000      	movs	r0, #0
 8001a44:	4001      	ands	r1, r0
 8001a46:	1c08      	adds	r0, r1, #0
 8001a48:	1c21      	adds	r1, r4, #0
 8001a4a:	4301      	orrs	r1, r0
 8001a4c:	7019      	strb	r1, [r3, #0]
 8001a4e:	0a12      	lsrs	r2, r2, #8
 8001a50:	b290      	uxth	r0, r2
 8001a52:	785a      	ldrb	r2, [r3, #1]
 8001a54:	2100      	movs	r1, #0
 8001a56:	400a      	ands	r2, r1
 8001a58:	1c11      	adds	r1, r2, #0
 8001a5a:	1c02      	adds	r2, r0, #0
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	705a      	strb	r2, [r3, #1]
      *Sze += (uint32_t)sizeof(USBD_HIDDescTypedef);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	3309      	adds	r3, #9
 8001a66:	001a      	movs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	601a      	str	r2, [r3, #0]

      if (pdev->Speed == USBD_HIGH_SPEED)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d14e      	bne.n	8001b12 <USBD_FrameWork_HID_Desc+0x1e2>
      {
        /* Append Endpoint descriptor to Configuration descriptor */
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	18d3      	adds	r3, r2, r3
 8001a7c:	001a      	movs	r2, r3
 8001a7e:	4b5f      	ldr	r3, [pc, #380]	@ (8001bfc <USBD_FrameWork_HID_Desc+0x2cc>)
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	4b5e      	ldr	r3, [pc, #376]	@ (8001bfc <USBD_FrameWork_HID_Desc+0x2cc>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2207      	movs	r2, #7
 8001a88:	701a      	strb	r2, [r3, #0]
 8001a8a:	4b5c      	ldr	r3, [pc, #368]	@ (8001bfc <USBD_FrameWork_HID_Desc+0x2cc>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2205      	movs	r2, #5
 8001a90:	705a      	strb	r2, [r3, #1]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	4b59      	ldr	r3, [pc, #356]	@ (8001bfc <USBD_FrameWork_HID_Desc+0x2cc>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68f9      	ldr	r1, [r7, #12]
 8001a9c:	2024      	movs	r0, #36	@ 0x24
 8001a9e:	245c      	movs	r4, #92	@ 0x5c
 8001aa0:	4362      	muls	r2, r4
 8001aa2:	188a      	adds	r2, r1, r2
 8001aa4:	1812      	adds	r2, r2, r0
 8001aa6:	7812      	ldrb	r2, [r2, #0]
 8001aa8:	709a      	strb	r2, [r3, #2]
 8001aaa:	4b54      	ldr	r3, [pc, #336]	@ (8001bfc <USBD_FrameWork_HID_Desc+0x2cc>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2203      	movs	r2, #3
 8001ab0:	70da      	strb	r2, [r3, #3]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	4b51      	ldr	r3, [pc, #324]	@ (8001bfc <USBD_FrameWork_HID_Desc+0x2cc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68f9      	ldr	r1, [r7, #12]
 8001abc:	205c      	movs	r0, #92	@ 0x5c
 8001abe:	4342      	muls	r2, r0
 8001ac0:	188a      	adds	r2, r1, r2
 8001ac2:	3226      	adds	r2, #38	@ 0x26
 8001ac4:	8812      	ldrh	r2, [r2, #0]
 8001ac6:	21ff      	movs	r1, #255	@ 0xff
 8001ac8:	4011      	ands	r1, r2
 8001aca:	000c      	movs	r4, r1
 8001acc:	7919      	ldrb	r1, [r3, #4]
 8001ace:	2000      	movs	r0, #0
 8001ad0:	4001      	ands	r1, r0
 8001ad2:	1c08      	adds	r0, r1, #0
 8001ad4:	1c21      	adds	r1, r4, #0
 8001ad6:	4301      	orrs	r1, r0
 8001ad8:	7119      	strb	r1, [r3, #4]
 8001ada:	0a12      	lsrs	r2, r2, #8
 8001adc:	b290      	uxth	r0, r2
 8001ade:	795a      	ldrb	r2, [r3, #5]
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	400a      	ands	r2, r1
 8001ae4:	1c11      	adds	r1, r2, #0
 8001ae6:	1c02      	adds	r2, r0, #0
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	715a      	strb	r2, [r3, #5]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d104      	bne.n	8001afe <USBD_FrameWork_HID_Desc+0x1ce>
 8001af4:	4b41      	ldr	r3, [pc, #260]	@ (8001bfc <USBD_FrameWork_HID_Desc+0x2cc>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2205      	movs	r2, #5
 8001afa:	719a      	strb	r2, [r3, #6]
 8001afc:	e003      	b.n	8001b06 <USBD_FrameWork_HID_Desc+0x1d6>
 8001afe:	4b3f      	ldr	r3, [pc, #252]	@ (8001bfc <USBD_FrameWork_HID_Desc+0x2cc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2205      	movs	r2, #5
 8001b04:	719a      	strb	r2, [r3, #6]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	1dda      	adds	r2, r3, #7
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	601a      	str	r2, [r3, #0]
                                (uint16_t)pdev->tclasslist[pdev->classId].Eps[0].size,
                                USBD_HID_KEYBOARD_EPIN_HS_BINTERVAL,
                                USBD_HID_KEYBOARD_EPIN_FS_BINTERVAL);
      }

      break;
 8001b10:	e04f      	b.n	8001bb2 <USBD_FrameWork_HID_Desc+0x282>
        __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	18d3      	adds	r3, r2, r3
 8001b1a:	001a      	movs	r2, r3
 8001b1c:	4b37      	ldr	r3, [pc, #220]	@ (8001bfc <USBD_FrameWork_HID_Desc+0x2cc>)
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	4b36      	ldr	r3, [pc, #216]	@ (8001bfc <USBD_FrameWork_HID_Desc+0x2cc>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2207      	movs	r2, #7
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	4b34      	ldr	r3, [pc, #208]	@ (8001bfc <USBD_FrameWork_HID_Desc+0x2cc>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2205      	movs	r2, #5
 8001b2e:	705a      	strb	r2, [r3, #1]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	4b31      	ldr	r3, [pc, #196]	@ (8001bfc <USBD_FrameWork_HID_Desc+0x2cc>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68f9      	ldr	r1, [r7, #12]
 8001b3a:	2024      	movs	r0, #36	@ 0x24
 8001b3c:	245c      	movs	r4, #92	@ 0x5c
 8001b3e:	4362      	muls	r2, r4
 8001b40:	188a      	adds	r2, r1, r2
 8001b42:	1812      	adds	r2, r2, r0
 8001b44:	7812      	ldrb	r2, [r2, #0]
 8001b46:	709a      	strb	r2, [r3, #2]
 8001b48:	4b2c      	ldr	r3, [pc, #176]	@ (8001bfc <USBD_FrameWork_HID_Desc+0x2cc>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	70da      	strb	r2, [r3, #3]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	4b29      	ldr	r3, [pc, #164]	@ (8001bfc <USBD_FrameWork_HID_Desc+0x2cc>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68f9      	ldr	r1, [r7, #12]
 8001b5a:	205c      	movs	r0, #92	@ 0x5c
 8001b5c:	4342      	muls	r2, r0
 8001b5e:	188a      	adds	r2, r1, r2
 8001b60:	3226      	adds	r2, #38	@ 0x26
 8001b62:	8812      	ldrh	r2, [r2, #0]
 8001b64:	21ff      	movs	r1, #255	@ 0xff
 8001b66:	4011      	ands	r1, r2
 8001b68:	000c      	movs	r4, r1
 8001b6a:	7919      	ldrb	r1, [r3, #4]
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	4001      	ands	r1, r0
 8001b70:	1c08      	adds	r0, r1, #0
 8001b72:	1c21      	adds	r1, r4, #0
 8001b74:	4301      	orrs	r1, r0
 8001b76:	7119      	strb	r1, [r3, #4]
 8001b78:	0a12      	lsrs	r2, r2, #8
 8001b7a:	b290      	uxth	r0, r2
 8001b7c:	795a      	ldrb	r2, [r3, #5]
 8001b7e:	2100      	movs	r1, #0
 8001b80:	400a      	ands	r2, r1
 8001b82:	1c11      	adds	r1, r2, #0
 8001b84:	1c02      	adds	r2, r0, #0
 8001b86:	430a      	orrs	r2, r1
 8001b88:	715a      	strb	r2, [r3, #5]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d104      	bne.n	8001b9c <USBD_FrameWork_HID_Desc+0x26c>
 8001b92:	4b1a      	ldr	r3, [pc, #104]	@ (8001bfc <USBD_FrameWork_HID_Desc+0x2cc>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2205      	movs	r2, #5
 8001b98:	719a      	strb	r2, [r3, #6]
 8001b9a:	e003      	b.n	8001ba4 <USBD_FrameWork_HID_Desc+0x274>
 8001b9c:	4b17      	ldr	r3, [pc, #92]	@ (8001bfc <USBD_FrameWork_HID_Desc+0x2cc>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2205      	movs	r2, #5
 8001ba2:	719a      	strb	r2, [r3, #6]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	1dda      	adds	r2, r3, #7
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	601a      	str	r2, [r3, #0]
      break;
 8001bae:	e000      	b.n	8001bb2 <USBD_FrameWork_HID_Desc+0x282>

#endif /* USBD_HID_KEYBOARD_ACTIVATED == 1U */

    default:
      break;
 8001bb0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 1U;
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	791a      	ldrb	r2, [r3, #4]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	3201      	adds	r2, #1
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	711a      	strb	r2, [r3, #4]
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	b292      	uxth	r2, r2
 8001bc6:	21ff      	movs	r1, #255	@ 0xff
 8001bc8:	4011      	ands	r1, r2
 8001bca:	000c      	movs	r4, r1
 8001bcc:	7899      	ldrb	r1, [r3, #2]
 8001bce:	2000      	movs	r0, #0
 8001bd0:	4001      	ands	r1, r0
 8001bd2:	1c08      	adds	r0, r1, #0
 8001bd4:	1c21      	adds	r1, r4, #0
 8001bd6:	4301      	orrs	r1, r0
 8001bd8:	7099      	strb	r1, [r3, #2]
 8001bda:	0a12      	lsrs	r2, r2, #8
 8001bdc:	b290      	uxth	r0, r2
 8001bde:	78da      	ldrb	r2, [r3, #3]
 8001be0:	2100      	movs	r1, #0
 8001be2:	400a      	ands	r2, r1
 8001be4:	1c11      	adds	r1, r2, #0
 8001be6:	1c02      	adds	r2, r0, #0
 8001be8:	430a      	orrs	r2, r1
 8001bea:	70da      	strb	r2, [r3, #3]

}
 8001bec:	46c0      	nop			@ (mov r8, r8)
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b005      	add	sp, #20
 8001bf2:	bd90      	pop	{r4, r7, pc}
 8001bf4:	2000158c 	.word	0x2000158c
 8001bf8:	20001590 	.word	0x20001590
 8001bfc:	20001594 	.word	0x20001594

08001c00 <USBD_HID_Keyboard_Activate>:
  *         This function is called when insertion of a HID Keyboard device.
  * @param  hid_instance: Pointer to the hid class instance.
  * @retval none
  */
VOID USBD_HID_Keyboard_Activate(VOID *hid_instance)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_HID_Keyboard_Activate */
  UX_PARAMETER_NOT_USED(hid_instance);
  /* USER CODE END USBD_HID_Keyboard_Activate */

  return;
 8001c08:	46c0      	nop			@ (mov r8, r8)
}
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b002      	add	sp, #8
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <USBD_HID_Keyboard_Deactivate>:
  *         This function is called when extraction of a HID Keyboard device.
  * @param  hid_instance: Pointer to the hid class instance.
  * @retval none
  */
VOID USBD_HID_Keyboard_Deactivate(VOID *hid_instance)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_HID_Keyboard_Deactivate */
  UX_PARAMETER_NOT_USED(hid_instance);
  /* USER CODE END USBD_HID_Keyboard_Deactivate */

  return;
 8001c18:	46c0      	nop			@ (mov r8, r8)
}
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b002      	add	sp, #8
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <USBD_HID_Keyboard_SetReport>:
  * @param  hid_event: Pointer to structure of the hid event.
  * @retval status
  */
UINT USBD_HID_Keyboard_SetReport(UX_SLAVE_CLASS_HID *hid_instance,
                                 UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  UINT status = UX_SUCCESS;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN USBD_HID_Keyboard_SetReport */
  UX_PARAMETER_NOT_USED(hid_instance);
  UX_PARAMETER_NOT_USED(hid_event);
  /* USER CODE END USBD_HID_Keyboard_SetReport */

  return status;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
}
 8001c30:	0018      	movs	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b004      	add	sp, #16
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <USBD_HID_Keyboard_GetReport>:
  * @param  hid_event: Pointer to structure of the hid event.
  * @retval status
  */
UINT USBD_HID_Keyboard_GetReport(UX_SLAVE_CLASS_HID *hid_instance,
                                 UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  UINT status = UX_SUCCESS;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN USBD_HID_Keyboard_GetReport */
  UX_PARAMETER_NOT_USED(hid_instance);
  UX_PARAMETER_NOT_USED(hid_event);
  /* USER CODE END USBD_HID_Keyboard_GetReport */

  return status;
 8001c46:	68fb      	ldr	r3, [r7, #12]
}
 8001c48:	0018      	movs	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	b004      	add	sp, #16
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c56:	4b12      	ldr	r3, [pc, #72]	@ (8001ca0 <SystemInit+0x50>)
 8001c58:	2280      	movs	r2, #128	@ 0x80
 8001c5a:	0512      	lsls	r2, r2, #20
 8001c5c:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 8001c5e:	4a11      	ldr	r2, [pc, #68]	@ (8001ca4 <SystemInit+0x54>)
 8001c60:	2380      	movs	r3, #128	@ 0x80
 8001c62:	58d3      	ldr	r3, [r2, r3]
 8001c64:	607b      	str	r3, [r7, #4]
  tmp_optr = FLASH->OPTR;
 8001c66:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca4 <SystemInit+0x54>)
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	603b      	str	r3, [r7, #0]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	2380      	movs	r3, #128	@ 0x80
 8001c70:	025b      	lsls	r3, r3, #9
 8001c72:	4013      	ands	r3, r2
 8001c74:	d010      	beq.n	8001c98 <SystemInit+0x48>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	22ff      	movs	r2, #255	@ 0xff
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2bcc      	cmp	r3, #204	@ 0xcc
 8001c7e:	d00b      	beq.n	8001c98 <SystemInit+0x48>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	22ff      	movs	r2, #255	@ 0xff
 8001c84:	4013      	ands	r3, r2
 8001c86:	2baa      	cmp	r3, #170	@ 0xaa
 8001c88:	d006      	beq.n	8001c98 <SystemInit+0x48>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <SystemInit+0x54>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ca4 <SystemInit+0x54>)
 8001c90:	2180      	movs	r1, #128	@ 0x80
 8001c92:	02c9      	lsls	r1, r1, #11
 8001c94:	430a      	orrs	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 8001c98:	46c0      	nop			@ (mov r8, r8)
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b002      	add	sp, #8
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	e000ed00 	.word	0xe000ed00
 8001ca4:	40022000 	.word	0x40022000

08001ca8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cae:	1dfb      	adds	r3, r7, #7
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cb4:	2003      	movs	r0, #3
 8001cb6:	f000 f80f 	bl	8001cd8 <HAL_InitTick>
 8001cba:	1e03      	subs	r3, r0, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	701a      	strb	r2, [r3, #0]
 8001cc4:	e001      	b.n	8001cca <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cc6:	f7fe febd 	bl	8000a44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cca:	1dfb      	adds	r3, r7, #7
 8001ccc:	781b      	ldrb	r3, [r3, #0]
}
 8001cce:	0018      	movs	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	b002      	add	sp, #8
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ce0:	230f      	movs	r3, #15
 8001ce2:	18fb      	adds	r3, r7, r3
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d60 <HAL_InitTick+0x88>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d02b      	beq.n	8001d48 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d64 <HAL_InitTick+0x8c>)
 8001cf2:	681c      	ldr	r4, [r3, #0]
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d60 <HAL_InitTick+0x88>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	23fa      	movs	r3, #250	@ 0xfa
 8001cfc:	0098      	lsls	r0, r3, #2
 8001cfe:	f7fe fa15 	bl	800012c <__udivsi3>
 8001d02:	0003      	movs	r3, r0
 8001d04:	0019      	movs	r1, r3
 8001d06:	0020      	movs	r0, r4
 8001d08:	f7fe fa10 	bl	800012c <__udivsi3>
 8001d0c:	0003      	movs	r3, r0
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f000 f917 	bl	8001f42 <HAL_SYSTICK_Config>
 8001d14:	1e03      	subs	r3, r0, #0
 8001d16:	d112      	bne.n	8001d3e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d80a      	bhi.n	8001d34 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	2301      	movs	r3, #1
 8001d22:	425b      	negs	r3, r3
 8001d24:	2200      	movs	r2, #0
 8001d26:	0018      	movs	r0, r3
 8001d28:	f000 f8e6 	bl	8001ef8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d68 <HAL_InitTick+0x90>)
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	e00d      	b.n	8001d50 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001d34:	230f      	movs	r3, #15
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
 8001d3c:	e008      	b.n	8001d50 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d3e:	230f      	movs	r3, #15
 8001d40:	18fb      	adds	r3, r7, r3
 8001d42:	2201      	movs	r2, #1
 8001d44:	701a      	strb	r2, [r3, #0]
 8001d46:	e003      	b.n	8001d50 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d48:	230f      	movs	r3, #15
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001d50:	230f      	movs	r3, #15
 8001d52:	18fb      	adds	r3, r7, r3
 8001d54:	781b      	ldrb	r3, [r3, #0]
}
 8001d56:	0018      	movs	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	b005      	add	sp, #20
 8001d5c:	bd90      	pop	{r4, r7, pc}
 8001d5e:	46c0      	nop			@ (mov r8, r8)
 8001d60:	20000044 	.word	0x20000044
 8001d64:	2000003c 	.word	0x2000003c
 8001d68:	20000040 	.word	0x20000040

08001d6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d70:	4b04      	ldr	r3, [pc, #16]	@ (8001d84 <HAL_IncTick+0x18>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b04      	ldr	r3, [pc, #16]	@ (8001d88 <HAL_IncTick+0x1c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	18d2      	adds	r2, r2, r3
 8001d7a:	4b02      	ldr	r3, [pc, #8]	@ (8001d84 <HAL_IncTick+0x18>)
 8001d7c:	601a      	str	r2, [r3, #0]
}
 8001d7e:	46c0      	nop			@ (mov r8, r8)
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20001598 	.word	0x20001598
 8001d88:	20000044 	.word	0x20000044

08001d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d90:	4b02      	ldr	r3, [pc, #8]	@ (8001d9c <HAL_GetTick+0x10>)
 8001d92:	681b      	ldr	r3, [r3, #0]
}
 8001d94:	0018      	movs	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	46c0      	nop			@ (mov r8, r8)
 8001d9c:	20001598 	.word	0x20001598

08001da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	0002      	movs	r2, r0
 8001da8:	1dfb      	adds	r3, r7, #7
 8001daa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dac:	1dfb      	adds	r3, r7, #7
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001db2:	d809      	bhi.n	8001dc8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db4:	1dfb      	adds	r3, r7, #7
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	001a      	movs	r2, r3
 8001dba:	231f      	movs	r3, #31
 8001dbc:	401a      	ands	r2, r3
 8001dbe:	4b04      	ldr	r3, [pc, #16]	@ (8001dd0 <__NVIC_EnableIRQ+0x30>)
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	4091      	lsls	r1, r2
 8001dc4:	000a      	movs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001dc8:	46c0      	nop			@ (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b002      	add	sp, #8
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	e000e100 	.word	0xe000e100

08001dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd4:	b590      	push	{r4, r7, lr}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	0002      	movs	r2, r0
 8001ddc:	6039      	str	r1, [r7, #0]
 8001dde:	1dfb      	adds	r3, r7, #7
 8001de0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001de2:	1dfb      	adds	r3, r7, #7
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b7f      	cmp	r3, #127	@ 0x7f
 8001de8:	d828      	bhi.n	8001e3c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dea:	4a2f      	ldr	r2, [pc, #188]	@ (8001ea8 <__NVIC_SetPriority+0xd4>)
 8001dec:	1dfb      	adds	r3, r7, #7
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b25b      	sxtb	r3, r3
 8001df2:	089b      	lsrs	r3, r3, #2
 8001df4:	33c0      	adds	r3, #192	@ 0xc0
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	589b      	ldr	r3, [r3, r2]
 8001dfa:	1dfa      	adds	r2, r7, #7
 8001dfc:	7812      	ldrb	r2, [r2, #0]
 8001dfe:	0011      	movs	r1, r2
 8001e00:	2203      	movs	r2, #3
 8001e02:	400a      	ands	r2, r1
 8001e04:	00d2      	lsls	r2, r2, #3
 8001e06:	21ff      	movs	r1, #255	@ 0xff
 8001e08:	4091      	lsls	r1, r2
 8001e0a:	000a      	movs	r2, r1
 8001e0c:	43d2      	mvns	r2, r2
 8001e0e:	401a      	ands	r2, r3
 8001e10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	019b      	lsls	r3, r3, #6
 8001e16:	22ff      	movs	r2, #255	@ 0xff
 8001e18:	401a      	ands	r2, r3
 8001e1a:	1dfb      	adds	r3, r7, #7
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	0018      	movs	r0, r3
 8001e20:	2303      	movs	r3, #3
 8001e22:	4003      	ands	r3, r0
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e28:	481f      	ldr	r0, [pc, #124]	@ (8001ea8 <__NVIC_SetPriority+0xd4>)
 8001e2a:	1dfb      	adds	r3, r7, #7
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	b25b      	sxtb	r3, r3
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	430a      	orrs	r2, r1
 8001e34:	33c0      	adds	r3, #192	@ 0xc0
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e3a:	e031      	b.n	8001ea0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8001eac <__NVIC_SetPriority+0xd8>)
 8001e3e:	1dfb      	adds	r3, r7, #7
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	0019      	movs	r1, r3
 8001e44:	230f      	movs	r3, #15
 8001e46:	400b      	ands	r3, r1
 8001e48:	3b08      	subs	r3, #8
 8001e4a:	089b      	lsrs	r3, r3, #2
 8001e4c:	3306      	adds	r3, #6
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	18d3      	adds	r3, r2, r3
 8001e52:	3304      	adds	r3, #4
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	1dfa      	adds	r2, r7, #7
 8001e58:	7812      	ldrb	r2, [r2, #0]
 8001e5a:	0011      	movs	r1, r2
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	400a      	ands	r2, r1
 8001e60:	00d2      	lsls	r2, r2, #3
 8001e62:	21ff      	movs	r1, #255	@ 0xff
 8001e64:	4091      	lsls	r1, r2
 8001e66:	000a      	movs	r2, r1
 8001e68:	43d2      	mvns	r2, r2
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	019b      	lsls	r3, r3, #6
 8001e72:	22ff      	movs	r2, #255	@ 0xff
 8001e74:	401a      	ands	r2, r3
 8001e76:	1dfb      	adds	r3, r7, #7
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	4003      	ands	r3, r0
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e84:	4809      	ldr	r0, [pc, #36]	@ (8001eac <__NVIC_SetPriority+0xd8>)
 8001e86:	1dfb      	adds	r3, r7, #7
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	001c      	movs	r4, r3
 8001e8c:	230f      	movs	r3, #15
 8001e8e:	4023      	ands	r3, r4
 8001e90:	3b08      	subs	r3, #8
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	430a      	orrs	r2, r1
 8001e96:	3306      	adds	r3, #6
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	18c3      	adds	r3, r0, r3
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	601a      	str	r2, [r3, #0]
}
 8001ea0:	46c0      	nop			@ (mov r8, r8)
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	b003      	add	sp, #12
 8001ea6:	bd90      	pop	{r4, r7, pc}
 8001ea8:	e000e100 	.word	0xe000e100
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	1e5a      	subs	r2, r3, #1
 8001ebc:	2380      	movs	r3, #128	@ 0x80
 8001ebe:	045b      	lsls	r3, r3, #17
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d301      	bcc.n	8001ec8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e010      	b.n	8001eea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <SysTick_Config+0x44>)
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	3a01      	subs	r2, #1
 8001ece:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	425b      	negs	r3, r3
 8001ed4:	2103      	movs	r1, #3
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f7ff ff7c 	bl	8001dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001edc:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <SysTick_Config+0x44>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee2:	4b04      	ldr	r3, [pc, #16]	@ (8001ef4 <SysTick_Config+0x44>)
 8001ee4:	2207      	movs	r2, #7
 8001ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	0018      	movs	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b002      	add	sp, #8
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	46c0      	nop			@ (mov r8, r8)
 8001ef4:	e000e010 	.word	0xe000e010

08001ef8 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	210f      	movs	r1, #15
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	1c02      	adds	r2, r0, #0
 8001f08:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	b25b      	sxtb	r3, r3
 8001f12:	0011      	movs	r1, r2
 8001f14:	0018      	movs	r0, r3
 8001f16:	f7ff ff5d 	bl	8001dd4 <__NVIC_SetPriority>
}
 8001f1a:	46c0      	nop			@ (mov r8, r8)
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b004      	add	sp, #16
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	0002      	movs	r2, r0
 8001f2a:	1dfb      	adds	r3, r7, #7
 8001f2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f2e:	1dfb      	adds	r3, r7, #7
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	b25b      	sxtb	r3, r3
 8001f34:	0018      	movs	r0, r3
 8001f36:	f7ff ff33 	bl	8001da0 <__NVIC_EnableIRQ>
}
 8001f3a:	46c0      	nop			@ (mov r8, r8)
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	b002      	add	sp, #8
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f7ff ffaf 	bl	8001eb0 <SysTick_Config>
 8001f52:	0003      	movs	r3, r0
}
 8001f54:	0018      	movs	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b002      	add	sp, #8
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f66:	2300      	movs	r3, #0
 8001f68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f6a:	e153      	b.n	8002214 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2101      	movs	r1, #1
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	4091      	lsls	r1, r2
 8001f76:	000a      	movs	r2, r1
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d100      	bne.n	8001f84 <HAL_GPIO_Init+0x28>
 8001f82:	e144      	b.n	800220e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2203      	movs	r2, #3
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d005      	beq.n	8001f9c <HAL_GPIO_Init+0x40>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2203      	movs	r2, #3
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d130      	bne.n	8001ffe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	0013      	movs	r3, r2
 8001fac:	43da      	mvns	r2, r3
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	0013      	movs	r3, r2
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	0013      	movs	r3, r2
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	091b      	lsrs	r3, r3, #4
 8001fe8:	2201      	movs	r2, #1
 8001fea:	401a      	ands	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	0013      	movs	r3, r2
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2203      	movs	r2, #3
 8002004:	4013      	ands	r3, r2
 8002006:	2b03      	cmp	r3, #3
 8002008:	d017      	beq.n	800203a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	2203      	movs	r2, #3
 8002016:	409a      	lsls	r2, r3
 8002018:	0013      	movs	r3, r2
 800201a:	43da      	mvns	r2, r3
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4013      	ands	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	409a      	lsls	r2, r3
 800202c:	0013      	movs	r3, r2
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2203      	movs	r2, #3
 8002040:	4013      	ands	r3, r2
 8002042:	2b02      	cmp	r3, #2
 8002044:	d123      	bne.n	800208e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	08da      	lsrs	r2, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3208      	adds	r2, #8
 800204e:	0092      	lsls	r2, r2, #2
 8002050:	58d3      	ldr	r3, [r2, r3]
 8002052:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2207      	movs	r2, #7
 8002058:	4013      	ands	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	220f      	movs	r2, #15
 800205e:	409a      	lsls	r2, r3
 8002060:	0013      	movs	r3, r2
 8002062:	43da      	mvns	r2, r3
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	691a      	ldr	r2, [r3, #16]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2107      	movs	r1, #7
 8002072:	400b      	ands	r3, r1
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	409a      	lsls	r2, r3
 8002078:	0013      	movs	r3, r2
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	08da      	lsrs	r2, r3, #3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3208      	adds	r2, #8
 8002088:	0092      	lsls	r2, r2, #2
 800208a:	6939      	ldr	r1, [r7, #16]
 800208c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	2203      	movs	r2, #3
 800209a:	409a      	lsls	r2, r3
 800209c:	0013      	movs	r3, r2
 800209e:	43da      	mvns	r2, r3
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	4013      	ands	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2203      	movs	r2, #3
 80020ac:	401a      	ands	r2, r3
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	409a      	lsls	r2, r3
 80020b4:	0013      	movs	r3, r2
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	23c0      	movs	r3, #192	@ 0xc0
 80020c8:	029b      	lsls	r3, r3, #10
 80020ca:	4013      	ands	r3, r2
 80020cc:	d100      	bne.n	80020d0 <HAL_GPIO_Init+0x174>
 80020ce:	e09e      	b.n	800220e <HAL_GPIO_Init+0x2b2>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80020d0:	4a56      	ldr	r2, [pc, #344]	@ (800222c <HAL_GPIO_Init+0x2d0>)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	089b      	lsrs	r3, r3, #2
 80020d6:	3318      	adds	r3, #24
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	589b      	ldr	r3, [r3, r2]
 80020dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2203      	movs	r2, #3
 80020e2:	4013      	ands	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	220f      	movs	r2, #15
 80020e8:	409a      	lsls	r2, r3
 80020ea:	0013      	movs	r3, r2
 80020ec:	43da      	mvns	r2, r3
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	23a0      	movs	r3, #160	@ 0xa0
 80020f8:	05db      	lsls	r3, r3, #23
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d01f      	beq.n	800213e <HAL_GPIO_Init+0x1e2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a4b      	ldr	r2, [pc, #300]	@ (8002230 <HAL_GPIO_Init+0x2d4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d019      	beq.n	800213a <HAL_GPIO_Init+0x1de>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a4a      	ldr	r2, [pc, #296]	@ (8002234 <HAL_GPIO_Init+0x2d8>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d013      	beq.n	8002136 <HAL_GPIO_Init+0x1da>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a49      	ldr	r2, [pc, #292]	@ (8002238 <HAL_GPIO_Init+0x2dc>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d00d      	beq.n	8002132 <HAL_GPIO_Init+0x1d6>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a48      	ldr	r2, [pc, #288]	@ (800223c <HAL_GPIO_Init+0x2e0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d007      	beq.n	800212e <HAL_GPIO_Init+0x1d2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a47      	ldr	r2, [pc, #284]	@ (8002240 <HAL_GPIO_Init+0x2e4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d101      	bne.n	800212a <HAL_GPIO_Init+0x1ce>
 8002126:	2305      	movs	r3, #5
 8002128:	e00a      	b.n	8002140 <HAL_GPIO_Init+0x1e4>
 800212a:	2306      	movs	r3, #6
 800212c:	e008      	b.n	8002140 <HAL_GPIO_Init+0x1e4>
 800212e:	2304      	movs	r3, #4
 8002130:	e006      	b.n	8002140 <HAL_GPIO_Init+0x1e4>
 8002132:	2303      	movs	r3, #3
 8002134:	e004      	b.n	8002140 <HAL_GPIO_Init+0x1e4>
 8002136:	2302      	movs	r3, #2
 8002138:	e002      	b.n	8002140 <HAL_GPIO_Init+0x1e4>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <HAL_GPIO_Init+0x1e4>
 800213e:	2300      	movs	r3, #0
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	2103      	movs	r1, #3
 8002144:	400a      	ands	r2, r1
 8002146:	00d2      	lsls	r2, r2, #3
 8002148:	4093      	lsls	r3, r2
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002150:	4936      	ldr	r1, [pc, #216]	@ (800222c <HAL_GPIO_Init+0x2d0>)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	089b      	lsrs	r3, r3, #2
 8002156:	3318      	adds	r3, #24
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800215e:	4b33      	ldr	r3, [pc, #204]	@ (800222c <HAL_GPIO_Init+0x2d0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	43da      	mvns	r2, r3
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4013      	ands	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	2380      	movs	r3, #128	@ 0x80
 8002174:	035b      	lsls	r3, r3, #13
 8002176:	4013      	ands	r3, r2
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4313      	orrs	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002182:	4b2a      	ldr	r3, [pc, #168]	@ (800222c <HAL_GPIO_Init+0x2d0>)
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002188:	4b28      	ldr	r3, [pc, #160]	@ (800222c <HAL_GPIO_Init+0x2d0>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	43da      	mvns	r2, r3
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	2380      	movs	r3, #128	@ 0x80
 800219e:	039b      	lsls	r3, r3, #14
 80021a0:	4013      	ands	r3, r2
 80021a2:	d003      	beq.n	80021ac <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021ac:	4b1f      	ldr	r3, [pc, #124]	@ (800222c <HAL_GPIO_Init+0x2d0>)
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021b2:	4a1e      	ldr	r2, [pc, #120]	@ (800222c <HAL_GPIO_Init+0x2d0>)
 80021b4:	2384      	movs	r3, #132	@ 0x84
 80021b6:	58d3      	ldr	r3, [r2, r3]
 80021b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	43da      	mvns	r2, r3
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	2380      	movs	r3, #128	@ 0x80
 80021ca:	029b      	lsls	r3, r3, #10
 80021cc:	4013      	ands	r3, r2
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x27c>
        {
          temp |= iocurrent;
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021d8:	4914      	ldr	r1, [pc, #80]	@ (800222c <HAL_GPIO_Init+0x2d0>)
 80021da:	2284      	movs	r2, #132	@ 0x84
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80021e0:	4a12      	ldr	r2, [pc, #72]	@ (800222c <HAL_GPIO_Init+0x2d0>)
 80021e2:	2380      	movs	r3, #128	@ 0x80
 80021e4:	58d3      	ldr	r3, [r2, r3]
 80021e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	43da      	mvns	r2, r3
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4013      	ands	r3, r2
 80021f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	2380      	movs	r3, #128	@ 0x80
 80021f8:	025b      	lsls	r3, r3, #9
 80021fa:	4013      	ands	r3, r2
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4313      	orrs	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002206:	4909      	ldr	r1, [pc, #36]	@ (800222c <HAL_GPIO_Init+0x2d0>)
 8002208:	2280      	movs	r2, #128	@ 0x80
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	3301      	adds	r3, #1
 8002212:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	40da      	lsrs	r2, r3
 800221c:	1e13      	subs	r3, r2, #0
 800221e:	d000      	beq.n	8002222 <HAL_GPIO_Init+0x2c6>
 8002220:	e6a4      	b.n	8001f6c <HAL_GPIO_Init+0x10>
  }
}
 8002222:	46c0      	nop			@ (mov r8, r8)
 8002224:	46c0      	nop			@ (mov r8, r8)
 8002226:	46bd      	mov	sp, r7
 8002228:	b006      	add	sp, #24
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021800 	.word	0x40021800
 8002230:	50000400 	.word	0x50000400
 8002234:	50000800 	.word	0x50000800
 8002238:	50000c00 	.word	0x50000c00
 800223c:	50001000 	.word	0x50001000
 8002240:	50001400 	.word	0x50001400

08002244 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	000a      	movs	r2, r1
 800224e:	1cbb      	adds	r3, r7, #2
 8002250:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	1cba      	adds	r2, r7, #2
 8002258:	8812      	ldrh	r2, [r2, #0]
 800225a:	4013      	ands	r3, r2
 800225c:	d004      	beq.n	8002268 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800225e:	230f      	movs	r3, #15
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	2201      	movs	r2, #1
 8002264:	701a      	strb	r2, [r3, #0]
 8002266:	e003      	b.n	8002270 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002268:	230f      	movs	r3, #15
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002270:	230f      	movs	r3, #15
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	781b      	ldrb	r3, [r3, #0]
}
 8002276:	0018      	movs	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	b004      	add	sp, #16
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	0008      	movs	r0, r1
 8002288:	0011      	movs	r1, r2
 800228a:	1cbb      	adds	r3, r7, #2
 800228c:	1c02      	adds	r2, r0, #0
 800228e:	801a      	strh	r2, [r3, #0]
 8002290:	1c7b      	adds	r3, r7, #1
 8002292:	1c0a      	adds	r2, r1, #0
 8002294:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002296:	1c7b      	adds	r3, r7, #1
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d004      	beq.n	80022a8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800229e:	1cbb      	adds	r3, r7, #2
 80022a0:	881a      	ldrh	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022a6:	e003      	b.n	80022b0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022a8:	1cbb      	adds	r3, r7, #2
 80022aa:	881a      	ldrh	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022b0:	46c0      	nop			@ (mov r8, r8)
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b002      	add	sp, #8
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	000a      	movs	r2, r1
 80022c2:	1cbb      	adds	r3, r7, #2
 80022c4:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80022c6:	230a      	movs	r3, #10
 80022c8:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80022ca:	e002      	b.n	80022d2 <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1f9      	bne.n	80022cc <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 80022d8:	1cbb      	adds	r3, r7, #2
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	4a06      	ldr	r2, [pc, #24]	@ (80022f8 <PCD_GET_EP_RX_CNT+0x40>)
 80022e0:	4694      	mov	ip, r2
 80022e2:	4463      	add	r3, ip
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	0c1b      	lsrs	r3, r3, #16
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	059b      	lsls	r3, r3, #22
 80022ec:	0d9b      	lsrs	r3, r3, #22
 80022ee:	b29b      	uxth	r3, r3
}
 80022f0:	0018      	movs	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b004      	add	sp, #16
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40009800 	.word	0x40009800

080022fc <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	000a      	movs	r2, r1
 8002306:	1cbb      	adds	r3, r7, #2
 8002308:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800230a:	230a      	movs	r3, #10
 800230c:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800230e:	e002      	b.n	8002316 <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	3b01      	subs	r3, #1
 8002314:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f9      	bne.n	8002310 <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 800231c:	1cbb      	adds	r3, r7, #2
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4a06      	ldr	r2, [pc, #24]	@ (800233c <PCD_GET_EP_DBUF0_CNT+0x40>)
 8002324:	4694      	mov	ip, r2
 8002326:	4463      	add	r3, ip
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	0c1b      	lsrs	r3, r3, #16
 800232c:	b29b      	uxth	r3, r3
 800232e:	059b      	lsls	r3, r3, #22
 8002330:	0d9b      	lsrs	r3, r3, #22
 8002332:	b29b      	uxth	r3, r3
}
 8002334:	0018      	movs	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	b004      	add	sp, #16
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40009800 	.word	0x40009800

08002340 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	000a      	movs	r2, r1
 800234a:	1cbb      	adds	r3, r7, #2
 800234c:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800234e:	230a      	movs	r3, #10
 8002350:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002352:	e002      	b.n	800235a <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	3b01      	subs	r3, #1
 8002358:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f9      	bne.n	8002354 <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8002360:	1cbb      	adds	r3, r7, #2
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4a06      	ldr	r2, [pc, #24]	@ (8002380 <PCD_GET_EP_DBUF1_CNT+0x40>)
 8002368:	4694      	mov	ip, r2
 800236a:	4463      	add	r3, ip
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	0c1b      	lsrs	r3, r3, #16
 8002370:	b29b      	uxth	r3, r3
 8002372:	059b      	lsls	r3, r3, #22
 8002374:	0d9b      	lsrs	r3, r3, #22
 8002376:	b29b      	uxth	r3, r3
}
 8002378:	0018      	movs	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	b004      	add	sp, #16
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40009800 	.word	0x40009800

08002384 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002384:	b590      	push	{r4, r7, lr}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e0e4      	b.n	8002560 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a73      	ldr	r2, [pc, #460]	@ (8002568 <HAL_PCD_Init+0x1e4>)
 800239a:	5c9b      	ldrb	r3, [r3, r2]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d108      	bne.n	80023b4 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	23a4      	movs	r3, #164	@ 0xa4
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	2100      	movs	r1, #0
 80023aa:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	0018      	movs	r0, r3
 80023b0:	f7fe fbcc 	bl	8000b4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a6c      	ldr	r2, [pc, #432]	@ (8002568 <HAL_PCD_Init+0x1e4>)
 80023b8:	2103      	movs	r1, #3
 80023ba:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	0018      	movs	r0, r3
 80023c2:	f004 fac5 	bl	8006950 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c6:	230f      	movs	r3, #15
 80023c8:	18fb      	adds	r3, r7, r3
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
 80023ce:	e047      	b.n	8002460 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023d0:	200f      	movs	r0, #15
 80023d2:	183b      	adds	r3, r7, r0
 80023d4:	781a      	ldrb	r2, [r3, #0]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	0013      	movs	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	189b      	adds	r3, r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	18cb      	adds	r3, r1, r3
 80023e2:	3311      	adds	r3, #17
 80023e4:	2201      	movs	r2, #1
 80023e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023e8:	183b      	adds	r3, r7, r0
 80023ea:	781a      	ldrb	r2, [r3, #0]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	0013      	movs	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	189b      	adds	r3, r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	18cb      	adds	r3, r1, r3
 80023f8:	3310      	adds	r3, #16
 80023fa:	183a      	adds	r2, r7, r0
 80023fc:	7812      	ldrb	r2, [r2, #0]
 80023fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002400:	183b      	adds	r3, r7, r0
 8002402:	781a      	ldrb	r2, [r3, #0]
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	0013      	movs	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	189b      	adds	r3, r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	18cb      	adds	r3, r1, r3
 8002410:	3313      	adds	r3, #19
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002416:	183b      	adds	r3, r7, r0
 8002418:	781a      	ldrb	r2, [r3, #0]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	0013      	movs	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	189b      	adds	r3, r3, r2
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	18cb      	adds	r3, r1, r3
 8002426:	3320      	adds	r3, #32
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800242c:	183b      	adds	r3, r7, r0
 800242e:	781a      	ldrb	r2, [r3, #0]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	0013      	movs	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	189b      	adds	r3, r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	18cb      	adds	r3, r1, r3
 800243c:	3324      	adds	r3, #36	@ 0x24
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002442:	183b      	adds	r3, r7, r0
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	0013      	movs	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	189b      	adds	r3, r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	2200      	movs	r2, #0
 8002454:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002456:	183b      	adds	r3, r7, r0
 8002458:	781a      	ldrb	r2, [r3, #0]
 800245a:	183b      	adds	r3, r7, r0
 800245c:	3201      	adds	r2, #1
 800245e:	701a      	strb	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	791b      	ldrb	r3, [r3, #4]
 8002464:	210f      	movs	r1, #15
 8002466:	187a      	adds	r2, r7, r1
 8002468:	7812      	ldrb	r2, [r2, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d3b0      	bcc.n	80023d0 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800246e:	187b      	adds	r3, r7, r1
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
 8002474:	e056      	b.n	8002524 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002476:	240f      	movs	r4, #15
 8002478:	193b      	adds	r3, r7, r4
 800247a:	781a      	ldrb	r2, [r3, #0]
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	2352      	movs	r3, #82	@ 0x52
 8002480:	33ff      	adds	r3, #255	@ 0xff
 8002482:	0019      	movs	r1, r3
 8002484:	0013      	movs	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	189b      	adds	r3, r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	18c3      	adds	r3, r0, r3
 800248e:	185b      	adds	r3, r3, r1
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002494:	193b      	adds	r3, r7, r4
 8002496:	781a      	ldrb	r2, [r3, #0]
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	23a8      	movs	r3, #168	@ 0xa8
 800249c:	0059      	lsls	r1, r3, #1
 800249e:	0013      	movs	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	189b      	adds	r3, r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	18c3      	adds	r3, r0, r3
 80024a8:	185b      	adds	r3, r3, r1
 80024aa:	193a      	adds	r2, r7, r4
 80024ac:	7812      	ldrb	r2, [r2, #0]
 80024ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024b0:	193b      	adds	r3, r7, r4
 80024b2:	781a      	ldrb	r2, [r3, #0]
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	2354      	movs	r3, #84	@ 0x54
 80024b8:	33ff      	adds	r3, #255	@ 0xff
 80024ba:	0019      	movs	r1, r3
 80024bc:	0013      	movs	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	189b      	adds	r3, r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	18c3      	adds	r3, r0, r3
 80024c6:	185b      	adds	r3, r3, r1
 80024c8:	2200      	movs	r2, #0
 80024ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024cc:	193b      	adds	r3, r7, r4
 80024ce:	781a      	ldrb	r2, [r3, #0]
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	23b0      	movs	r3, #176	@ 0xb0
 80024d4:	0059      	lsls	r1, r3, #1
 80024d6:	0013      	movs	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	189b      	adds	r3, r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	18c3      	adds	r3, r0, r3
 80024e0:	185b      	adds	r3, r3, r1
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024e6:	193b      	adds	r3, r7, r4
 80024e8:	781a      	ldrb	r2, [r3, #0]
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	23b2      	movs	r3, #178	@ 0xb2
 80024ee:	0059      	lsls	r1, r3, #1
 80024f0:	0013      	movs	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	189b      	adds	r3, r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	18c3      	adds	r3, r0, r3
 80024fa:	185b      	adds	r3, r3, r1
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002500:	193b      	adds	r3, r7, r4
 8002502:	781a      	ldrb	r2, [r3, #0]
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	23b4      	movs	r3, #180	@ 0xb4
 8002508:	0059      	lsls	r1, r3, #1
 800250a:	0013      	movs	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	189b      	adds	r3, r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	18c3      	adds	r3, r0, r3
 8002514:	185b      	adds	r3, r3, r1
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800251a:	193b      	adds	r3, r7, r4
 800251c:	781a      	ldrb	r2, [r3, #0]
 800251e:	193b      	adds	r3, r7, r4
 8002520:	3201      	adds	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	791b      	ldrb	r3, [r3, #4]
 8002528:	220f      	movs	r2, #15
 800252a:	18ba      	adds	r2, r7, r2
 800252c:	7812      	ldrb	r2, [r2, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d3a1      	bcc.n	8002476 <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6859      	ldr	r1, [r3, #4]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	f004 fa34 	bl	80069a8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a07      	ldr	r2, [pc, #28]	@ (8002568 <HAL_PCD_Init+0x1e4>)
 800254a:	2101      	movs	r1, #1
 800254c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	7a9b      	ldrb	r3, [r3, #10]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d103      	bne.n	800255e <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	0018      	movs	r0, r3
 800255a:	f001 fc6d 	bl	8003e38 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	0018      	movs	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	b005      	add	sp, #20
 8002566:	bd90      	pop	{r4, r7, pc}
 8002568:	00000291 	.word	0x00000291

0800256c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	23a4      	movs	r3, #164	@ 0xa4
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	5cd3      	ldrb	r3, [r2, r3]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_PCD_Start+0x18>
 8002580:	2302      	movs	r3, #2
 8002582:	e014      	b.n	80025ae <HAL_PCD_Start+0x42>
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	23a4      	movs	r3, #164	@ 0xa4
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	2101      	movs	r1, #1
 800258c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	0018      	movs	r0, r3
 8002594:	f004 f9c8 	bl	8006928 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	0018      	movs	r0, r3
 800259e:	f005 fee4 	bl	800836a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	23a4      	movs	r3, #164	@ 0xa4
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	2100      	movs	r1, #0
 80025aa:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	0018      	movs	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	b002      	add	sp, #8
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	23a4      	movs	r3, #164	@ 0xa4
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	5cd3      	ldrb	r3, [r2, r3]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_PCD_Stop+0x18>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e014      	b.n	80025f8 <HAL_PCD_Stop+0x42>
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	23a4      	movs	r3, #164	@ 0xa4
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	2101      	movs	r1, #1
 80025d6:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_DISABLE(hpcd);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	0018      	movs	r0, r3
 80025de:	f004 f9b7 	bl	8006950 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	0018      	movs	r0, r3
 80025e8:	f005 fed0 	bl	800838c <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	23a4      	movs	r3, #164	@ 0xa4
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	2100      	movs	r1, #0
 80025f4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	0018      	movs	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b002      	add	sp, #8
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	0018      	movs	r0, r3
 800260e:	f005 fecf 	bl	80083b0 <USB_ReadInterrupts>
 8002612:	0003      	movs	r3, r0
 8002614:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	2380      	movs	r3, #128	@ 0x80
 800261a:	021b      	lsls	r3, r3, #8
 800261c:	4013      	ands	r3, r2
 800261e:	d004      	beq.n	800262a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	0018      	movs	r0, r3
 8002624:	f000 fb94 	bl	8002d50 <PCD_EP_ISR_Handler>

    return;
 8002628:	e0e3      	b.n	80027f2 <HAL_PCD_IRQHandler+0x1f2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	2380      	movs	r3, #128	@ 0x80
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4013      	ands	r3, r2
 8002632:	d011      	beq.n	8002658 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	496e      	ldr	r1, [pc, #440]	@ (80027f8 <HAL_PCD_IRQHandler+0x1f8>)
 8002640:	400a      	ands	r2, r1
 8002642:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	0018      	movs	r0, r3
 8002648:	f007 fb64 	bl	8009d14 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2100      	movs	r1, #0
 8002650:	0018      	movs	r0, r3
 8002652:	f000 f8e1 	bl	8002818 <HAL_PCD_SetAddress>

    return;
 8002656:	e0cc      	b.n	80027f2 <HAL_PCD_IRQHandler+0x1f2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	2380      	movs	r3, #128	@ 0x80
 800265c:	01db      	lsls	r3, r3, #7
 800265e:	4013      	ands	r3, r2
 8002660:	d008      	beq.n	8002674 <HAL_PCD_IRQHandler+0x74>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4963      	ldr	r1, [pc, #396]	@ (80027fc <HAL_PCD_IRQHandler+0x1fc>)
 800266e:	400a      	ands	r2, r1
 8002670:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8002672:	e0be      	b.n	80027f2 <HAL_PCD_IRQHandler+0x1f2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002674:	68fa      	ldr	r2, [r7, #12]
 8002676:	2380      	movs	r3, #128	@ 0x80
 8002678:	019b      	lsls	r3, r3, #6
 800267a:	4013      	ands	r3, r2
 800267c:	d008      	beq.n	8002690 <HAL_PCD_IRQHandler+0x90>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	495d      	ldr	r1, [pc, #372]	@ (8002800 <HAL_PCD_IRQHandler+0x200>)
 800268a:	400a      	ands	r2, r1
 800268c:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 800268e:	e0b0      	b.n	80027f2 <HAL_PCD_IRQHandler+0x1f2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	2380      	movs	r3, #128	@ 0x80
 8002694:	015b      	lsls	r3, r3, #5
 8002696:	4013      	ands	r3, r2
 8002698:	d02c      	beq.n	80026f4 <HAL_PCD_IRQHandler+0xf4>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2104      	movs	r1, #4
 80026a6:	438a      	bics	r2, r1
 80026a8:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2108      	movs	r1, #8
 80026b6:	438a      	bics	r2, r1
 80026b8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	23b2      	movs	r3, #178	@ 0xb2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	5cd3      	ldrb	r3, [r2, r3]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d109      	bne.n	80026da <HAL_PCD_IRQHandler+0xda>
    {
      hpcd->LPM_State = LPM_L0;
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	23b2      	movs	r3, #178	@ 0xb2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	2100      	movs	r1, #0
 80026ce:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2100      	movs	r1, #0
 80026d4:	0018      	movs	r0, r3
 80026d6:	f001 fbd1 	bl	8003e7c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	0018      	movs	r0, r3
 80026de:	f007 fb5b 	bl	8009d98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4945      	ldr	r1, [pc, #276]	@ (8002804 <HAL_PCD_IRQHandler+0x204>)
 80026ee:	400a      	ands	r2, r1
 80026f0:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 80026f2:	e07e      	b.n	80027f2 <HAL_PCD_IRQHandler+0x1f2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	2380      	movs	r3, #128	@ 0x80
 80026f8:	011b      	lsls	r3, r3, #4
 80026fa:	4013      	ands	r3, r2
 80026fc:	d01c      	beq.n	8002738 <HAL_PCD_IRQHandler+0x138>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2108      	movs	r1, #8
 800270a:	430a      	orrs	r2, r1
 800270c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	493b      	ldr	r1, [pc, #236]	@ (8002808 <HAL_PCD_IRQHandler+0x208>)
 800271a:	400a      	ands	r2, r1
 800271c:	645a      	str	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2104      	movs	r1, #4
 800272a:	430a      	orrs	r2, r1
 800272c:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	0018      	movs	r0, r3
 8002732:	f007 fb19 	bl	8009d68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002736:	e05c      	b.n	80027f2 <HAL_PCD_IRQHandler+0x1f2>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2280      	movs	r2, #128	@ 0x80
 800273c:	4013      	ands	r3, r2
 800273e:	d038      	beq.n	80027b2 <HAL_PCD_IRQHandler+0x1b2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4930      	ldr	r1, [pc, #192]	@ (800280c <HAL_PCD_IRQHandler+0x20c>)
 800274c:	400a      	ands	r2, r1
 800274e:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	23b2      	movs	r3, #178	@ 0xb2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	5cd3      	ldrb	r3, [r2, r3]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d125      	bne.n	80027a8 <HAL_PCD_IRQHandler+0x1a8>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2104      	movs	r1, #4
 8002768:	430a      	orrs	r2, r1
 800276a:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2108      	movs	r1, #8
 8002778:	430a      	orrs	r2, r1
 800277a:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	23b2      	movs	r3, #178	@ 0xb2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	2101      	movs	r1, #1
 8002784:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800278c:	089b      	lsrs	r3, r3, #2
 800278e:	223c      	movs	r2, #60	@ 0x3c
 8002790:	4013      	ands	r3, r2
 8002792:	0019      	movs	r1, r3
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	23b3      	movs	r3, #179	@ 0xb3
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2101      	movs	r1, #1
 80027a0:	0018      	movs	r0, r3
 80027a2:	f001 fb6b 	bl	8003e7c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80027a6:	e024      	b.n	80027f2 <HAL_PCD_IRQHandler+0x1f2>
      HAL_PCD_SuspendCallback(hpcd);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	0018      	movs	r0, r3
 80027ac:	f007 fadc 	bl	8009d68 <HAL_PCD_SuspendCallback>
    return;
 80027b0:	e01f      	b.n	80027f2 <HAL_PCD_IRQHandler+0x1f2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	2380      	movs	r3, #128	@ 0x80
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4013      	ands	r3, r2
 80027ba:	d00c      	beq.n	80027d6 <HAL_PCD_IRQHandler+0x1d6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4912      	ldr	r1, [pc, #72]	@ (8002810 <HAL_PCD_IRQHandler+0x210>)
 80027c8:	400a      	ands	r2, r1
 80027ca:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	0018      	movs	r0, r3
 80027d0:	f007 fafa 	bl	8009dc8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80027d4:	e00d      	b.n	80027f2 <HAL_PCD_IRQHandler+0x1f2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	2380      	movs	r3, #128	@ 0x80
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	4013      	ands	r3, r2
 80027de:	d008      	beq.n	80027f2 <HAL_PCD_IRQHandler+0x1f2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	490a      	ldr	r1, [pc, #40]	@ (8002814 <HAL_PCD_IRQHandler+0x214>)
 80027ec:	400a      	ands	r2, r1
 80027ee:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 80027f0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b004      	add	sp, #16
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	0000fbff 	.word	0x0000fbff
 80027fc:	0000bfff 	.word	0x0000bfff
 8002800:	0000dfff 	.word	0x0000dfff
 8002804:	0000efff 	.word	0x0000efff
 8002808:	0000f7ff 	.word	0x0000f7ff
 800280c:	0000ff7f 	.word	0x0000ff7f
 8002810:	0000fdff 	.word	0x0000fdff
 8002814:	0000feff 	.word	0x0000feff

08002818 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	000a      	movs	r2, r1
 8002822:	1cfb      	adds	r3, r7, #3
 8002824:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	23a4      	movs	r3, #164	@ 0xa4
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	5cd3      	ldrb	r3, [r2, r3]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_PCD_SetAddress+0x1e>
 8002832:	2302      	movs	r3, #2
 8002834:	e016      	b.n	8002864 <HAL_PCD_SetAddress+0x4c>
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	23a4      	movs	r3, #164	@ 0xa4
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	2101      	movs	r1, #1
 800283e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	1cfa      	adds	r2, r7, #3
 8002844:	7812      	ldrb	r2, [r2, #0]
 8002846:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	1cfb      	adds	r3, r7, #3
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	0019      	movs	r1, r3
 8002852:	0010      	movs	r0, r2
 8002854:	f005 fd76 	bl	8008344 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	23a4      	movs	r3, #164	@ 0xa4
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	2100      	movs	r1, #0
 8002860:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	0018      	movs	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	b002      	add	sp, #8
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800286c:	b590      	push	{r4, r7, lr}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	000c      	movs	r4, r1
 8002876:	0010      	movs	r0, r2
 8002878:	0019      	movs	r1, r3
 800287a:	1cfb      	adds	r3, r7, #3
 800287c:	1c22      	adds	r2, r4, #0
 800287e:	701a      	strb	r2, [r3, #0]
 8002880:	003b      	movs	r3, r7
 8002882:	1c02      	adds	r2, r0, #0
 8002884:	801a      	strh	r2, [r3, #0]
 8002886:	1cbb      	adds	r3, r7, #2
 8002888:	1c0a      	adds	r2, r1, #0
 800288a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800288c:	230b      	movs	r3, #11
 800288e:	18fb      	adds	r3, r7, r3
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002894:	1cfb      	adds	r3, r7, #3
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	b25b      	sxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	da0f      	bge.n	80028be <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800289e:	1cfb      	adds	r3, r7, #3
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2207      	movs	r2, #7
 80028a4:	401a      	ands	r2, r3
 80028a6:	0013      	movs	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	189b      	adds	r3, r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	3310      	adds	r3, #16
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	18d3      	adds	r3, r2, r3
 80028b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2201      	movs	r2, #1
 80028ba:	705a      	strb	r2, [r3, #1]
 80028bc:	e00f      	b.n	80028de <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028be:	1cfb      	adds	r3, r7, #3
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2207      	movs	r2, #7
 80028c4:	401a      	ands	r2, r3
 80028c6:	0013      	movs	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	189b      	adds	r3, r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	3351      	adds	r3, #81	@ 0x51
 80028d0:	33ff      	adds	r3, #255	@ 0xff
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	18d3      	adds	r3, r2, r3
 80028d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80028de:	1cfb      	adds	r3, r7, #3
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2207      	movs	r2, #7
 80028e4:	4013      	ands	r3, r2
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80028ec:	003b      	movs	r3, r7
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	055b      	lsls	r3, r3, #21
 80028f2:	0d5a      	lsrs	r2, r3, #21
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1cba      	adds	r2, r7, #2
 80028fc:	7812      	ldrb	r2, [r2, #0]
 80028fe:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002900:	1cbb      	adds	r3, r7, #2
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d102      	bne.n	800290e <HAL_PCD_EP_Open+0xa2>
  {
    ep->data_pid_start = 0U;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	23a4      	movs	r3, #164	@ 0xa4
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	5cd3      	ldrb	r3, [r2, r3]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_PCD_EP_Open+0xb2>
 800291a:	2302      	movs	r3, #2
 800291c:	e013      	b.n	8002946 <HAL_PCD_EP_Open+0xda>
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	23a4      	movs	r3, #164	@ 0xa4
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	2101      	movs	r1, #1
 8002926:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	0011      	movs	r1, r2
 8002930:	0018      	movs	r0, r3
 8002932:	f004 f86f 	bl	8006a14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	23a4      	movs	r3, #164	@ 0xa4
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	2100      	movs	r1, #0
 800293e:	54d1      	strb	r1, [r2, r3]

  return ret;
 8002940:	230b      	movs	r3, #11
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	781b      	ldrb	r3, [r3, #0]
}
 8002946:	0018      	movs	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	b005      	add	sp, #20
 800294c:	bd90      	pop	{r4, r7, pc}

0800294e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	000a      	movs	r2, r1
 8002958:	1cfb      	adds	r3, r7, #3
 800295a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800295c:	1cfb      	adds	r3, r7, #3
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	b25b      	sxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	da0f      	bge.n	8002986 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002966:	1cfb      	adds	r3, r7, #3
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2207      	movs	r2, #7
 800296c:	401a      	ands	r2, r3
 800296e:	0013      	movs	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	189b      	adds	r3, r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	3310      	adds	r3, #16
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	18d3      	adds	r3, r2, r3
 800297c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2201      	movs	r2, #1
 8002982:	705a      	strb	r2, [r3, #1]
 8002984:	e00f      	b.n	80029a6 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002986:	1cfb      	adds	r3, r7, #3
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2207      	movs	r2, #7
 800298c:	401a      	ands	r2, r3
 800298e:	0013      	movs	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	189b      	adds	r3, r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	3351      	adds	r3, #81	@ 0x51
 8002998:	33ff      	adds	r3, #255	@ 0xff
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	18d3      	adds	r3, r2, r3
 800299e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80029a6:	1cfb      	adds	r3, r7, #3
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2207      	movs	r2, #7
 80029ac:	4013      	ands	r3, r2
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	23a4      	movs	r3, #164	@ 0xa4
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	5cd3      	ldrb	r3, [r2, r3]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_PCD_EP_Close+0x76>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e011      	b.n	80029e8 <HAL_PCD_EP_Close+0x9a>
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	23a4      	movs	r3, #164	@ 0xa4
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	2101      	movs	r1, #1
 80029cc:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	0011      	movs	r1, r2
 80029d6:	0018      	movs	r0, r3
 80029d8:	f004 fc82 	bl	80072e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	23a4      	movs	r3, #164	@ 0xa4
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	2100      	movs	r1, #0
 80029e4:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	0018      	movs	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b004      	add	sp, #16
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	200b      	movs	r0, #11
 80029fe:	183b      	adds	r3, r7, r0
 8002a00:	1c0a      	adds	r2, r1, #0
 8002a02:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a04:	0001      	movs	r1, r0
 8002a06:	187b      	adds	r3, r7, r1
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2207      	movs	r2, #7
 8002a0c:	401a      	ands	r2, r3
 8002a0e:	0013      	movs	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	189b      	adds	r3, r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	3351      	adds	r3, #81	@ 0x51
 8002a18:	33ff      	adds	r3, #255	@ 0xff
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	18d3      	adds	r3, r2, r3
 8002a1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2200      	movs	r2, #0
 8002a36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a38:	187b      	adds	r3, r7, r1
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2207      	movs	r2, #7
 8002a3e:	4013      	ands	r3, r2
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	0011      	movs	r1, r2
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f004 fdac 	bl	80075ac <USB_EPStartXfer>

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	0018      	movs	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b006      	add	sp, #24
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	000a      	movs	r2, r1
 8002a68:	1cfb      	adds	r3, r7, #3
 8002a6a:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a6c:	1cfb      	adds	r3, r7, #3
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2207      	movs	r2, #7
 8002a72:	401a      	ands	r2, r3
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	23b6      	movs	r3, #182	@ 0xb6
 8002a78:	0059      	lsls	r1, r3, #1
 8002a7a:	0013      	movs	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	189b      	adds	r3, r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	18c3      	adds	r3, r0, r3
 8002a84:	185b      	adds	r3, r3, r1
 8002a86:	681b      	ldr	r3, [r3, #0]
}
 8002a88:	0018      	movs	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b002      	add	sp, #8
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	607a      	str	r2, [r7, #4]
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	200b      	movs	r0, #11
 8002a9e:	183b      	adds	r3, r7, r0
 8002aa0:	1c0a      	adds	r2, r1, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aa4:	183b      	adds	r3, r7, r0
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2207      	movs	r2, #7
 8002aaa:	401a      	ands	r2, r3
 8002aac:	0013      	movs	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	189b      	adds	r3, r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	3310      	adds	r3, #16
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	18d3      	adds	r3, r2, r3
 8002aba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2224      	movs	r2, #36	@ 0x24
 8002acc:	2101      	movs	r1, #1
 8002ace:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ae2:	183b      	adds	r3, r7, r0
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2207      	movs	r2, #7
 8002ae8:	4013      	ands	r3, r2
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	0011      	movs	r1, r2
 8002af8:	0018      	movs	r0, r3
 8002afa:	f004 fd57 	bl	80075ac <USB_EPStartXfer>

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	0018      	movs	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b006      	add	sp, #24
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	000a      	movs	r2, r1
 8002b12:	1cfb      	adds	r3, r7, #3
 8002b14:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b16:	1cfb      	adds	r3, r7, #3
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2207      	movs	r2, #7
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	7912      	ldrb	r2, [r2, #4]
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d901      	bls.n	8002b2a <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e046      	b.n	8002bb8 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b2a:	1cfb      	adds	r3, r7, #3
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	b25b      	sxtb	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	da0f      	bge.n	8002b54 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b34:	1cfb      	adds	r3, r7, #3
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2207      	movs	r2, #7
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	0013      	movs	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	189b      	adds	r3, r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	3310      	adds	r3, #16
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	18d3      	adds	r3, r2, r3
 8002b4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	705a      	strb	r2, [r3, #1]
 8002b52:	e00d      	b.n	8002b70 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b54:	1cfb      	adds	r3, r7, #3
 8002b56:	781a      	ldrb	r2, [r3, #0]
 8002b58:	0013      	movs	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	189b      	adds	r3, r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	3351      	adds	r3, #81	@ 0x51
 8002b62:	33ff      	adds	r3, #255	@ 0xff
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	18d3      	adds	r3, r2, r3
 8002b68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2201      	movs	r2, #1
 8002b74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b76:	1cfb      	adds	r3, r7, #3
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2207      	movs	r2, #7
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	23a4      	movs	r3, #164	@ 0xa4
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	5cd3      	ldrb	r3, [r2, r3]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_PCD_EP_SetStall+0x8c>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e011      	b.n	8002bb8 <HAL_PCD_EP_SetStall+0xb0>
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	23a4      	movs	r3, #164	@ 0xa4
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	0011      	movs	r1, r2
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f005 fa86 	bl	80080b8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	23a4      	movs	r3, #164	@ 0xa4
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	0018      	movs	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b004      	add	sp, #16
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	000a      	movs	r2, r1
 8002bca:	1cfb      	adds	r3, r7, #3
 8002bcc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002bce:	1cfb      	adds	r3, r7, #3
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	220f      	movs	r2, #15
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	7912      	ldrb	r2, [r2, #4]
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d901      	bls.n	8002be2 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e048      	b.n	8002c74 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002be2:	1cfb      	adds	r3, r7, #3
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	b25b      	sxtb	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	da0f      	bge.n	8002c0c <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bec:	1cfb      	adds	r3, r7, #3
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2207      	movs	r2, #7
 8002bf2:	401a      	ands	r2, r3
 8002bf4:	0013      	movs	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	189b      	adds	r3, r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	3310      	adds	r3, #16
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	18d3      	adds	r3, r2, r3
 8002c02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2201      	movs	r2, #1
 8002c08:	705a      	strb	r2, [r3, #1]
 8002c0a:	e00f      	b.n	8002c2c <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c0c:	1cfb      	adds	r3, r7, #3
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2207      	movs	r2, #7
 8002c12:	401a      	ands	r2, r3
 8002c14:	0013      	movs	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	189b      	adds	r3, r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	3351      	adds	r3, #81	@ 0x51
 8002c1e:	33ff      	adds	r3, #255	@ 0xff
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	18d3      	adds	r3, r2, r3
 8002c24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c32:	1cfb      	adds	r3, r7, #3
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2207      	movs	r2, #7
 8002c38:	4013      	ands	r3, r2
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	23a4      	movs	r3, #164	@ 0xa4
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	5cd3      	ldrb	r3, [r2, r3]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_PCD_EP_ClrStall+0x90>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e011      	b.n	8002c74 <HAL_PCD_EP_ClrStall+0xb4>
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	23a4      	movs	r3, #164	@ 0xa4
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	2101      	movs	r1, #1
 8002c58:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	0011      	movs	r1, r2
 8002c62:	0018      	movs	r0, r3
 8002c64:	f005 fa6a 	bl	800813c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	23a4      	movs	r3, #164	@ 0xa4
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	2100      	movs	r1, #0
 8002c70:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b004      	add	sp, #16
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c7c:	b5b0      	push	{r4, r5, r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	000a      	movs	r2, r1
 8002c86:	1cfb      	adds	r3, r7, #3
 8002c88:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002c8a:	1cfb      	adds	r3, r7, #3
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	b25b      	sxtb	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	da0c      	bge.n	8002cae <HAL_PCD_EP_Abort+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c94:	1cfb      	adds	r3, r7, #3
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2207      	movs	r2, #7
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	0013      	movs	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	189b      	adds	r3, r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	3310      	adds	r3, #16
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	18d3      	adds	r3, r2, r3
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	e00c      	b.n	8002cc8 <HAL_PCD_EP_Abort+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cae:	1cfb      	adds	r3, r7, #3
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2207      	movs	r2, #7
 8002cb4:	401a      	ands	r2, r3
 8002cb6:	0013      	movs	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	189b      	adds	r3, r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	3351      	adds	r3, #81	@ 0x51
 8002cc0:	33ff      	adds	r3, #255	@ 0xff
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	18d3      	adds	r3, r2, r3
 8002cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	250b      	movs	r5, #11
 8002cce:	197c      	adds	r4, r7, r5
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	0011      	movs	r1, r2
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f005 fabd 	bl	8008254 <USB_EPStopXfer>
 8002cda:	0003      	movs	r3, r0
 8002cdc:	7023      	strb	r3, [r4, #0]

  return ret;
 8002cde:	197b      	adds	r3, r7, r5
 8002ce0:	781b      	ldrb	r3, [r3, #0]
}
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b004      	add	sp, #16
 8002ce8:	bdb0      	pop	{r4, r5, r7, pc}

08002cea <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	000a      	movs	r2, r1
 8002cf4:	1cfb      	adds	r3, r7, #3
 8002cf6:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	23a4      	movs	r3, #164	@ 0xa4
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	5cd3      	ldrb	r3, [r2, r3]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_PCD_EP_Flush+0x1e>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e01f      	b.n	8002d48 <HAL_PCD_EP_Flush+0x5e>
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	23a4      	movs	r3, #164	@ 0xa4
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	2101      	movs	r1, #1
 8002d10:	54d1      	strb	r1, [r2, r3]

  if ((ep_addr & 0x80U) == 0x80U)
 8002d12:	1cfb      	adds	r3, r7, #3
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	b25b      	sxtb	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	da0a      	bge.n	8002d32 <HAL_PCD_EP_Flush+0x48>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	1cfb      	adds	r3, r7, #3
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2107      	movs	r1, #7
 8002d26:	400b      	ands	r3, r1
 8002d28:	0019      	movs	r1, r3
 8002d2a:	0010      	movs	r0, r2
 8002d2c:	f003 fe5f 	bl	80069ee <USB_FlushTxFifo>
 8002d30:	e004      	b.n	8002d3c <HAL_PCD_EP_Flush+0x52>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	0018      	movs	r0, r3
 8002d38:	f003 fe63 	bl	8006a02 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	23a4      	movs	r3, #164	@ 0xa4
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	2100      	movs	r1, #0
 8002d44:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	0018      	movs	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b002      	add	sp, #8
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002d50:	b5b0      	push	{r4, r5, r7, lr}
 8002d52:	b08e      	sub	sp, #56	@ 0x38
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d58:	e316      	b.n	8003388 <PCD_EP_ISR_Handler+0x638>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d60:	201a      	movs	r0, #26
 8002d62:	183b      	adds	r3, r7, r0
 8002d64:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8002d66:	183b      	adds	r3, r7, r0
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	2419      	movs	r4, #25
 8002d6e:	193b      	adds	r3, r7, r4
 8002d70:	210f      	movs	r1, #15
 8002d72:	400a      	ands	r2, r1
 8002d74:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8002d76:	193b      	adds	r3, r7, r4
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d000      	beq.n	8002d80 <PCD_EP_ISR_Handler+0x30>
 8002d7e:	e0eb      	b.n	8002f58 <PCD_EP_ISR_Handler+0x208>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002d80:	183b      	adds	r3, r7, r0
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	2210      	movs	r2, #16
 8002d86:	4013      	ands	r3, r2
 8002d88:	d140      	bne.n	8002e0c <PCD_EP_ISR_Handler+0xbc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4ae1      	ldr	r2, [pc, #900]	@ (8003118 <PCD_EP_ISR_Handler+0x3c8>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	2180      	movs	r1, #128	@ 0x80
 8002d9e:	0209      	lsls	r1, r1, #8
 8002da0:	430a      	orrs	r2, r1
 8002da2:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3310      	adds	r3, #16
 8002da8:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4ada      	ldr	r2, [pc, #872]	@ (800311c <PCD_EP_ISR_Handler+0x3cc>)
 8002db2:	4694      	mov	ip, r2
 8002db4:	4463      	add	r3, ip
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	0c1b      	lsrs	r3, r3, #16
 8002dba:	059b      	lsls	r3, r3, #22
 8002dbc:	0d9a      	lsrs	r2, r3, #22
 8002dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc4:	695a      	ldr	r2, [r3, #20]
 8002dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	18d2      	adds	r2, r2, r3
 8002dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dce:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f006 fe45 	bl	8009a64 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	7b1b      	ldrb	r3, [r3, #12]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d100      	bne.n	8002de6 <PCD_EP_ISR_Handler+0x96>
 8002de4:	e2d0      	b.n	8003388 <PCD_EP_ISR_Handler+0x638>
 8002de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d000      	beq.n	8002df0 <PCD_EP_ISR_Handler+0xa0>
 8002dee:	e2cb      	b.n	8003388 <PCD_EP_ISR_Handler+0x638>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	7b1b      	ldrb	r3, [r3, #12]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2280      	movs	r2, #128	@ 0x80
 8002df8:	4252      	negs	r2, r2
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	731a      	strb	r2, [r3, #12]
 8002e0a:	e2bd      	b.n	8003388 <PCD_EP_ISR_Handler+0x638>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3351      	adds	r3, #81	@ 0x51
 8002e10:	33ff      	adds	r3, #255	@ 0xff
 8002e12:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	2132      	movs	r1, #50	@ 0x32
 8002e1c:	187b      	adds	r3, r7, r1
 8002e1e:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002e20:	187b      	adds	r3, r7, r1
 8002e22:	881a      	ldrh	r2, [r3, #0]
 8002e24:	2380      	movs	r3, #128	@ 0x80
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d029      	beq.n	8002e80 <PCD_EP_ISR_Handler+0x130>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	0019      	movs	r1, r3
 8002e36:	0010      	movs	r0, r2
 8002e38:	f7ff fa3e 	bl	80022b8 <PCD_GET_EP_RX_CNT>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	001a      	movs	r2, r3
 8002e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e42:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	22a6      	movs	r2, #166	@ 0xa6
 8002e4c:	0092      	lsls	r2, r2, #2
 8002e4e:	1899      	adds	r1, r3, r2
 8002e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e52:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e56:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	f005 fb2b 	bl	80084b4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4aae      	ldr	r2, [pc, #696]	@ (8003120 <PCD_EP_ISR_Handler+0x3d0>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	2180      	movs	r1, #128	@ 0x80
 8002e72:	430a      	orrs	r2, r1
 8002e74:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f006 fd67 	bl	800994c <HAL_PCD_SetupStageCallback>
 8002e7e:	e283      	b.n	8003388 <PCD_EP_ISR_Handler+0x638>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8002e80:	2332      	movs	r3, #50	@ 0x32
 8002e82:	18fb      	adds	r3, r7, r3
 8002e84:	2200      	movs	r2, #0
 8002e86:	5e9b      	ldrsh	r3, [r3, r2]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	db00      	blt.n	8002e8e <PCD_EP_ISR_Handler+0x13e>
 8002e8c:	e27c      	b.n	8003388 <PCD_EP_ISR_Handler+0x638>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4aa2      	ldr	r2, [pc, #648]	@ (8003120 <PCD_EP_ISR_Handler+0x3d0>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ea0:	2180      	movs	r1, #128	@ 0x80
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	0019      	movs	r1, r3
 8002eb0:	0010      	movs	r0, r2
 8002eb2:	f7ff fa01 	bl	80022b8 <PCD_GET_EP_RX_CNT>
 8002eb6:	0003      	movs	r3, r0
 8002eb8:	001a      	movs	r2, r3
 8002eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ebc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d01a      	beq.n	8002efc <PCD_EP_ISR_Handler+0x1ac>
 8002ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d016      	beq.n	8002efc <PCD_EP_ISR_Handler+0x1ac>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ed4:	6959      	ldr	r1, [r3, #20]
 8002ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ed8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002edc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	f005 fae8 	bl	80084b4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ee6:	695a      	ldr	r2, [r3, #20]
 8002ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	18d2      	adds	r2, r2, r3
 8002eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ef0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f006 fe7a 	bl	8009bf0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	2132      	movs	r1, #50	@ 0x32
 8002f04:	187b      	adds	r3, r7, r1
 8002f06:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002f08:	187b      	adds	r3, r7, r1
 8002f0a:	881a      	ldrh	r2, [r3, #0]
 8002f0c:	2380      	movs	r3, #128	@ 0x80
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	4013      	ands	r3, r2
 8002f12:	d000      	beq.n	8002f16 <PCD_EP_ISR_Handler+0x1c6>
 8002f14:	e238      	b.n	8003388 <PCD_EP_ISR_Handler+0x638>
 8002f16:	187b      	adds	r3, r7, r1
 8002f18:	881a      	ldrh	r2, [r3, #0]
 8002f1a:	23c0      	movs	r3, #192	@ 0xc0
 8002f1c:	019b      	lsls	r3, r3, #6
 8002f1e:	401a      	ands	r2, r3
 8002f20:	23c0      	movs	r3, #192	@ 0xc0
 8002f22:	019b      	lsls	r3, r3, #6
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d100      	bne.n	8002f2a <PCD_EP_ISR_Handler+0x1da>
 8002f28:	e22e      	b.n	8003388 <PCD_EP_ISR_Handler+0x638>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a7c      	ldr	r2, [pc, #496]	@ (8003124 <PCD_EP_ISR_Handler+0x3d4>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2280      	movs	r2, #128	@ 0x80
 8002f3a:	0152      	lsls	r2, r2, #5
 8002f3c:	4053      	eors	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2280      	movs	r2, #128	@ 0x80
 8002f44:	0192      	lsls	r2, r2, #6
 8002f46:	4053      	eors	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	4975      	ldr	r1, [pc, #468]	@ (8003128 <PCD_EP_ISR_Handler+0x3d8>)
 8002f52:	430a      	orrs	r2, r1
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	e217      	b.n	8003388 <PCD_EP_ISR_Handler+0x638>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	001a      	movs	r2, r3
 8002f5e:	2119      	movs	r1, #25
 8002f60:	187b      	adds	r3, r7, r1
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	18d3      	adds	r3, r2, r3
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	2032      	movs	r0, #50	@ 0x32
 8002f6c:	183b      	adds	r3, r7, r0
 8002f6e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8002f70:	183b      	adds	r3, r7, r0
 8002f72:	2200      	movs	r2, #0
 8002f74:	5e9b      	ldrsh	r3, [r3, r2]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	db00      	blt.n	8002f7c <PCD_EP_ISR_Handler+0x22c>
 8002f7a:	e0e2      	b.n	8003142 <PCD_EP_ISR_Handler+0x3f2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	001a      	movs	r2, r3
 8002f82:	187b      	adds	r3, r7, r1
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	18d3      	adds	r3, r2, r3
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a64      	ldr	r2, [pc, #400]	@ (8003120 <PCD_EP_ISR_Handler+0x3d0>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	623b      	str	r3, [r7, #32]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	001a      	movs	r2, r3
 8002f98:	0008      	movs	r0, r1
 8002f9a:	187b      	adds	r3, r7, r1
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	18d3      	adds	r3, r2, r3
 8002fa2:	6a3a      	ldr	r2, [r7, #32]
 8002fa4:	2180      	movs	r1, #128	@ 0x80
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002faa:	183b      	adds	r3, r7, r0
 8002fac:	781a      	ldrb	r2, [r3, #0]
 8002fae:	0013      	movs	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	189b      	adds	r3, r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	3351      	adds	r3, #81	@ 0x51
 8002fb8:	33ff      	adds	r3, #255	@ 0xff
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	18d3      	adds	r3, r2, r3
 8002fbe:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc2:	7b1b      	ldrb	r3, [r3, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d11c      	bne.n	8003002 <PCD_EP_ISR_Handler+0x2b2>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2528      	movs	r5, #40	@ 0x28
 8002fd2:	197c      	adds	r4, r7, r5
 8002fd4:	0019      	movs	r1, r3
 8002fd6:	0010      	movs	r0, r2
 8002fd8:	f7ff f96e 	bl	80022b8 <PCD_GET_EP_RX_CNT>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 8002fe0:	002c      	movs	r4, r5
 8002fe2:	193b      	adds	r3, r7, r4
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d100      	bne.n	8002fec <PCD_EP_ISR_Handler+0x29c>
 8002fea:	e074      	b.n	80030d6 <PCD_EP_ISR_Handler+0x386>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6818      	ldr	r0, [r3, #0]
 8002ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff2:	6959      	ldr	r1, [r3, #20]
 8002ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff6:	88da      	ldrh	r2, [r3, #6]
 8002ff8:	193b      	adds	r3, r7, r4
 8002ffa:	881b      	ldrh	r3, [r3, #0]
 8002ffc:	f005 fa5a 	bl	80084b4 <USB_ReadPMA>
 8003000:	e069      	b.n	80030d6 <PCD_EP_ISR_Handler+0x386>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003004:	78db      	ldrb	r3, [r3, #3]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d10c      	bne.n	8003024 <PCD_EP_ISR_Handler+0x2d4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800300a:	2328      	movs	r3, #40	@ 0x28
 800300c:	18fc      	adds	r4, r7, r3
 800300e:	2332      	movs	r3, #50	@ 0x32
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	881a      	ldrh	r2, [r3, #0]
 8003014:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	0018      	movs	r0, r3
 800301a:	f000 f9c7 	bl	80033ac <HAL_PCD_EP_DB_Receive>
 800301e:	0003      	movs	r3, r0
 8003020:	8023      	strh	r3, [r4, #0]
 8003022:	e058      	b.n	80030d6 <PCD_EP_ISR_Handler+0x386>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	001a      	movs	r2, r3
 800302a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	18d3      	adds	r3, r2, r3
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a3d      	ldr	r2, [pc, #244]	@ (800312c <PCD_EP_ISR_Handler+0x3dc>)
 8003036:	4013      	ands	r3, r2
 8003038:	61fb      	str	r3, [r7, #28]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	001a      	movs	r2, r3
 8003040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	18d3      	adds	r3, r2, r3
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	4939      	ldr	r1, [pc, #228]	@ (8003130 <PCD_EP_ISR_Handler+0x3e0>)
 800304c:	430a      	orrs	r2, r1
 800304e:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	001a      	movs	r2, r3
 8003056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	18d3      	adds	r3, r2, r3
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	2380      	movs	r3, #128	@ 0x80
 8003062:	01db      	lsls	r3, r3, #7
 8003064:	4013      	ands	r3, r2
 8003066:	d01b      	beq.n	80030a0 <PCD_EP_ISR_Handler+0x350>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2528      	movs	r5, #40	@ 0x28
 8003072:	197c      	adds	r4, r7, r5
 8003074:	0019      	movs	r1, r3
 8003076:	0010      	movs	r0, r2
 8003078:	f7ff f940 	bl	80022fc <PCD_GET_EP_DBUF0_CNT>
 800307c:	0003      	movs	r3, r0
 800307e:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 8003080:	002c      	movs	r4, r5
 8003082:	193b      	adds	r3, r7, r4
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d025      	beq.n	80030d6 <PCD_EP_ISR_Handler+0x386>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003090:	6959      	ldr	r1, [r3, #20]
 8003092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003094:	891a      	ldrh	r2, [r3, #8]
 8003096:	193b      	adds	r3, r7, r4
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	f005 fa0b 	bl	80084b4 <USB_ReadPMA>
 800309e:	e01a      	b.n	80030d6 <PCD_EP_ISR_Handler+0x386>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2528      	movs	r5, #40	@ 0x28
 80030aa:	197c      	adds	r4, r7, r5
 80030ac:	0019      	movs	r1, r3
 80030ae:	0010      	movs	r0, r2
 80030b0:	f7ff f946 	bl	8002340 <PCD_GET_EP_DBUF1_CNT>
 80030b4:	0003      	movs	r3, r0
 80030b6:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 80030b8:	002c      	movs	r4, r5
 80030ba:	193b      	adds	r3, r7, r4
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <PCD_EP_ISR_Handler+0x386>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c8:	6959      	ldr	r1, [r3, #20]
 80030ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030cc:	895a      	ldrh	r2, [r3, #10]
 80030ce:	193b      	adds	r3, r7, r4
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	f005 f9ef 	bl	80084b4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80030d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030d8:	69da      	ldr	r2, [r3, #28]
 80030da:	2128      	movs	r1, #40	@ 0x28
 80030dc:	187b      	adds	r3, r7, r1
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	18d2      	adds	r2, r2, r3
 80030e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030e4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80030e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030e8:	695a      	ldr	r2, [r3, #20]
 80030ea:	187b      	adds	r3, r7, r1
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	18d2      	adds	r2, r2, r3
 80030f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80030f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <PCD_EP_ISR_Handler+0x3b8>
 80030fc:	187b      	adds	r3, r7, r1
 80030fe:	881a      	ldrh	r2, [r3, #0]
 8003100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	429a      	cmp	r2, r3
 8003106:	d215      	bcs.n	8003134 <PCD_EP_ISR_Handler+0x3e4>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800310a:	781a      	ldrb	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	0011      	movs	r1, r2
 8003110:	0018      	movs	r0, r3
 8003112:	f006 fd6d 	bl	8009bf0 <HAL_PCD_DataOutStageCallback>
 8003116:	e014      	b.n	8003142 <PCD_EP_ISR_Handler+0x3f2>
 8003118:	07ff8f0f 	.word	0x07ff8f0f
 800311c:	40009800 	.word	0x40009800
 8003120:	07ff0f8f 	.word	0x07ff0f8f
 8003124:	07ffbf8f 	.word	0x07ffbf8f
 8003128:	00008080 	.word	0x00008080
 800312c:	07ff8f8f 	.word	0x07ff8f8f
 8003130:	000080c0 	.word	0x000080c0
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800313a:	0011      	movs	r1, r2
 800313c:	0018      	movs	r0, r3
 800313e:	f004 fa35 	bl	80075ac <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8003142:	2032      	movs	r0, #50	@ 0x32
 8003144:	183b      	adds	r3, r7, r0
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	2280      	movs	r2, #128	@ 0x80
 800314a:	4013      	ands	r3, r2
 800314c:	d100      	bne.n	8003150 <PCD_EP_ISR_Handler+0x400>
 800314e:	e11b      	b.n	8003388 <PCD_EP_ISR_Handler+0x638>
      {
        ep = &hpcd->IN_ep[epindex];
 8003150:	2119      	movs	r1, #25
 8003152:	187b      	adds	r3, r7, r1
 8003154:	781a      	ldrb	r2, [r3, #0]
 8003156:	0013      	movs	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	189b      	adds	r3, r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	3310      	adds	r3, #16
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	18d3      	adds	r3, r2, r3
 8003164:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	001a      	movs	r2, r3
 800316c:	187b      	adds	r3, r7, r1
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	18d3      	adds	r3, r2, r3
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a8b      	ldr	r2, [pc, #556]	@ (80033a4 <PCD_EP_ISR_Handler+0x654>)
 8003178:	4013      	ands	r3, r2
 800317a:	627b      	str	r3, [r7, #36]	@ 0x24
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	001a      	movs	r2, r3
 8003182:	187b      	adds	r3, r7, r1
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	18d3      	adds	r3, r2, r3
 800318a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800318c:	2180      	movs	r1, #128	@ 0x80
 800318e:	0209      	lsls	r1, r1, #8
 8003190:	430a      	orrs	r2, r1
 8003192:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003196:	78db      	ldrb	r3, [r3, #3]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d000      	beq.n	800319e <PCD_EP_ISR_Handler+0x44e>
 800319c:	e0a3      	b.n	80032e6 <PCD_EP_ISR_Handler+0x596>
        {
          ep->xfer_len = 0U;
 800319e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a0:	2200      	movs	r2, #0
 80031a2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80031a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a6:	7b1b      	ldrb	r3, [r3, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d100      	bne.n	80031ae <PCD_EP_ISR_Handler+0x45e>
 80031ac:	e093      	b.n	80032d6 <PCD_EP_ISR_Handler+0x586>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80031ae:	183b      	adds	r3, r7, r0
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	2240      	movs	r2, #64	@ 0x40
 80031b4:	4013      	ands	r3, r2
 80031b6:	d047      	beq.n	8003248 <PCD_EP_ISR_Handler+0x4f8>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ba:	785b      	ldrb	r3, [r3, #1]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d121      	bne.n	8003204 <PCD_EP_ISR_Handler+0x4b4>
 80031c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4a78      	ldr	r2, [pc, #480]	@ (80033a8 <PCD_EP_ISR_Handler+0x658>)
 80031c8:	4694      	mov	ip, r2
 80031ca:	4463      	add	r3, ip
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	4974      	ldr	r1, [pc, #464]	@ (80033a8 <PCD_EP_ISR_Handler+0x658>)
 80031d6:	468c      	mov	ip, r1
 80031d8:	4463      	add	r3, ip
 80031da:	0192      	lsls	r2, r2, #6
 80031dc:	0992      	lsrs	r2, r2, #6
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	4a70      	ldr	r2, [pc, #448]	@ (80033a8 <PCD_EP_ISR_Handler+0x658>)
 80031e8:	4694      	mov	ip, r2
 80031ea:	4463      	add	r3, ip
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	496c      	ldr	r1, [pc, #432]	@ (80033a8 <PCD_EP_ISR_Handler+0x658>)
 80031f6:	468c      	mov	ip, r1
 80031f8:	4463      	add	r3, ip
 80031fa:	2180      	movs	r1, #128	@ 0x80
 80031fc:	0609      	lsls	r1, r1, #24
 80031fe:	430a      	orrs	r2, r1
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	e068      	b.n	80032d6 <PCD_EP_ISR_Handler+0x586>
 8003204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003206:	785b      	ldrb	r3, [r3, #1]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d164      	bne.n	80032d6 <PCD_EP_ISR_Handler+0x586>
 800320c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4a65      	ldr	r2, [pc, #404]	@ (80033a8 <PCD_EP_ISR_Handler+0x658>)
 8003214:	4694      	mov	ip, r2
 8003216:	4463      	add	r3, ip
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4961      	ldr	r1, [pc, #388]	@ (80033a8 <PCD_EP_ISR_Handler+0x658>)
 8003222:	468c      	mov	ip, r1
 8003224:	4463      	add	r3, ip
 8003226:	0412      	lsls	r2, r2, #16
 8003228:	0c12      	lsrs	r2, r2, #16
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4a5d      	ldr	r2, [pc, #372]	@ (80033a8 <PCD_EP_ISR_Handler+0x658>)
 8003234:	189a      	adds	r2, r3, r2
 8003236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	495a      	ldr	r1, [pc, #360]	@ (80033a8 <PCD_EP_ISR_Handler+0x658>)
 800323e:	468c      	mov	ip, r1
 8003240:	4463      	add	r3, ip
 8003242:	6812      	ldr	r2, [r2, #0]
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	e046      	b.n	80032d6 <PCD_EP_ISR_Handler+0x586>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800324a:	785b      	ldrb	r3, [r3, #1]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d121      	bne.n	8003294 <PCD_EP_ISR_Handler+0x544>
 8003250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	4a54      	ldr	r2, [pc, #336]	@ (80033a8 <PCD_EP_ISR_Handler+0x658>)
 8003258:	4694      	mov	ip, r2
 800325a:	4463      	add	r3, ip
 800325c:	685a      	ldr	r2, [r3, #4]
 800325e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4950      	ldr	r1, [pc, #320]	@ (80033a8 <PCD_EP_ISR_Handler+0x658>)
 8003266:	468c      	mov	ip, r1
 8003268:	4463      	add	r3, ip
 800326a:	0192      	lsls	r2, r2, #6
 800326c:	0992      	lsrs	r2, r2, #6
 800326e:	605a      	str	r2, [r3, #4]
 8003270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4a4c      	ldr	r2, [pc, #304]	@ (80033a8 <PCD_EP_ISR_Handler+0x658>)
 8003278:	4694      	mov	ip, r2
 800327a:	4463      	add	r3, ip
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	4948      	ldr	r1, [pc, #288]	@ (80033a8 <PCD_EP_ISR_Handler+0x658>)
 8003286:	468c      	mov	ip, r1
 8003288:	4463      	add	r3, ip
 800328a:	2180      	movs	r1, #128	@ 0x80
 800328c:	0609      	lsls	r1, r1, #24
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]
 8003292:	e020      	b.n	80032d6 <PCD_EP_ISR_Handler+0x586>
 8003294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003296:	785b      	ldrb	r3, [r3, #1]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d11c      	bne.n	80032d6 <PCD_EP_ISR_Handler+0x586>
 800329c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4a41      	ldr	r2, [pc, #260]	@ (80033a8 <PCD_EP_ISR_Handler+0x658>)
 80032a4:	4694      	mov	ip, r2
 80032a6:	4463      	add	r3, ip
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	493d      	ldr	r1, [pc, #244]	@ (80033a8 <PCD_EP_ISR_Handler+0x658>)
 80032b2:	468c      	mov	ip, r1
 80032b4:	4463      	add	r3, ip
 80032b6:	0412      	lsls	r2, r2, #16
 80032b8:	0c12      	lsrs	r2, r2, #16
 80032ba:	605a      	str	r2, [r3, #4]
 80032bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	4a39      	ldr	r2, [pc, #228]	@ (80033a8 <PCD_EP_ISR_Handler+0x658>)
 80032c4:	189a      	adds	r2, r3, r2
 80032c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	4936      	ldr	r1, [pc, #216]	@ (80033a8 <PCD_EP_ISR_Handler+0x658>)
 80032ce:	468c      	mov	ip, r1
 80032d0:	4463      	add	r3, ip
 80032d2:	6852      	ldr	r2, [r2, #4]
 80032d4:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032d8:	781a      	ldrb	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	0011      	movs	r1, r2
 80032de:	0018      	movs	r0, r3
 80032e0:	f006 fbc0 	bl	8009a64 <HAL_PCD_DataInStageCallback>
 80032e4:	e050      	b.n	8003388 <PCD_EP_ISR_Handler+0x638>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80032e6:	2332      	movs	r3, #50	@ 0x32
 80032e8:	18fb      	adds	r3, r7, r3
 80032ea:	881a      	ldrh	r2, [r3, #0]
 80032ec:	2380      	movs	r3, #128	@ 0x80
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	4013      	ands	r3, r2
 80032f2:	d141      	bne.n	8003378 <PCD_EP_ISR_Handler+0x628>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80032f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	4a2b      	ldr	r2, [pc, #172]	@ (80033a8 <PCD_EP_ISR_Handler+0x658>)
 80032fc:	4694      	mov	ip, r2
 80032fe:	4463      	add	r3, ip
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	0c1b      	lsrs	r3, r3, #16
 8003304:	b29a      	uxth	r2, r3
 8003306:	212a      	movs	r1, #42	@ 0x2a
 8003308:	187b      	adds	r3, r7, r1
 800330a:	0592      	lsls	r2, r2, #22
 800330c:	0d92      	lsrs	r2, r2, #22
 800330e:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8003310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003312:	699a      	ldr	r2, [r3, #24]
 8003314:	187b      	adds	r3, r7, r1
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d907      	bls.n	800332c <PCD_EP_ISR_Handler+0x5dc>
            {
              ep->xfer_len -= TxPctSize;
 800331c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800331e:	699a      	ldr	r2, [r3, #24]
 8003320:	187b      	adds	r3, r7, r1
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	1ad2      	subs	r2, r2, r3
 8003326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003328:	619a      	str	r2, [r3, #24]
 800332a:	e002      	b.n	8003332 <PCD_EP_ISR_Handler+0x5e2>
            }
            else
            {
              ep->xfer_len = 0U;
 800332c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800332e:	2200      	movs	r2, #0
 8003330:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d107      	bne.n	800334a <PCD_EP_ISR_Handler+0x5fa>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800333a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800333c:	781a      	ldrb	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	0011      	movs	r1, r2
 8003342:	0018      	movs	r0, r3
 8003344:	f006 fb8e 	bl	8009a64 <HAL_PCD_DataInStageCallback>
 8003348:	e01e      	b.n	8003388 <PCD_EP_ISR_Handler+0x638>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800334a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800334c:	695a      	ldr	r2, [r3, #20]
 800334e:	212a      	movs	r1, #42	@ 0x2a
 8003350:	187b      	adds	r3, r7, r1
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	18d2      	adds	r2, r2, r3
 8003356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003358:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800335a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800335c:	69da      	ldr	r2, [r3, #28]
 800335e:	187b      	adds	r3, r7, r1
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	18d2      	adds	r2, r2, r3
 8003364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003366:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800336e:	0011      	movs	r1, r2
 8003370:	0018      	movs	r0, r3
 8003372:	f004 f91b 	bl	80075ac <USB_EPStartXfer>
 8003376:	e007      	b.n	8003388 <PCD_EP_ISR_Handler+0x638>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003378:	2332      	movs	r3, #50	@ 0x32
 800337a:	18fb      	adds	r3, r7, r3
 800337c:	881a      	ldrh	r2, [r3, #0]
 800337e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	0018      	movs	r0, r3
 8003384:	f000 f8fc 	bl	8003580 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800338e:	2380      	movs	r3, #128	@ 0x80
 8003390:	021b      	lsls	r3, r3, #8
 8003392:	4013      	ands	r3, r2
 8003394:	d000      	beq.n	8003398 <PCD_EP_ISR_Handler+0x648>
 8003396:	e4e0      	b.n	8002d5a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	0018      	movs	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	b00e      	add	sp, #56	@ 0x38
 80033a0:	bdb0      	pop	{r4, r5, r7, pc}
 80033a2:	46c0      	nop			@ (mov r8, r8)
 80033a4:	07ff8f0f 	.word	0x07ff8f0f
 80033a8:	40009800 	.word	0x40009800

080033ac <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80033ac:	b5b0      	push	{r4, r5, r7, lr}
 80033ae:	b08a      	sub	sp, #40	@ 0x28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	1dbb      	adds	r3, r7, #6
 80033b8:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80033ba:	1dbb      	adds	r3, r7, #6
 80033bc:	881a      	ldrh	r2, [r3, #0]
 80033be:	2380      	movs	r3, #128	@ 0x80
 80033c0:	01db      	lsls	r3, r3, #7
 80033c2:	4013      	ands	r3, r2
 80033c4:	d067      	beq.n	8003496 <HAL_PCD_EP_DB_Receive+0xea>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	251e      	movs	r5, #30
 80033d0:	197c      	adds	r4, r7, r5
 80033d2:	0019      	movs	r1, r3
 80033d4:	0010      	movs	r0, r2
 80033d6:	f7fe ff91 	bl	80022fc <PCD_GET_EP_DBUF0_CNT>
 80033da:	0003      	movs	r3, r0
 80033dc:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	699a      	ldr	r2, [r3, #24]
 80033e2:	197b      	adds	r3, r7, r5
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d307      	bcc.n	80033fa <HAL_PCD_EP_DB_Receive+0x4e>
    {
      ep->xfer_len -= count;
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	197b      	adds	r3, r7, r5
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	1ad2      	subs	r2, r2, r3
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	619a      	str	r2, [r3, #24]
 80033f8:	e002      	b.n	8003400 <HAL_PCD_EP_DB_Receive+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2200      	movs	r2, #0
 80033fe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d11a      	bne.n	800343e <HAL_PCD_EP_DB_Receive+0x92>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	001a      	movs	r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	18d3      	adds	r3, r2, r3
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a55      	ldr	r2, [pc, #340]	@ (8003570 <HAL_PCD_EP_DB_Receive+0x1c4>)
 800341a:	4013      	ands	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	2280      	movs	r2, #128	@ 0x80
 8003422:	0192      	lsls	r2, r2, #6
 8003424:	4053      	eors	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	001a      	movs	r2, r3
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	18d3      	adds	r3, r2, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	494e      	ldr	r1, [pc, #312]	@ (8003574 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800343a:	430a      	orrs	r2, r1
 800343c:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800343e:	1dbb      	adds	r3, r7, #6
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	2240      	movs	r2, #64	@ 0x40
 8003444:	4013      	ands	r3, r2
 8003446:	d015      	beq.n	8003474 <HAL_PCD_EP_DB_Receive+0xc8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	001a      	movs	r2, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	18d3      	adds	r3, r2, r3
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a47      	ldr	r2, [pc, #284]	@ (8003578 <HAL_PCD_EP_DB_Receive+0x1cc>)
 800345a:	4013      	ands	r3, r2
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	001a      	movs	r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	18d3      	adds	r3, r2, r3
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	4943      	ldr	r1, [pc, #268]	@ (800357c <HAL_PCD_EP_DB_Receive+0x1d0>)
 8003470:	430a      	orrs	r2, r1
 8003472:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8003474:	241e      	movs	r4, #30
 8003476:	193b      	adds	r3, r7, r4
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d100      	bne.n	8003480 <HAL_PCD_EP_DB_Receive+0xd4>
 800347e:	e070      	b.n	8003562 <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6818      	ldr	r0, [r3, #0]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	6959      	ldr	r1, [r3, #20]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	891a      	ldrh	r2, [r3, #8]
 800348c:	193b      	adds	r3, r7, r4
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	f005 f810 	bl	80084b4 <USB_ReadPMA>
 8003494:	e065      	b.n	8003562 <HAL_PCD_EP_DB_Receive+0x1b6>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	251e      	movs	r5, #30
 80034a0:	197c      	adds	r4, r7, r5
 80034a2:	0019      	movs	r1, r3
 80034a4:	0010      	movs	r0, r2
 80034a6:	f7fe ff4b 	bl	8002340 <PCD_GET_EP_DBUF1_CNT>
 80034aa:	0003      	movs	r3, r0
 80034ac:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	699a      	ldr	r2, [r3, #24]
 80034b2:	197b      	adds	r3, r7, r5
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d307      	bcc.n	80034ca <HAL_PCD_EP_DB_Receive+0x11e>
    {
      ep->xfer_len -= count;
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	699a      	ldr	r2, [r3, #24]
 80034be:	197b      	adds	r3, r7, r5
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	1ad2      	subs	r2, r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	619a      	str	r2, [r3, #24]
 80034c8:	e002      	b.n	80034d0 <HAL_PCD_EP_DB_Receive+0x124>
    }
    else
    {
      ep->xfer_len = 0U;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	2200      	movs	r2, #0
 80034ce:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d11a      	bne.n	800350e <HAL_PCD_EP_DB_Receive+0x162>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	001a      	movs	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	18d3      	adds	r3, r2, r3
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a21      	ldr	r2, [pc, #132]	@ (8003570 <HAL_PCD_EP_DB_Receive+0x1c4>)
 80034ea:	4013      	ands	r3, r2
 80034ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80034ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f0:	2280      	movs	r2, #128	@ 0x80
 80034f2:	0192      	lsls	r2, r2, #6
 80034f4:	4053      	eors	r3, r2
 80034f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	001a      	movs	r2, r3
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	18d3      	adds	r3, r2, r3
 8003506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003508:	491a      	ldr	r1, [pc, #104]	@ (8003574 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800350a:	430a      	orrs	r2, r1
 800350c:	601a      	str	r2, [r3, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800350e:	1dbb      	adds	r3, r7, #6
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	2240      	movs	r2, #64	@ 0x40
 8003514:	4013      	ands	r3, r2
 8003516:	d115      	bne.n	8003544 <HAL_PCD_EP_DB_Receive+0x198>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	001a      	movs	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	18d3      	adds	r3, r2, r3
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a13      	ldr	r2, [pc, #76]	@ (8003578 <HAL_PCD_EP_DB_Receive+0x1cc>)
 800352a:	4013      	ands	r3, r2
 800352c:	623b      	str	r3, [r7, #32]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	001a      	movs	r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	18d3      	adds	r3, r2, r3
 800353c:	6a3a      	ldr	r2, [r7, #32]
 800353e:	490f      	ldr	r1, [pc, #60]	@ (800357c <HAL_PCD_EP_DB_Receive+0x1d0>)
 8003540:	430a      	orrs	r2, r1
 8003542:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8003544:	241e      	movs	r4, #30
 8003546:	193b      	adds	r3, r7, r4
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d009      	beq.n	8003562 <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	6959      	ldr	r1, [r3, #20]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	895a      	ldrh	r2, [r3, #10]
 800355a:	193b      	adds	r3, r7, r4
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	f004 ffa9 	bl	80084b4 <USB_ReadPMA>
    }
  }

  return count;
 8003562:	231e      	movs	r3, #30
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	881b      	ldrh	r3, [r3, #0]
}
 8003568:	0018      	movs	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	b00a      	add	sp, #40	@ 0x28
 800356e:	bdb0      	pop	{r4, r5, r7, pc}
 8003570:	07ffbf8f 	.word	0x07ffbf8f
 8003574:	00008080 	.word	0x00008080
 8003578:	07ff8f8f 	.word	0x07ff8f8f
 800357c:	000080c0 	.word	0x000080c0

08003580 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003580:	b5b0      	push	{r4, r5, r7, lr}
 8003582:	b090      	sub	sp, #64	@ 0x40
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	1dbb      	adds	r3, r7, #6
 800358c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800358e:	1dbb      	adds	r3, r7, #6
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	2240      	movs	r2, #64	@ 0x40
 8003594:	4013      	ands	r3, r2
 8003596:	d100      	bne.n	800359a <HAL_PCD_EP_DB_Transmit+0x1a>
 8003598:	e1ec      	b.n	8003974 <HAL_PCD_EP_DB_Transmit+0x3f4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	251e      	movs	r5, #30
 80035a4:	197c      	adds	r4, r7, r5
 80035a6:	0019      	movs	r1, r3
 80035a8:	0010      	movs	r0, r2
 80035aa:	f7fe fea7 	bl	80022fc <PCD_GET_EP_DBUF0_CNT>
 80035ae:	0003      	movs	r3, r0
 80035b0:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	699a      	ldr	r2, [r3, #24]
 80035b6:	197b      	adds	r3, r7, r5
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d907      	bls.n	80035ce <HAL_PCD_EP_DB_Transmit+0x4e>
    {
      ep->xfer_len -= TxPctSize;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	197b      	adds	r3, r7, r5
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	1ad2      	subs	r2, r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	619a      	str	r2, [r3, #24]
 80035cc:	e002      	b.n	80035d4 <HAL_PCD_EP_DB_Transmit+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2200      	movs	r2, #0
 80035d2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d000      	beq.n	80035de <HAL_PCD_EP_DB_Transmit+0x5e>
 80035dc:	e0d0      	b.n	8003780 <HAL_PCD_EP_DB_Transmit+0x200>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	785b      	ldrb	r3, [r3, #1]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d121      	bne.n	800362a <HAL_PCD_EP_DB_Transmit+0xaa>
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4adc      	ldr	r2, [pc, #880]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80035ee:	4694      	mov	ip, r2
 80035f0:	4463      	add	r3, ip
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	49d9      	ldr	r1, [pc, #868]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80035fc:	468c      	mov	ip, r1
 80035fe:	4463      	add	r3, ip
 8003600:	0192      	lsls	r2, r2, #6
 8003602:	0992      	lsrs	r2, r2, #6
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	4ad4      	ldr	r2, [pc, #848]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800360e:	4694      	mov	ip, r2
 8003610:	4463      	add	r3, ip
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	49d1      	ldr	r1, [pc, #836]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800361c:	468c      	mov	ip, r1
 800361e:	4463      	add	r3, ip
 8003620:	2180      	movs	r1, #128	@ 0x80
 8003622:	0609      	lsls	r1, r1, #24
 8003624:	430a      	orrs	r2, r1
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	e020      	b.n	800366c <HAL_PCD_EP_DB_Transmit+0xec>
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	785b      	ldrb	r3, [r3, #1]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d11c      	bne.n	800366c <HAL_PCD_EP_DB_Transmit+0xec>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4ac9      	ldr	r2, [pc, #804]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800363a:	4694      	mov	ip, r2
 800363c:	4463      	add	r3, ip
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	49c6      	ldr	r1, [pc, #792]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8003648:	468c      	mov	ip, r1
 800364a:	4463      	add	r3, ip
 800364c:	0412      	lsls	r2, r2, #16
 800364e:	0c12      	lsrs	r2, r2, #16
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4ac1      	ldr	r2, [pc, #772]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800365a:	189a      	adds	r2, r3, r2
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	49bf      	ldr	r1, [pc, #764]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8003664:	468c      	mov	ip, r1
 8003666:	4463      	add	r3, ip
 8003668:	6812      	ldr	r2, [r2, #0]
 800366a:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	785b      	ldrb	r3, [r3, #1]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d121      	bne.n	80036b8 <HAL_PCD_EP_DB_Transmit+0x138>
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	4ab9      	ldr	r2, [pc, #740]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800367c:	4694      	mov	ip, r2
 800367e:	4463      	add	r3, ip
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	49b5      	ldr	r1, [pc, #724]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800368a:	468c      	mov	ip, r1
 800368c:	4463      	add	r3, ip
 800368e:	0192      	lsls	r2, r2, #6
 8003690:	0992      	lsrs	r2, r2, #6
 8003692:	605a      	str	r2, [r3, #4]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	4ab1      	ldr	r2, [pc, #708]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800369c:	4694      	mov	ip, r2
 800369e:	4463      	add	r3, ip
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	49ad      	ldr	r1, [pc, #692]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80036aa:	468c      	mov	ip, r1
 80036ac:	4463      	add	r3, ip
 80036ae:	2180      	movs	r1, #128	@ 0x80
 80036b0:	0609      	lsls	r1, r1, #24
 80036b2:	430a      	orrs	r2, r1
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	e020      	b.n	80036fa <HAL_PCD_EP_DB_Transmit+0x17a>
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	785b      	ldrb	r3, [r3, #1]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d11c      	bne.n	80036fa <HAL_PCD_EP_DB_Transmit+0x17a>
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4aa6      	ldr	r2, [pc, #664]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80036c8:	4694      	mov	ip, r2
 80036ca:	4463      	add	r3, ip
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	49a2      	ldr	r1, [pc, #648]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80036d6:	468c      	mov	ip, r1
 80036d8:	4463      	add	r3, ip
 80036da:	0412      	lsls	r2, r2, #16
 80036dc:	0c12      	lsrs	r2, r2, #16
 80036de:	605a      	str	r2, [r3, #4]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4a9e      	ldr	r2, [pc, #632]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80036e8:	189a      	adds	r2, r3, r2
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	499b      	ldr	r1, [pc, #620]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80036f2:	468c      	mov	ip, r1
 80036f4:	4463      	add	r3, ip
 80036f6:	6852      	ldr	r2, [r2, #4]
 80036f8:	605a      	str	r2, [r3, #4]

      if (ep->type == EP_TYPE_BULK)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	78db      	ldrb	r3, [r3, #3]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d119      	bne.n	8003736 <HAL_PCD_EP_DB_Transmit+0x1b6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	001a      	movs	r2, r3
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	18d3      	adds	r3, r2, r3
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a94      	ldr	r2, [pc, #592]	@ (8003964 <HAL_PCD_EP_DB_Transmit+0x3e4>)
 8003714:	4013      	ands	r3, r2
 8003716:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800371a:	2220      	movs	r2, #32
 800371c:	4053      	eors	r3, r2
 800371e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	001a      	movs	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	18d3      	adds	r3, r2, r3
 800372e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003730:	498d      	ldr	r1, [pc, #564]	@ (8003968 <HAL_PCD_EP_DB_Transmit+0x3e8>)
 8003732:	430a      	orrs	r2, r1
 8003734:	601a      	str	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	781a      	ldrb	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	0011      	movs	r1, r2
 800373e:	0018      	movs	r0, r3
 8003740:	f006 f990 	bl	8009a64 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003744:	1dbb      	adds	r3, r7, #6
 8003746:	881a      	ldrh	r2, [r3, #0]
 8003748:	2380      	movs	r3, #128	@ 0x80
 800374a:	01db      	lsls	r3, r3, #7
 800374c:	4013      	ands	r3, r2
 800374e:	d015      	beq.n	800377c <HAL_PCD_EP_DB_Transmit+0x1fc>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	001a      	movs	r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	18d3      	adds	r3, r2, r3
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a82      	ldr	r2, [pc, #520]	@ (800396c <HAL_PCD_EP_DB_Transmit+0x3ec>)
 8003762:	4013      	ands	r3, r2
 8003764:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	001a      	movs	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	18d3      	adds	r3, r2, r3
 8003774:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003776:	497e      	ldr	r1, [pc, #504]	@ (8003970 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8003778:	430a      	orrs	r2, r1
 800377a:	601a      	str	r2, [r3, #0]
      }

      return HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	e303      	b.n	8003d88 <HAL_PCD_EP_DB_Transmit+0x808>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003780:	1dbb      	adds	r3, r7, #6
 8003782:	881a      	ldrh	r2, [r3, #0]
 8003784:	2380      	movs	r3, #128	@ 0x80
 8003786:	01db      	lsls	r3, r3, #7
 8003788:	4013      	ands	r3, r2
 800378a:	d015      	beq.n	80037b8 <HAL_PCD_EP_DB_Transmit+0x238>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	001a      	movs	r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	18d3      	adds	r3, r2, r3
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a73      	ldr	r2, [pc, #460]	@ (800396c <HAL_PCD_EP_DB_Transmit+0x3ec>)
 800379e:	4013      	ands	r3, r2
 80037a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	001a      	movs	r2, r3
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	18d3      	adds	r3, r2, r3
 80037b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037b2:	496f      	ldr	r1, [pc, #444]	@ (8003970 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 80037b4:	430a      	orrs	r2, r1
 80037b6:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2224      	movs	r2, #36	@ 0x24
 80037bc:	5c9b      	ldrb	r3, [r3, r2]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d000      	beq.n	80037c4 <HAL_PCD_EP_DB_Transmit+0x244>
 80037c2:	e2c2      	b.n	8003d4a <HAL_PCD_EP_DB_Transmit+0x7ca>
      {
        ep->xfer_buff += TxPctSize;
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	695a      	ldr	r2, [r3, #20]
 80037c8:	211e      	movs	r1, #30
 80037ca:	187b      	adds	r3, r7, r1
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	18d2      	adds	r2, r2, r3
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	69da      	ldr	r2, [r3, #28]
 80037d8:	187b      	adds	r3, r7, r1
 80037da:	881b      	ldrh	r3, [r3, #0]
 80037dc:	18d2      	adds	r2, r2, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	6a1a      	ldr	r2, [r3, #32]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d309      	bcc.n	8003802 <HAL_PCD_EP_DB_Transmit+0x282>
        {
          len = ep->maxpacket;
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_len_db -= len;
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	6a1a      	ldr	r2, [r3, #32]
 80037f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fa:	1ad2      	subs	r2, r2, r3
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	621a      	str	r2, [r3, #32]
 8003800:	e016      	b.n	8003830 <HAL_PCD_EP_DB_Transmit+0x2b0>
        }
        else if (ep->xfer_len_db == 0U)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d108      	bne.n	800381c <HAL_PCD_EP_DB_Transmit+0x29c>
        {
          len = TxPctSize;
 800380a:	231e      	movs	r3, #30
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_fill_db = 0U;
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2224      	movs	r2, #36	@ 0x24
 8003816:	2100      	movs	r1, #0
 8003818:	5499      	strb	r1, [r3, r2]
 800381a:	e009      	b.n	8003830 <HAL_PCD_EP_DB_Transmit+0x2b0>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2224      	movs	r2, #36	@ 0x24
 8003820:	2100      	movs	r1, #0
 8003822:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_len_db = 0U;
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2200      	movs	r2, #0
 800382e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	785b      	ldrb	r3, [r3, #1]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d162      	bne.n	80038fe <HAL_PCD_EP_DB_Transmit+0x37e>
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	4a48      	ldr	r2, [pc, #288]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8003840:	4694      	mov	ip, r2
 8003842:	4463      	add	r3, ip
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	4944      	ldr	r1, [pc, #272]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800384e:	468c      	mov	ip, r1
 8003850:	4463      	add	r3, ip
 8003852:	0192      	lsls	r2, r2, #6
 8003854:	0992      	lsrs	r2, r2, #6
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385a:	2b00      	cmp	r3, #0
 800385c:	d111      	bne.n	8003882 <HAL_PCD_EP_DB_Transmit+0x302>
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	4a3e      	ldr	r2, [pc, #248]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8003866:	4694      	mov	ip, r2
 8003868:	4463      	add	r3, ip
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	493b      	ldr	r1, [pc, #236]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8003874:	468c      	mov	ip, r1
 8003876:	4463      	add	r3, ip
 8003878:	2180      	movs	r1, #128	@ 0x80
 800387a:	0609      	lsls	r1, r1, #24
 800387c:	430a      	orrs	r2, r1
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	e062      	b.n	8003948 <HAL_PCD_EP_DB_Transmit+0x3c8>
 8003882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003884:	2b3e      	cmp	r3, #62	@ 0x3e
 8003886:	d81b      	bhi.n	80038c0 <HAL_PCD_EP_DB_Transmit+0x340>
 8003888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388a:	085b      	lsrs	r3, r3, #1
 800388c:	633b      	str	r3, [r7, #48]	@ 0x30
 800388e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003890:	2201      	movs	r2, #1
 8003892:	4013      	ands	r3, r2
 8003894:	d002      	beq.n	800389c <HAL_PCD_EP_DB_Transmit+0x31c>
 8003896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003898:	3301      	adds	r3, #1
 800389a:	633b      	str	r3, [r7, #48]	@ 0x30
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	4a2f      	ldr	r2, [pc, #188]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80038a4:	4694      	mov	ip, r2
 80038a6:	4463      	add	r3, ip
 80038a8:	6819      	ldr	r1, [r3, #0]
 80038aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ac:	069a      	lsls	r2, r3, #26
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	482a      	ldr	r0, [pc, #168]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80038b6:	4684      	mov	ip, r0
 80038b8:	4463      	add	r3, ip
 80038ba:	430a      	orrs	r2, r1
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	e043      	b.n	8003948 <HAL_PCD_EP_DB_Transmit+0x3c8>
 80038c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c2:	095b      	lsrs	r3, r3, #5
 80038c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80038c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c8:	221f      	movs	r2, #31
 80038ca:	4013      	ands	r3, r2
 80038cc:	d102      	bne.n	80038d4 <HAL_PCD_EP_DB_Transmit+0x354>
 80038ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d0:	3b01      	subs	r3, #1
 80038d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	4a21      	ldr	r2, [pc, #132]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80038dc:	4694      	mov	ip, r2
 80038de:	4463      	add	r3, ip
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e4:	069b      	lsls	r3, r3, #26
 80038e6:	431a      	orrs	r2, r3
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	491c      	ldr	r1, [pc, #112]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80038f0:	468c      	mov	ip, r1
 80038f2:	4463      	add	r3, ip
 80038f4:	2180      	movs	r1, #128	@ 0x80
 80038f6:	0609      	lsls	r1, r1, #24
 80038f8:	430a      	orrs	r2, r1
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	e024      	b.n	8003948 <HAL_PCD_EP_DB_Transmit+0x3c8>
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	785b      	ldrb	r3, [r3, #1]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d120      	bne.n	8003948 <HAL_PCD_EP_DB_Transmit+0x3c8>
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	4a14      	ldr	r2, [pc, #80]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800390e:	4694      	mov	ip, r2
 8003910:	4463      	add	r3, ip
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	4911      	ldr	r1, [pc, #68]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800391c:	468c      	mov	ip, r1
 800391e:	4463      	add	r3, ip
 8003920:	0412      	lsls	r2, r2, #16
 8003922:	0c12      	lsrs	r2, r2, #16
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4a0c      	ldr	r2, [pc, #48]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800392e:	4694      	mov	ip, r2
 8003930:	4463      	add	r3, ip
 8003932:	6819      	ldr	r1, [r3, #0]
 8003934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003936:	041a      	lsls	r2, r3, #16
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4808      	ldr	r0, [pc, #32]	@ (8003960 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8003940:	4684      	mov	ip, r0
 8003942:	4463      	add	r3, ip
 8003944:	430a      	orrs	r2, r1
 8003946:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6818      	ldr	r0, [r3, #0]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	6959      	ldr	r1, [r3, #20]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	891a      	ldrh	r2, [r3, #8]
 8003954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003956:	b29b      	uxth	r3, r3
 8003958:	f004 fd36 	bl	80083c8 <USB_WritePMA>
 800395c:	e1f5      	b.n	8003d4a <HAL_PCD_EP_DB_Transmit+0x7ca>
 800395e:	46c0      	nop			@ (mov r8, r8)
 8003960:	40009800 	.word	0x40009800
 8003964:	07ff8fbf 	.word	0x07ff8fbf
 8003968:	00008080 	.word	0x00008080
 800396c:	07ff8f8f 	.word	0x07ff8f8f
 8003970:	0000c080 	.word	0x0000c080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	251e      	movs	r5, #30
 800397e:	197c      	adds	r4, r7, r5
 8003980:	0019      	movs	r1, r3
 8003982:	0010      	movs	r0, r2
 8003984:	f7fe fcdc 	bl	8002340 <PCD_GET_EP_DBUF1_CNT>
 8003988:	0003      	movs	r3, r0
 800398a:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	699a      	ldr	r2, [r3, #24]
 8003990:	197b      	adds	r3, r7, r5
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d307      	bcc.n	80039a8 <HAL_PCD_EP_DB_Transmit+0x428>
    {
      ep->xfer_len -= TxPctSize;
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	699a      	ldr	r2, [r3, #24]
 800399c:	197b      	adds	r3, r7, r5
 800399e:	881b      	ldrh	r3, [r3, #0]
 80039a0:	1ad2      	subs	r2, r2, r3
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	619a      	str	r2, [r3, #24]
 80039a6:	e002      	b.n	80039ae <HAL_PCD_EP_DB_Transmit+0x42e>
    }
    else
    {
      ep->xfer_len = 0U;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2200      	movs	r2, #0
 80039ac:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d000      	beq.n	80039b8 <HAL_PCD_EP_DB_Transmit+0x438>
 80039b6:	e0d0      	b.n	8003b5a <HAL_PCD_EP_DB_Transmit+0x5da>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	785b      	ldrb	r3, [r3, #1]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d121      	bne.n	8003a04 <HAL_PCD_EP_DB_Transmit+0x484>
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4ac4      	ldr	r2, [pc, #784]	@ (8003cd8 <HAL_PCD_EP_DB_Transmit+0x758>)
 80039c8:	4694      	mov	ip, r2
 80039ca:	4463      	add	r3, ip
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	49c0      	ldr	r1, [pc, #768]	@ (8003cd8 <HAL_PCD_EP_DB_Transmit+0x758>)
 80039d6:	468c      	mov	ip, r1
 80039d8:	4463      	add	r3, ip
 80039da:	0192      	lsls	r2, r2, #6
 80039dc:	0992      	lsrs	r2, r2, #6
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	4abc      	ldr	r2, [pc, #752]	@ (8003cd8 <HAL_PCD_EP_DB_Transmit+0x758>)
 80039e8:	4694      	mov	ip, r2
 80039ea:	4463      	add	r3, ip
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	49b8      	ldr	r1, [pc, #736]	@ (8003cd8 <HAL_PCD_EP_DB_Transmit+0x758>)
 80039f6:	468c      	mov	ip, r1
 80039f8:	4463      	add	r3, ip
 80039fa:	2180      	movs	r1, #128	@ 0x80
 80039fc:	0609      	lsls	r1, r1, #24
 80039fe:	430a      	orrs	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	e020      	b.n	8003a46 <HAL_PCD_EP_DB_Transmit+0x4c6>
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	785b      	ldrb	r3, [r3, #1]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d11c      	bne.n	8003a46 <HAL_PCD_EP_DB_Transmit+0x4c6>
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	4ab1      	ldr	r2, [pc, #708]	@ (8003cd8 <HAL_PCD_EP_DB_Transmit+0x758>)
 8003a14:	4694      	mov	ip, r2
 8003a16:	4463      	add	r3, ip
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	49ad      	ldr	r1, [pc, #692]	@ (8003cd8 <HAL_PCD_EP_DB_Transmit+0x758>)
 8003a22:	468c      	mov	ip, r1
 8003a24:	4463      	add	r3, ip
 8003a26:	0412      	lsls	r2, r2, #16
 8003a28:	0c12      	lsrs	r2, r2, #16
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4aa9      	ldr	r2, [pc, #676]	@ (8003cd8 <HAL_PCD_EP_DB_Transmit+0x758>)
 8003a34:	189a      	adds	r2, r3, r2
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	49a6      	ldr	r1, [pc, #664]	@ (8003cd8 <HAL_PCD_EP_DB_Transmit+0x758>)
 8003a3e:	468c      	mov	ip, r1
 8003a40:	4463      	add	r3, ip
 8003a42:	6812      	ldr	r2, [r2, #0]
 8003a44:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	785b      	ldrb	r3, [r3, #1]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d121      	bne.n	8003a92 <HAL_PCD_EP_DB_Transmit+0x512>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4aa0      	ldr	r2, [pc, #640]	@ (8003cd8 <HAL_PCD_EP_DB_Transmit+0x758>)
 8003a56:	4694      	mov	ip, r2
 8003a58:	4463      	add	r3, ip
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	499d      	ldr	r1, [pc, #628]	@ (8003cd8 <HAL_PCD_EP_DB_Transmit+0x758>)
 8003a64:	468c      	mov	ip, r1
 8003a66:	4463      	add	r3, ip
 8003a68:	0192      	lsls	r2, r2, #6
 8003a6a:	0992      	lsrs	r2, r2, #6
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4a98      	ldr	r2, [pc, #608]	@ (8003cd8 <HAL_PCD_EP_DB_Transmit+0x758>)
 8003a76:	4694      	mov	ip, r2
 8003a78:	4463      	add	r3, ip
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	4995      	ldr	r1, [pc, #596]	@ (8003cd8 <HAL_PCD_EP_DB_Transmit+0x758>)
 8003a84:	468c      	mov	ip, r1
 8003a86:	4463      	add	r3, ip
 8003a88:	2180      	movs	r1, #128	@ 0x80
 8003a8a:	0609      	lsls	r1, r1, #24
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	605a      	str	r2, [r3, #4]
 8003a90:	e020      	b.n	8003ad4 <HAL_PCD_EP_DB_Transmit+0x554>
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	785b      	ldrb	r3, [r3, #1]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d11c      	bne.n	8003ad4 <HAL_PCD_EP_DB_Transmit+0x554>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	4a8d      	ldr	r2, [pc, #564]	@ (8003cd8 <HAL_PCD_EP_DB_Transmit+0x758>)
 8003aa2:	4694      	mov	ip, r2
 8003aa4:	4463      	add	r3, ip
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	498a      	ldr	r1, [pc, #552]	@ (8003cd8 <HAL_PCD_EP_DB_Transmit+0x758>)
 8003ab0:	468c      	mov	ip, r1
 8003ab2:	4463      	add	r3, ip
 8003ab4:	0412      	lsls	r2, r2, #16
 8003ab6:	0c12      	lsrs	r2, r2, #16
 8003ab8:	605a      	str	r2, [r3, #4]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4a85      	ldr	r2, [pc, #532]	@ (8003cd8 <HAL_PCD_EP_DB_Transmit+0x758>)
 8003ac2:	189a      	adds	r2, r3, r2
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4983      	ldr	r1, [pc, #524]	@ (8003cd8 <HAL_PCD_EP_DB_Transmit+0x758>)
 8003acc:	468c      	mov	ip, r1
 8003ace:	4463      	add	r3, ip
 8003ad0:	6852      	ldr	r2, [r2, #4]
 8003ad2:	605a      	str	r2, [r3, #4]

      if (ep->type == EP_TYPE_BULK)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	78db      	ldrb	r3, [r3, #3]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d119      	bne.n	8003b10 <HAL_PCD_EP_DB_Transmit+0x590>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	001a      	movs	r2, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	18d3      	adds	r3, r2, r3
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a7b      	ldr	r2, [pc, #492]	@ (8003cdc <HAL_PCD_EP_DB_Transmit+0x75c>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af4:	2220      	movs	r2, #32
 8003af6:	4053      	eors	r3, r2
 8003af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	001a      	movs	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	18d3      	adds	r3, r2, r3
 8003b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b0a:	4975      	ldr	r1, [pc, #468]	@ (8003ce0 <HAL_PCD_EP_DB_Transmit+0x760>)
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	601a      	str	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	781a      	ldrb	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	0011      	movs	r1, r2
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f005 ffa3 	bl	8009a64 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003b1e:	1dbb      	adds	r3, r7, #6
 8003b20:	881a      	ldrh	r2, [r3, #0]
 8003b22:	2380      	movs	r3, #128	@ 0x80
 8003b24:	01db      	lsls	r3, r3, #7
 8003b26:	4013      	ands	r3, r2
 8003b28:	d115      	bne.n	8003b56 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	001a      	movs	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	18d3      	adds	r3, r2, r3
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a6a      	ldr	r2, [pc, #424]	@ (8003ce4 <HAL_PCD_EP_DB_Transmit+0x764>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	623b      	str	r3, [r7, #32]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	001a      	movs	r2, r3
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	18d3      	adds	r3, r2, r3
 8003b4e:	6a3a      	ldr	r2, [r7, #32]
 8003b50:	4965      	ldr	r1, [pc, #404]	@ (8003ce8 <HAL_PCD_EP_DB_Transmit+0x768>)
 8003b52:	430a      	orrs	r2, r1
 8003b54:	601a      	str	r2, [r3, #0]
      }

      return HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	e116      	b.n	8003d88 <HAL_PCD_EP_DB_Transmit+0x808>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003b5a:	1dbb      	adds	r3, r7, #6
 8003b5c:	881a      	ldrh	r2, [r3, #0]
 8003b5e:	2380      	movs	r3, #128	@ 0x80
 8003b60:	01db      	lsls	r3, r3, #7
 8003b62:	4013      	ands	r3, r2
 8003b64:	d115      	bne.n	8003b92 <HAL_PCD_EP_DB_Transmit+0x612>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	001a      	movs	r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	18d3      	adds	r3, r2, r3
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a5b      	ldr	r2, [pc, #364]	@ (8003ce4 <HAL_PCD_EP_DB_Transmit+0x764>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	001a      	movs	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	18d3      	adds	r3, r2, r3
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4956      	ldr	r1, [pc, #344]	@ (8003ce8 <HAL_PCD_EP_DB_Transmit+0x768>)
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2224      	movs	r2, #36	@ 0x24
 8003b96:	5c9b      	ldrb	r3, [r3, r2]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d000      	beq.n	8003b9e <HAL_PCD_EP_DB_Transmit+0x61e>
 8003b9c:	e0d5      	b.n	8003d4a <HAL_PCD_EP_DB_Transmit+0x7ca>
      {
        ep->xfer_buff += TxPctSize;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	695a      	ldr	r2, [r3, #20]
 8003ba2:	211e      	movs	r1, #30
 8003ba4:	187b      	adds	r3, r7, r1
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	18d2      	adds	r2, r2, r3
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	69da      	ldr	r2, [r3, #28]
 8003bb2:	187b      	adds	r3, r7, r1
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	18d2      	adds	r2, r2, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	6a1a      	ldr	r2, [r3, #32]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d309      	bcc.n	8003bdc <HAL_PCD_EP_DB_Transmit+0x65c>
        {
          len = ep->maxpacket;
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_len_db -= len;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	6a1a      	ldr	r2, [r3, #32]
 8003bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd4:	1ad2      	subs	r2, r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	621a      	str	r2, [r3, #32]
 8003bda:	e016      	b.n	8003c0a <HAL_PCD_EP_DB_Transmit+0x68a>
        }
        else if (ep->xfer_len_db == 0U)
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d108      	bne.n	8003bf6 <HAL_PCD_EP_DB_Transmit+0x676>
        {
          len = TxPctSize;
 8003be4:	231e      	movs	r3, #30
 8003be6:	18fb      	adds	r3, r7, r3
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_fill_db = 0U;
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2224      	movs	r2, #36	@ 0x24
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	5499      	strb	r1, [r3, r2]
 8003bf4:	e009      	b.n	8003c0a <HAL_PCD_EP_DB_Transmit+0x68a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
          ep->xfer_len_db = 0U;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2224      	movs	r2, #36	@ 0x24
 8003c06:	2100      	movs	r1, #0
 8003c08:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	785b      	ldrb	r3, [r3, #1]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d16c      	bne.n	8003cec <HAL_PCD_EP_DB_Transmit+0x76c>
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4a2f      	ldr	r2, [pc, #188]	@ (8003cd8 <HAL_PCD_EP_DB_Transmit+0x758>)
 8003c1a:	4694      	mov	ip, r2
 8003c1c:	4463      	add	r3, ip
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	492c      	ldr	r1, [pc, #176]	@ (8003cd8 <HAL_PCD_EP_DB_Transmit+0x758>)
 8003c28:	468c      	mov	ip, r1
 8003c2a:	4463      	add	r3, ip
 8003c2c:	0192      	lsls	r2, r2, #6
 8003c2e:	0992      	lsrs	r2, r2, #6
 8003c30:	605a      	str	r2, [r3, #4]
 8003c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d111      	bne.n	8003c5c <HAL_PCD_EP_DB_Transmit+0x6dc>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	4a26      	ldr	r2, [pc, #152]	@ (8003cd8 <HAL_PCD_EP_DB_Transmit+0x758>)
 8003c40:	4694      	mov	ip, r2
 8003c42:	4463      	add	r3, ip
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	4922      	ldr	r1, [pc, #136]	@ (8003cd8 <HAL_PCD_EP_DB_Transmit+0x758>)
 8003c4e:	468c      	mov	ip, r1
 8003c50:	4463      	add	r3, ip
 8003c52:	2180      	movs	r1, #128	@ 0x80
 8003c54:	0609      	lsls	r1, r1, #24
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]
 8003c5a:	e06c      	b.n	8003d36 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8003c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c60:	d81b      	bhi.n	8003c9a <HAL_PCD_EP_DB_Transmit+0x71a>
 8003c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c64:	085b      	lsrs	r3, r3, #1
 8003c66:	61bb      	str	r3, [r7, #24]
 8003c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d002      	beq.n	8003c76 <HAL_PCD_EP_DB_Transmit+0x6f6>
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	3301      	adds	r3, #1
 8003c74:	61bb      	str	r3, [r7, #24]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4a16      	ldr	r2, [pc, #88]	@ (8003cd8 <HAL_PCD_EP_DB_Transmit+0x758>)
 8003c7e:	4694      	mov	ip, r2
 8003c80:	4463      	add	r3, ip
 8003c82:	6859      	ldr	r1, [r3, #4]
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	069a      	lsls	r2, r3, #26
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	4812      	ldr	r0, [pc, #72]	@ (8003cd8 <HAL_PCD_EP_DB_Transmit+0x758>)
 8003c90:	4684      	mov	ip, r0
 8003c92:	4463      	add	r3, ip
 8003c94:	430a      	orrs	r2, r1
 8003c96:	605a      	str	r2, [r3, #4]
 8003c98:	e04d      	b.n	8003d36 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8003c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9c:	095b      	lsrs	r3, r3, #5
 8003c9e:	61bb      	str	r3, [r7, #24]
 8003ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca2:	221f      	movs	r2, #31
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d102      	bne.n	8003cae <HAL_PCD_EP_DB_Transmit+0x72e>
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	3b01      	subs	r3, #1
 8003cac:	61bb      	str	r3, [r7, #24]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4a08      	ldr	r2, [pc, #32]	@ (8003cd8 <HAL_PCD_EP_DB_Transmit+0x758>)
 8003cb6:	4694      	mov	ip, r2
 8003cb8:	4463      	add	r3, ip
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	069b      	lsls	r3, r3, #26
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	4903      	ldr	r1, [pc, #12]	@ (8003cd8 <HAL_PCD_EP_DB_Transmit+0x758>)
 8003cca:	468c      	mov	ip, r1
 8003ccc:	4463      	add	r3, ip
 8003cce:	2180      	movs	r1, #128	@ 0x80
 8003cd0:	0609      	lsls	r1, r1, #24
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	605a      	str	r2, [r3, #4]
 8003cd6:	e02e      	b.n	8003d36 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8003cd8:	40009800 	.word	0x40009800
 8003cdc:	07ff8fbf 	.word	0x07ff8fbf
 8003ce0:	00008080 	.word	0x00008080
 8003ce4:	07ff8f8f 	.word	0x07ff8f8f
 8003ce8:	0000c080 	.word	0x0000c080
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	785b      	ldrb	r3, [r3, #1]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d120      	bne.n	8003d36 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	4a25      	ldr	r2, [pc, #148]	@ (8003d90 <HAL_PCD_EP_DB_Transmit+0x810>)
 8003cfc:	4694      	mov	ip, r2
 8003cfe:	4463      	add	r3, ip
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4921      	ldr	r1, [pc, #132]	@ (8003d90 <HAL_PCD_EP_DB_Transmit+0x810>)
 8003d0a:	468c      	mov	ip, r1
 8003d0c:	4463      	add	r3, ip
 8003d0e:	0412      	lsls	r2, r2, #16
 8003d10:	0c12      	lsrs	r2, r2, #16
 8003d12:	605a      	str	r2, [r3, #4]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8003d90 <HAL_PCD_EP_DB_Transmit+0x810>)
 8003d1c:	4694      	mov	ip, r2
 8003d1e:	4463      	add	r3, ip
 8003d20:	6859      	ldr	r1, [r3, #4]
 8003d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d24:	041a      	lsls	r2, r3, #16
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4818      	ldr	r0, [pc, #96]	@ (8003d90 <HAL_PCD_EP_DB_Transmit+0x810>)
 8003d2e:	4684      	mov	ip, r0
 8003d30:	4463      	add	r3, ip
 8003d32:	430a      	orrs	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	6959      	ldr	r1, [r3, #20]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	895a      	ldrh	r2, [r3, #10]
 8003d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	f004 fb3f 	bl	80083c8 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	001a      	movs	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	18d3      	adds	r3, r2, r3
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a0e      	ldr	r2, [pc, #56]	@ (8003d94 <HAL_PCD_EP_DB_Transmit+0x814>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d62:	2210      	movs	r2, #16
 8003d64:	4053      	eors	r3, r2
 8003d66:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	4053      	eors	r3, r2
 8003d6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	001a      	movs	r2, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	18d3      	adds	r3, r2, r3
 8003d7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d80:	4905      	ldr	r1, [pc, #20]	@ (8003d98 <HAL_PCD_EP_DB_Transmit+0x818>)
 8003d82:	430a      	orrs	r2, r1
 8003d84:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	0018      	movs	r0, r3
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b010      	add	sp, #64	@ 0x40
 8003d8e:	bdb0      	pop	{r4, r5, r7, pc}
 8003d90:	40009800 	.word	0x40009800
 8003d94:	07ff8fbf 	.word	0x07ff8fbf
 8003d98:	00008080 	.word	0x00008080

08003d9c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003d9c:	b590      	push	{r4, r7, lr}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	0008      	movs	r0, r1
 8003da6:	0011      	movs	r1, r2
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	240a      	movs	r4, #10
 8003dac:	193b      	adds	r3, r7, r4
 8003dae:	1c02      	adds	r2, r0, #0
 8003db0:	801a      	strh	r2, [r3, #0]
 8003db2:	2308      	movs	r3, #8
 8003db4:	18fb      	adds	r3, r7, r3
 8003db6:	1c0a      	adds	r2, r1, #0
 8003db8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003dba:	0021      	movs	r1, r4
 8003dbc:	187b      	adds	r3, r7, r1
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	2280      	movs	r2, #128	@ 0x80
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00c      	beq.n	8003de4 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dca:	187b      	adds	r3, r7, r1
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	2207      	movs	r2, #7
 8003dd0:	401a      	ands	r2, r3
 8003dd2:	0013      	movs	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	189b      	adds	r3, r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	3310      	adds	r3, #16
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	18d3      	adds	r3, r2, r3
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	e00b      	b.n	8003dfc <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003de4:	230a      	movs	r3, #10
 8003de6:	18fb      	adds	r3, r7, r3
 8003de8:	881a      	ldrh	r2, [r3, #0]
 8003dea:	0013      	movs	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	189b      	adds	r3, r3, r2
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	3351      	adds	r3, #81	@ 0x51
 8003df4:	33ff      	adds	r3, #255	@ 0xff
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	18d3      	adds	r3, r2, r3
 8003dfa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003dfc:	2308      	movs	r3, #8
 8003dfe:	18fb      	adds	r3, r7, r3
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d107      	bne.n	8003e16 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	80da      	strh	r2, [r3, #6]
 8003e14:	e00b      	b.n	8003e2e <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	0c1b      	lsrs	r3, r3, #16
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	0018      	movs	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	b007      	add	sp, #28
 8003e36:	bd90      	pop	{r4, r7, pc}

08003e38 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	23b4      	movs	r3, #180	@ 0xb4
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	23b2      	movs	r3, #178	@ 0xb2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	2100      	movs	r1, #0
 8003e58:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e5e:	2201      	movs	r2, #1
 8003e60:	431a      	orrs	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	0018      	movs	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b004      	add	sp, #16
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	000a      	movs	r2, r1
 8003e86:	1cfb      	adds	r3, r7, #3
 8003e88:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003e8a:	46c0      	nop			@ (mov r8, r8)
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b002      	add	sp, #8
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	2380      	movs	r3, #128	@ 0x80
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d137      	bne.n	8003f16 <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ea6:	4b27      	ldr	r3, [pc, #156]	@ (8003f44 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	23c0      	movs	r3, #192	@ 0xc0
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	401a      	ands	r2, r3
 8003eb0:	2380      	movs	r3, #128	@ 0x80
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d040      	beq.n	8003f3a <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003eb8:	4b22      	ldr	r3, [pc, #136]	@ (8003f44 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a22      	ldr	r2, [pc, #136]	@ (8003f48 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003ebe:	401a      	ands	r2, r3
 8003ec0:	4b20      	ldr	r3, [pc, #128]	@ (8003f44 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003ec2:	2180      	movs	r1, #128	@ 0x80
 8003ec4:	0089      	lsls	r1, r1, #2
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003eca:	4b20      	ldr	r3, [pc, #128]	@ (8003f4c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2232      	movs	r2, #50	@ 0x32
 8003ed0:	4353      	muls	r3, r2
 8003ed2:	491f      	ldr	r1, [pc, #124]	@ (8003f50 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f7fc f929 	bl	800012c <__udivsi3>
 8003eda:	0003      	movs	r3, r0
 8003edc:	3301      	adds	r3, #1
 8003ede:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ee0:	e002      	b.n	8003ee8 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ee8:	4b16      	ldr	r3, [pc, #88]	@ (8003f44 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003eea:	695a      	ldr	r2, [r3, #20]
 8003eec:	2380      	movs	r3, #128	@ 0x80
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	401a      	ands	r2, r3
 8003ef2:	2380      	movs	r3, #128	@ 0x80
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d102      	bne.n	8003f00 <HAL_PWREx_ControlVoltageScaling+0x6c>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1f0      	bne.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f00:	4b10      	ldr	r3, [pc, #64]	@ (8003f44 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003f02:	695a      	ldr	r2, [r3, #20]
 8003f04:	2380      	movs	r3, #128	@ 0x80
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	401a      	ands	r2, r3
 8003f0a:	2380      	movs	r3, #128	@ 0x80
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d113      	bne.n	8003f3a <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e012      	b.n	8003f3c <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f16:	4b0b      	ldr	r3, [pc, #44]	@ (8003f44 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	23c0      	movs	r3, #192	@ 0xc0
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	401a      	ands	r2, r3
 8003f20:	2380      	movs	r3, #128	@ 0x80
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d008      	beq.n	8003f3a <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f28:	4b06      	ldr	r3, [pc, #24]	@ (8003f44 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a06      	ldr	r2, [pc, #24]	@ (8003f48 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003f2e:	401a      	ands	r2, r3
 8003f30:	4b04      	ldr	r3, [pc, #16]	@ (8003f44 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003f32:	2180      	movs	r1, #128	@ 0x80
 8003f34:	00c9      	lsls	r1, r1, #3
 8003f36:	430a      	orrs	r2, r1
 8003f38:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b004      	add	sp, #16
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40007000 	.word	0x40007000
 8003f48:	fffff9ff 	.word	0xfffff9ff
 8003f4c:	2000003c 	.word	0x2000003c
 8003f50:	000f4240 	.word	0x000f4240

08003f54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003f58:	4b03      	ldr	r3, [pc, #12]	@ (8003f68 <HAL_PWREx_GetVoltageRange+0x14>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	23c0      	movs	r3, #192	@ 0xc0
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	4013      	ands	r3, r2
}
 8003f62:	0018      	movs	r0, r3
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40007000 	.word	0x40007000

08003f6c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003f70:	4b04      	ldr	r3, [pc, #16]	@ (8003f84 <HAL_PWREx_EnableVddUSB+0x18>)
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	4b03      	ldr	r3, [pc, #12]	@ (8003f84 <HAL_PWREx_EnableVddUSB+0x18>)
 8003f76:	2180      	movs	r1, #128	@ 0x80
 8003f78:	00c9      	lsls	r1, r1, #3
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	605a      	str	r2, [r3, #4]
}
 8003f7e:	46c0      	nop			@ (mov r8, r8)
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40007000 	.word	0x40007000

08003f88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f88:	b5b0      	push	{r4, r5, r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f90:	4bc9      	ldr	r3, [pc, #804]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2238      	movs	r2, #56	@ 0x38
 8003f96:	4013      	ands	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f9a:	4bc7      	ldr	r3, [pc, #796]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	2203      	movs	r2, #3
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2210      	movs	r2, #16
 8003faa:	4013      	ands	r3, r2
 8003fac:	d100      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x28>
 8003fae:	e0ef      	b.n	8004190 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d007      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x3e>
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	2b18      	cmp	r3, #24
 8003fba:	d000      	beq.n	8003fbe <HAL_RCC_OscConfig+0x36>
 8003fbc:	e093      	b.n	80040e6 <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d000      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x3e>
 8003fc4:	e08f      	b.n	80040e6 <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fc6:	4bbc      	ldr	r3, [pc, #752]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d006      	beq.n	8003fde <HAL_RCC_OscConfig+0x56>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d102      	bne.n	8003fde <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	f000 fbf2 	bl	80047c2 <HAL_RCC_OscConfig+0x83a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fe2:	4bb5      	ldr	r3, [pc, #724]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2108      	movs	r1, #8
 8003fe8:	400b      	ands	r3, r1
 8003fea:	d004      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x6e>
 8003fec:	4bb2      	ldr	r3, [pc, #712]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	21f0      	movs	r1, #240	@ 0xf0
 8003ff2:	400b      	ands	r3, r1
 8003ff4:	e005      	b.n	8004002 <HAL_RCC_OscConfig+0x7a>
 8003ff6:	49b0      	ldr	r1, [pc, #704]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 8003ff8:	2394      	movs	r3, #148	@ 0x94
 8003ffa:	58cb      	ldr	r3, [r1, r3]
 8003ffc:	091b      	lsrs	r3, r3, #4
 8003ffe:	21f0      	movs	r1, #240	@ 0xf0
 8004000:	400b      	ands	r3, r1
 8004002:	4293      	cmp	r3, r2
 8004004:	d225      	bcs.n	8004052 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400a:	0018      	movs	r0, r3
 800400c:	f000 fd90 	bl	8004b30 <RCC_SetFlashLatencyFromMSIRange>
 8004010:	1e03      	subs	r3, r0, #0
 8004012:	d002      	beq.n	800401a <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	f000 fbd4 	bl	80047c2 <HAL_RCC_OscConfig+0x83a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800401a:	4ba7      	ldr	r3, [pc, #668]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4ba6      	ldr	r3, [pc, #664]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 8004020:	2108      	movs	r1, #8
 8004022:	430a      	orrs	r2, r1
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	4ba4      	ldr	r3, [pc, #656]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	22f0      	movs	r2, #240	@ 0xf0
 800402c:	4393      	bics	r3, r2
 800402e:	0019      	movs	r1, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004034:	4ba0      	ldr	r3, [pc, #640]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 8004036:	430a      	orrs	r2, r1
 8004038:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800403a:	4b9f      	ldr	r3, [pc, #636]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	4a9f      	ldr	r2, [pc, #636]	@ (80042bc <HAL_RCC_OscConfig+0x334>)
 8004040:	4013      	ands	r3, r2
 8004042:	0019      	movs	r1, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	021a      	lsls	r2, r3, #8
 800404a:	4b9b      	ldr	r3, [pc, #620]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 800404c:	430a      	orrs	r2, r1
 800404e:	605a      	str	r2, [r3, #4]
 8004050:	e027      	b.n	80040a2 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004052:	4b99      	ldr	r3, [pc, #612]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	4b98      	ldr	r3, [pc, #608]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 8004058:	2108      	movs	r1, #8
 800405a:	430a      	orrs	r2, r1
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	4b96      	ldr	r3, [pc, #600]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	22f0      	movs	r2, #240	@ 0xf0
 8004064:	4393      	bics	r3, r2
 8004066:	0019      	movs	r1, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800406c:	4b92      	ldr	r3, [pc, #584]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 800406e:	430a      	orrs	r2, r1
 8004070:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004072:	4b91      	ldr	r3, [pc, #580]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4a91      	ldr	r2, [pc, #580]	@ (80042bc <HAL_RCC_OscConfig+0x334>)
 8004078:	4013      	ands	r3, r2
 800407a:	0019      	movs	r1, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	021a      	lsls	r2, r3, #8
 8004082:	4b8d      	ldr	r3, [pc, #564]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 8004084:	430a      	orrs	r2, r1
 8004086:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d109      	bne.n	80040a2 <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004092:	0018      	movs	r0, r3
 8004094:	f000 fd4c 	bl	8004b30 <RCC_SetFlashLatencyFromMSIRange>
 8004098:	1e03      	subs	r3, r0, #0
 800409a:	d002      	beq.n	80040a2 <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	f000 fb90 	bl	80047c2 <HAL_RCC_OscConfig+0x83a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80040a2:	f000 fc87 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 80040a6:	0001      	movs	r1, r0
 80040a8:	4b83      	ldr	r3, [pc, #524]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 80040aa:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040ac:	0a1b      	lsrs	r3, r3, #8
 80040ae:	220f      	movs	r2, #15
 80040b0:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80040b2:	4a83      	ldr	r2, [pc, #524]	@ (80042c0 <HAL_RCC_OscConfig+0x338>)
 80040b4:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040b6:	001a      	movs	r2, r3
 80040b8:	231f      	movs	r3, #31
 80040ba:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80040bc:	000a      	movs	r2, r1
 80040be:	40da      	lsrs	r2, r3
 80040c0:	4b80      	ldr	r3, [pc, #512]	@ (80042c4 <HAL_RCC_OscConfig+0x33c>)
 80040c2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80040c4:	4b80      	ldr	r3, [pc, #512]	@ (80042c8 <HAL_RCC_OscConfig+0x340>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	250f      	movs	r5, #15
 80040ca:	197c      	adds	r4, r7, r5
 80040cc:	0018      	movs	r0, r3
 80040ce:	f7fd fe03 	bl	8001cd8 <HAL_InitTick>
 80040d2:	0003      	movs	r3, r0
 80040d4:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 80040d6:	197b      	adds	r3, r7, r5
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d057      	beq.n	800418e <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80040de:	197b      	adds	r3, r7, r5
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	f000 fb6e 	bl	80047c2 <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d035      	beq.n	800415a <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040ee:	4b72      	ldr	r3, [pc, #456]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	4b71      	ldr	r3, [pc, #452]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 80040f4:	2101      	movs	r1, #1
 80040f6:	430a      	orrs	r2, r1
 80040f8:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040fa:	f7fd fe47 	bl	8001d8c <HAL_GetTick>
 80040fe:	0003      	movs	r3, r0
 8004100:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004102:	e009      	b.n	8004118 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8004104:	f7fd fe42 	bl	8001d8c <HAL_GetTick>
 8004108:	0002      	movs	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d902      	bls.n	8004118 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	f000 fb55 	bl	80047c2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004118:	4b67      	ldr	r3, [pc, #412]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2202      	movs	r2, #2
 800411e:	4013      	ands	r3, r2
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004122:	4b65      	ldr	r3, [pc, #404]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	4b64      	ldr	r3, [pc, #400]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 8004128:	2108      	movs	r1, #8
 800412a:	430a      	orrs	r2, r1
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	4b62      	ldr	r3, [pc, #392]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	22f0      	movs	r2, #240	@ 0xf0
 8004134:	4393      	bics	r3, r2
 8004136:	0019      	movs	r1, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800413c:	4b5e      	ldr	r3, [pc, #376]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 800413e:	430a      	orrs	r2, r1
 8004140:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004142:	4b5d      	ldr	r3, [pc, #372]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4a5d      	ldr	r2, [pc, #372]	@ (80042bc <HAL_RCC_OscConfig+0x334>)
 8004148:	4013      	ands	r3, r2
 800414a:	0019      	movs	r1, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	021a      	lsls	r2, r3, #8
 8004152:	4b59      	ldr	r3, [pc, #356]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 8004154:	430a      	orrs	r2, r1
 8004156:	605a      	str	r2, [r3, #4]
 8004158:	e01a      	b.n	8004190 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800415a:	4b57      	ldr	r3, [pc, #348]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	4b56      	ldr	r3, [pc, #344]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 8004160:	2101      	movs	r1, #1
 8004162:	438a      	bics	r2, r1
 8004164:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004166:	f7fd fe11 	bl	8001d8c <HAL_GetTick>
 800416a:	0003      	movs	r3, r0
 800416c:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8004170:	f7fd fe0c 	bl	8001d8c <HAL_GetTick>
 8004174:	0002      	movs	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x1fa>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e31f      	b.n	80047c2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004182:	4b4d      	ldr	r3, [pc, #308]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2202      	movs	r2, #2
 8004188:	4013      	ands	r3, r2
 800418a:	d1f1      	bne.n	8004170 <HAL_RCC_OscConfig+0x1e8>
 800418c:	e000      	b.n	8004190 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800418e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2201      	movs	r2, #1
 8004196:	4013      	ands	r3, r2
 8004198:	d100      	bne.n	800419c <HAL_RCC_OscConfig+0x214>
 800419a:	e065      	b.n	8004268 <HAL_RCC_OscConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	2b10      	cmp	r3, #16
 80041a0:	d005      	beq.n	80041ae <HAL_RCC_OscConfig+0x226>
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	2b18      	cmp	r3, #24
 80041a6:	d10e      	bne.n	80041c6 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	d10b      	bne.n	80041c6 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ae:	4b42      	ldr	r3, [pc, #264]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	2380      	movs	r3, #128	@ 0x80
 80041b4:	029b      	lsls	r3, r3, #10
 80041b6:	4013      	ands	r3, r2
 80041b8:	d055      	beq.n	8004266 <HAL_RCC_OscConfig+0x2de>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d151      	bne.n	8004266 <HAL_RCC_OscConfig+0x2de>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e2fd      	b.n	80047c2 <HAL_RCC_OscConfig+0x83a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	2380      	movs	r3, #128	@ 0x80
 80041cc:	025b      	lsls	r3, r3, #9
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d107      	bne.n	80041e2 <HAL_RCC_OscConfig+0x25a>
 80041d2:	4b39      	ldr	r3, [pc, #228]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	4b38      	ldr	r3, [pc, #224]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 80041d8:	2180      	movs	r1, #128	@ 0x80
 80041da:	0249      	lsls	r1, r1, #9
 80041dc:	430a      	orrs	r2, r1
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	e013      	b.n	800420a <HAL_RCC_OscConfig+0x282>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	23a0      	movs	r3, #160	@ 0xa0
 80041e8:	02db      	lsls	r3, r3, #11
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d107      	bne.n	80041fe <HAL_RCC_OscConfig+0x276>
 80041ee:	4b32      	ldr	r3, [pc, #200]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	4b31      	ldr	r3, [pc, #196]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 80041f4:	21a0      	movs	r1, #160	@ 0xa0
 80041f6:	02c9      	lsls	r1, r1, #11
 80041f8:	430a      	orrs	r2, r1
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	e005      	b.n	800420a <HAL_RCC_OscConfig+0x282>
 80041fe:	4b2e      	ldr	r3, [pc, #184]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4b2d      	ldr	r3, [pc, #180]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 8004204:	4931      	ldr	r1, [pc, #196]	@ (80042cc <HAL_RCC_OscConfig+0x344>)
 8004206:	400a      	ands	r2, r1
 8004208:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d014      	beq.n	800423c <HAL_RCC_OscConfig+0x2b4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004212:	f7fd fdbb 	bl	8001d8c <HAL_GetTick>
 8004216:	0003      	movs	r3, r0
 8004218:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800421c:	f7fd fdb6 	bl	8001d8c <HAL_GetTick>
 8004220:	0002      	movs	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b64      	cmp	r3, #100	@ 0x64
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e2c9      	b.n	80047c2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800422e:	4b22      	ldr	r3, [pc, #136]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	2380      	movs	r3, #128	@ 0x80
 8004234:	029b      	lsls	r3, r3, #10
 8004236:	4013      	ands	r3, r2
 8004238:	d0f0      	beq.n	800421c <HAL_RCC_OscConfig+0x294>
 800423a:	e015      	b.n	8004268 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423c:	f7fd fda6 	bl	8001d8c <HAL_GetTick>
 8004240:	0003      	movs	r3, r0
 8004242:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x2d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004246:	f7fd fda1 	bl	8001d8c <HAL_GetTick>
 800424a:	0002      	movs	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b64      	cmp	r3, #100	@ 0x64
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x2d0>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e2b4      	b.n	80047c2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004258:	4b17      	ldr	r3, [pc, #92]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	2380      	movs	r3, #128	@ 0x80
 800425e:	029b      	lsls	r3, r3, #10
 8004260:	4013      	ands	r3, r2
 8004262:	d1f0      	bne.n	8004246 <HAL_RCC_OscConfig+0x2be>
 8004264:	e000      	b.n	8004268 <HAL_RCC_OscConfig+0x2e0>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004266:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2202      	movs	r2, #2
 800426e:	4013      	ands	r3, r2
 8004270:	d100      	bne.n	8004274 <HAL_RCC_OscConfig+0x2ec>
 8004272:	e074      	b.n	800435e <HAL_RCC_OscConfig+0x3d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	2b08      	cmp	r3, #8
 8004278:	d005      	beq.n	8004286 <HAL_RCC_OscConfig+0x2fe>
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	2b18      	cmp	r3, #24
 800427e:	d129      	bne.n	80042d4 <HAL_RCC_OscConfig+0x34c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2b02      	cmp	r3, #2
 8004284:	d126      	bne.n	80042d4 <HAL_RCC_OscConfig+0x34c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004286:	4b0c      	ldr	r3, [pc, #48]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	2380      	movs	r3, #128	@ 0x80
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	4013      	ands	r3, r2
 8004290:	d005      	beq.n	800429e <HAL_RCC_OscConfig+0x316>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_RCC_OscConfig+0x316>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e291      	b.n	80047c2 <HAL_RCC_OscConfig+0x83a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800429e:	4b06      	ldr	r3, [pc, #24]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	4a0b      	ldr	r2, [pc, #44]	@ (80042d0 <HAL_RCC_OscConfig+0x348>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	0019      	movs	r1, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	061a      	lsls	r2, r3, #24
 80042ae:	4b02      	ldr	r3, [pc, #8]	@ (80042b8 <HAL_RCC_OscConfig+0x330>)
 80042b0:	430a      	orrs	r2, r1
 80042b2:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042b4:	e053      	b.n	800435e <HAL_RCC_OscConfig+0x3d6>
 80042b6:	46c0      	nop			@ (mov r8, r8)
 80042b8:	40021000 	.word	0x40021000
 80042bc:	ffff00ff 	.word	0xffff00ff
 80042c0:	0800d094 	.word	0x0800d094
 80042c4:	2000003c 	.word	0x2000003c
 80042c8:	20000040 	.word	0x20000040
 80042cc:	fffaffff 	.word	0xfffaffff
 80042d0:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d026      	beq.n	800432a <HAL_RCC_OscConfig+0x3a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042dc:	4bc7      	ldr	r3, [pc, #796]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	4bc6      	ldr	r3, [pc, #792]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 80042e2:	2180      	movs	r1, #128	@ 0x80
 80042e4:	0049      	lsls	r1, r1, #1
 80042e6:	430a      	orrs	r2, r1
 80042e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ea:	f7fd fd4f 	bl	8001d8c <HAL_GetTick>
 80042ee:	0003      	movs	r3, r0
 80042f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x37e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80042f4:	f7fd fd4a 	bl	8001d8c <HAL_GetTick>
 80042f8:	0002      	movs	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x37e>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e25d      	b.n	80047c2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004306:	4bbd      	ldr	r3, [pc, #756]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	2380      	movs	r3, #128	@ 0x80
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4013      	ands	r3, r2
 8004310:	d0f0      	beq.n	80042f4 <HAL_RCC_OscConfig+0x36c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004312:	4bba      	ldr	r3, [pc, #744]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	4aba      	ldr	r2, [pc, #744]	@ (8004600 <HAL_RCC_OscConfig+0x678>)
 8004318:	4013      	ands	r3, r2
 800431a:	0019      	movs	r1, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	061a      	lsls	r2, r3, #24
 8004322:	4bb6      	ldr	r3, [pc, #728]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 8004324:	430a      	orrs	r2, r1
 8004326:	605a      	str	r2, [r3, #4]
 8004328:	e019      	b.n	800435e <HAL_RCC_OscConfig+0x3d6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800432a:	4bb4      	ldr	r3, [pc, #720]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	4bb3      	ldr	r3, [pc, #716]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 8004330:	49b4      	ldr	r1, [pc, #720]	@ (8004604 <HAL_RCC_OscConfig+0x67c>)
 8004332:	400a      	ands	r2, r1
 8004334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004336:	f7fd fd29 	bl	8001d8c <HAL_GetTick>
 800433a:	0003      	movs	r3, r0
 800433c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x3ca>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004340:	f7fd fd24 	bl	8001d8c <HAL_GetTick>
 8004344:	0002      	movs	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x3ca>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e237      	b.n	80047c2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004352:	4baa      	ldr	r3, [pc, #680]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	2380      	movs	r3, #128	@ 0x80
 8004358:	00db      	lsls	r3, r3, #3
 800435a:	4013      	ands	r3, r2
 800435c:	d1f0      	bne.n	8004340 <HAL_RCC_OscConfig+0x3b8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2208      	movs	r2, #8
 8004364:	4013      	ands	r3, r2
 8004366:	d051      	beq.n	800440c <HAL_RCC_OscConfig+0x484>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d031      	beq.n	80043d4 <HAL_RCC_OscConfig+0x44c>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d108      	bne.n	800438a <HAL_RCC_OscConfig+0x402>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8004378:	4aa0      	ldr	r2, [pc, #640]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 800437a:	2394      	movs	r3, #148	@ 0x94
 800437c:	58d3      	ldr	r3, [r2, r3]
 800437e:	499f      	ldr	r1, [pc, #636]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 8004380:	2204      	movs	r2, #4
 8004382:	4393      	bics	r3, r2
 8004384:	2294      	movs	r2, #148	@ 0x94
 8004386:	508b      	str	r3, [r1, r2]
 8004388:	e007      	b.n	800439a <HAL_RCC_OscConfig+0x412>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 800438a:	4a9c      	ldr	r2, [pc, #624]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 800438c:	2394      	movs	r3, #148	@ 0x94
 800438e:	58d3      	ldr	r3, [r2, r3]
 8004390:	499a      	ldr	r1, [pc, #616]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 8004392:	2204      	movs	r2, #4
 8004394:	4313      	orrs	r3, r2
 8004396:	2294      	movs	r2, #148	@ 0x94
 8004398:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800439a:	4a98      	ldr	r2, [pc, #608]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 800439c:	2394      	movs	r3, #148	@ 0x94
 800439e:	58d3      	ldr	r3, [r2, r3]
 80043a0:	4996      	ldr	r1, [pc, #600]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	4313      	orrs	r3, r2
 80043a6:	2294      	movs	r2, #148	@ 0x94
 80043a8:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043aa:	f7fd fcef 	bl	8001d8c <HAL_GetTick>
 80043ae:	0003      	movs	r3, r0
 80043b0:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x43e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043b4:	f7fd fcea 	bl	8001d8c <HAL_GetTick>
 80043b8:	0002      	movs	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b11      	cmp	r3, #17
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e1fd      	b.n	80047c2 <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043c6:	4a8d      	ldr	r2, [pc, #564]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 80043c8:	2394      	movs	r3, #148	@ 0x94
 80043ca:	58d3      	ldr	r3, [r2, r3]
 80043cc:	2202      	movs	r2, #2
 80043ce:	4013      	ands	r3, r2
 80043d0:	d0f0      	beq.n	80043b4 <HAL_RCC_OscConfig+0x42c>
 80043d2:	e01b      	b.n	800440c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043d4:	4a89      	ldr	r2, [pc, #548]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 80043d6:	2394      	movs	r3, #148	@ 0x94
 80043d8:	58d3      	ldr	r3, [r2, r3]
 80043da:	4988      	ldr	r1, [pc, #544]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 80043dc:	2201      	movs	r2, #1
 80043de:	4393      	bics	r3, r2
 80043e0:	2294      	movs	r2, #148	@ 0x94
 80043e2:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e4:	f7fd fcd2 	bl	8001d8c <HAL_GetTick>
 80043e8:	0003      	movs	r3, r0
 80043ea:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ee:	f7fd fccd 	bl	8001d8c <HAL_GetTick>
 80043f2:	0002      	movs	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b11      	cmp	r3, #17
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e1e0      	b.n	80047c2 <HAL_RCC_OscConfig+0x83a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004400:	4a7e      	ldr	r2, [pc, #504]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 8004402:	2394      	movs	r3, #148	@ 0x94
 8004404:	58d3      	ldr	r3, [r2, r3]
 8004406:	2202      	movs	r2, #2
 8004408:	4013      	ands	r3, r2
 800440a:	d1f0      	bne.n	80043ee <HAL_RCC_OscConfig+0x466>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2204      	movs	r2, #4
 8004412:	4013      	ands	r3, r2
 8004414:	d100      	bne.n	8004418 <HAL_RCC_OscConfig+0x490>
 8004416:	e10d      	b.n	8004634 <HAL_RCC_OscConfig+0x6ac>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004418:	201f      	movs	r0, #31
 800441a:	183b      	adds	r3, r7, r0
 800441c:	2200      	movs	r2, #0
 800441e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8004420:	4b76      	ldr	r3, [pc, #472]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 8004422:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004424:	2380      	movs	r3, #128	@ 0x80
 8004426:	055b      	lsls	r3, r3, #21
 8004428:	4013      	ands	r3, r2
 800442a:	d110      	bne.n	800444e <HAL_RCC_OscConfig+0x4c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800442c:	4b73      	ldr	r3, [pc, #460]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 800442e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004430:	4b72      	ldr	r3, [pc, #456]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 8004432:	2180      	movs	r1, #128	@ 0x80
 8004434:	0549      	lsls	r1, r1, #21
 8004436:	430a      	orrs	r2, r1
 8004438:	659a      	str	r2, [r3, #88]	@ 0x58
 800443a:	4b70      	ldr	r3, [pc, #448]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 800443c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800443e:	2380      	movs	r3, #128	@ 0x80
 8004440:	055b      	lsls	r3, r3, #21
 8004442:	4013      	ands	r3, r2
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004448:	183b      	adds	r3, r7, r0
 800444a:	2201      	movs	r2, #1
 800444c:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800444e:	4b6e      	ldr	r3, [pc, #440]	@ (8004608 <HAL_RCC_OscConfig+0x680>)
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	2380      	movs	r3, #128	@ 0x80
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	4013      	ands	r3, r2
 8004458:	d11a      	bne.n	8004490 <HAL_RCC_OscConfig+0x508>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800445a:	4b6b      	ldr	r3, [pc, #428]	@ (8004608 <HAL_RCC_OscConfig+0x680>)
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	4b6a      	ldr	r3, [pc, #424]	@ (8004608 <HAL_RCC_OscConfig+0x680>)
 8004460:	2180      	movs	r1, #128	@ 0x80
 8004462:	0049      	lsls	r1, r1, #1
 8004464:	430a      	orrs	r2, r1
 8004466:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004468:	f7fd fc90 	bl	8001d8c <HAL_GetTick>
 800446c:	0003      	movs	r3, r0
 800446e:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004472:	f7fd fc8b 	bl	8001d8c <HAL_GetTick>
 8004476:	0002      	movs	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e19e      	b.n	80047c2 <HAL_RCC_OscConfig+0x83a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004484:	4b60      	ldr	r3, [pc, #384]	@ (8004608 <HAL_RCC_OscConfig+0x680>)
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	2380      	movs	r3, #128	@ 0x80
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	4013      	ands	r3, r2
 800448e:	d0f0      	beq.n	8004472 <HAL_RCC_OscConfig+0x4ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2201      	movs	r2, #1
 8004496:	4013      	ands	r3, r2
 8004498:	d01e      	beq.n	80044d8 <HAL_RCC_OscConfig+0x550>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	2204      	movs	r2, #4
 80044a0:	4013      	ands	r3, r2
 80044a2:	d010      	beq.n	80044c6 <HAL_RCC_OscConfig+0x53e>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80044a4:	4a55      	ldr	r2, [pc, #340]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 80044a6:	2390      	movs	r3, #144	@ 0x90
 80044a8:	58d3      	ldr	r3, [r2, r3]
 80044aa:	4954      	ldr	r1, [pc, #336]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 80044ac:	2204      	movs	r2, #4
 80044ae:	4313      	orrs	r3, r2
 80044b0:	2290      	movs	r2, #144	@ 0x90
 80044b2:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80044b4:	4a51      	ldr	r2, [pc, #324]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 80044b6:	2390      	movs	r3, #144	@ 0x90
 80044b8:	58d3      	ldr	r3, [r2, r3]
 80044ba:	4950      	ldr	r1, [pc, #320]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 80044bc:	2201      	movs	r2, #1
 80044be:	4313      	orrs	r3, r2
 80044c0:	2290      	movs	r2, #144	@ 0x90
 80044c2:	508b      	str	r3, [r1, r2]
 80044c4:	e018      	b.n	80044f8 <HAL_RCC_OscConfig+0x570>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80044c6:	4a4d      	ldr	r2, [pc, #308]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 80044c8:	2390      	movs	r3, #144	@ 0x90
 80044ca:	58d3      	ldr	r3, [r2, r3]
 80044cc:	494b      	ldr	r1, [pc, #300]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 80044ce:	2201      	movs	r2, #1
 80044d0:	4313      	orrs	r3, r2
 80044d2:	2290      	movs	r2, #144	@ 0x90
 80044d4:	508b      	str	r3, [r1, r2]
 80044d6:	e00f      	b.n	80044f8 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80044d8:	4a48      	ldr	r2, [pc, #288]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 80044da:	2390      	movs	r3, #144	@ 0x90
 80044dc:	58d3      	ldr	r3, [r2, r3]
 80044de:	4947      	ldr	r1, [pc, #284]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 80044e0:	2201      	movs	r2, #1
 80044e2:	4393      	bics	r3, r2
 80044e4:	2290      	movs	r2, #144	@ 0x90
 80044e6:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80044e8:	4a44      	ldr	r2, [pc, #272]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 80044ea:	2390      	movs	r3, #144	@ 0x90
 80044ec:	58d3      	ldr	r3, [r2, r3]
 80044ee:	4943      	ldr	r1, [pc, #268]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 80044f0:	2204      	movs	r2, #4
 80044f2:	4393      	bics	r3, r2
 80044f4:	2290      	movs	r2, #144	@ 0x90
 80044f6:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d04f      	beq.n	80045a0 <HAL_RCC_OscConfig+0x618>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004500:	f7fd fc44 	bl	8001d8c <HAL_GetTick>
 8004504:	0003      	movs	r3, r0
 8004506:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004508:	e009      	b.n	800451e <HAL_RCC_OscConfig+0x596>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800450a:	f7fd fc3f 	bl	8001d8c <HAL_GetTick>
 800450e:	0002      	movs	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	4a3d      	ldr	r2, [pc, #244]	@ (800460c <HAL_RCC_OscConfig+0x684>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x596>
        {
          return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e151      	b.n	80047c2 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800451e:	4a37      	ldr	r2, [pc, #220]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 8004520:	2390      	movs	r3, #144	@ 0x90
 8004522:	58d3      	ldr	r3, [r2, r3]
 8004524:	2202      	movs	r2, #2
 8004526:	4013      	ands	r3, r2
 8004528:	d0ef      	beq.n	800450a <HAL_RCC_OscConfig+0x582>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	2280      	movs	r2, #128	@ 0x80
 8004530:	4013      	ands	r3, r2
 8004532:	d01a      	beq.n	800456a <HAL_RCC_OscConfig+0x5e2>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004534:	4a31      	ldr	r2, [pc, #196]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 8004536:	2390      	movs	r3, #144	@ 0x90
 8004538:	58d3      	ldr	r3, [r2, r3]
 800453a:	4930      	ldr	r1, [pc, #192]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 800453c:	2280      	movs	r2, #128	@ 0x80
 800453e:	4313      	orrs	r3, r2
 8004540:	2290      	movs	r2, #144	@ 0x90
 8004542:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004544:	e009      	b.n	800455a <HAL_RCC_OscConfig+0x5d2>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004546:	f7fd fc21 	bl	8001d8c <HAL_GetTick>
 800454a:	0002      	movs	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	4a2e      	ldr	r2, [pc, #184]	@ (800460c <HAL_RCC_OscConfig+0x684>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x5d2>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e133      	b.n	80047c2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800455a:	4a28      	ldr	r2, [pc, #160]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 800455c:	2390      	movs	r3, #144	@ 0x90
 800455e:	58d2      	ldr	r2, [r2, r3]
 8004560:	2380      	movs	r3, #128	@ 0x80
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	4013      	ands	r3, r2
 8004566:	d0ee      	beq.n	8004546 <HAL_RCC_OscConfig+0x5be>
 8004568:	e059      	b.n	800461e <HAL_RCC_OscConfig+0x696>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800456a:	4a24      	ldr	r2, [pc, #144]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 800456c:	2390      	movs	r3, #144	@ 0x90
 800456e:	58d3      	ldr	r3, [r2, r3]
 8004570:	4922      	ldr	r1, [pc, #136]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 8004572:	2280      	movs	r2, #128	@ 0x80
 8004574:	4393      	bics	r3, r2
 8004576:	2290      	movs	r2, #144	@ 0x90
 8004578:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800457a:	e009      	b.n	8004590 <HAL_RCC_OscConfig+0x608>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800457c:	f7fd fc06 	bl	8001d8c <HAL_GetTick>
 8004580:	0002      	movs	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	4a21      	ldr	r2, [pc, #132]	@ (800460c <HAL_RCC_OscConfig+0x684>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x608>
          {
            return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e118      	b.n	80047c2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004590:	4a1a      	ldr	r2, [pc, #104]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 8004592:	2390      	movs	r3, #144	@ 0x90
 8004594:	58d2      	ldr	r2, [r2, r3]
 8004596:	2380      	movs	r3, #128	@ 0x80
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	4013      	ands	r3, r2
 800459c:	d1ee      	bne.n	800457c <HAL_RCC_OscConfig+0x5f4>
 800459e:	e03e      	b.n	800461e <HAL_RCC_OscConfig+0x696>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a0:	f7fd fbf4 	bl	8001d8c <HAL_GetTick>
 80045a4:	0003      	movs	r3, r0
 80045a6:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045a8:	e009      	b.n	80045be <HAL_RCC_OscConfig+0x636>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045aa:	f7fd fbef 	bl	8001d8c <HAL_GetTick>
 80045ae:	0002      	movs	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	4a15      	ldr	r2, [pc, #84]	@ (800460c <HAL_RCC_OscConfig+0x684>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x636>
        {
          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e101      	b.n	80047c2 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045be:	4a0f      	ldr	r2, [pc, #60]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 80045c0:	2390      	movs	r3, #144	@ 0x90
 80045c2:	58d3      	ldr	r3, [r2, r3]
 80045c4:	2202      	movs	r2, #2
 80045c6:	4013      	ands	r3, r2
 80045c8:	d1ef      	bne.n	80045aa <HAL_RCC_OscConfig+0x622>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80045ca:	4a0c      	ldr	r2, [pc, #48]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 80045cc:	2390      	movs	r3, #144	@ 0x90
 80045ce:	58d3      	ldr	r3, [r2, r3]
 80045d0:	2280      	movs	r2, #128	@ 0x80
 80045d2:	4013      	ands	r3, r2
 80045d4:	d023      	beq.n	800461e <HAL_RCC_OscConfig+0x696>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80045d6:	4a09      	ldr	r2, [pc, #36]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 80045d8:	2390      	movs	r3, #144	@ 0x90
 80045da:	58d3      	ldr	r3, [r2, r3]
 80045dc:	4907      	ldr	r1, [pc, #28]	@ (80045fc <HAL_RCC_OscConfig+0x674>)
 80045de:	2280      	movs	r2, #128	@ 0x80
 80045e0:	4393      	bics	r3, r2
 80045e2:	2290      	movs	r2, #144	@ 0x90
 80045e4:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80045e6:	e013      	b.n	8004610 <HAL_RCC_OscConfig+0x688>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e8:	f7fd fbd0 	bl	8001d8c <HAL_GetTick>
 80045ec:	0002      	movs	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	4a06      	ldr	r2, [pc, #24]	@ (800460c <HAL_RCC_OscConfig+0x684>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d90b      	bls.n	8004610 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e0e2      	b.n	80047c2 <HAL_RCC_OscConfig+0x83a>
 80045fc:	40021000 	.word	0x40021000
 8004600:	80ffffff 	.word	0x80ffffff
 8004604:	fffffeff 	.word	0xfffffeff
 8004608:	40007000 	.word	0x40007000
 800460c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004610:	4a6e      	ldr	r2, [pc, #440]	@ (80047cc <HAL_RCC_OscConfig+0x844>)
 8004612:	2390      	movs	r3, #144	@ 0x90
 8004614:	58d2      	ldr	r2, [r2, r3]
 8004616:	2380      	movs	r3, #128	@ 0x80
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	4013      	ands	r3, r2
 800461c:	d1e4      	bne.n	80045e8 <HAL_RCC_OscConfig+0x660>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800461e:	231f      	movs	r3, #31
 8004620:	18fb      	adds	r3, r7, r3
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d105      	bne.n	8004634 <HAL_RCC_OscConfig+0x6ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004628:	4b68      	ldr	r3, [pc, #416]	@ (80047cc <HAL_RCC_OscConfig+0x844>)
 800462a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800462c:	4b67      	ldr	r3, [pc, #412]	@ (80047cc <HAL_RCC_OscConfig+0x844>)
 800462e:	4968      	ldr	r1, [pc, #416]	@ (80047d0 <HAL_RCC_OscConfig+0x848>)
 8004630:	400a      	ands	r2, r1
 8004632:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }
#if defined(RCC_CRRCR_HSI48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2220      	movs	r2, #32
 800463a:	4013      	ands	r3, r2
 800463c:	d03c      	beq.n	80046b8 <HAL_RCC_OscConfig+0x730>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004642:	2b00      	cmp	r3, #0
 8004644:	d01c      	beq.n	8004680 <HAL_RCC_OscConfig+0x6f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004646:	4a61      	ldr	r2, [pc, #388]	@ (80047cc <HAL_RCC_OscConfig+0x844>)
 8004648:	2398      	movs	r3, #152	@ 0x98
 800464a:	58d3      	ldr	r3, [r2, r3]
 800464c:	495f      	ldr	r1, [pc, #380]	@ (80047cc <HAL_RCC_OscConfig+0x844>)
 800464e:	2201      	movs	r2, #1
 8004650:	4313      	orrs	r3, r2
 8004652:	2298      	movs	r2, #152	@ 0x98
 8004654:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004656:	f7fd fb99 	bl	8001d8c <HAL_GetTick>
 800465a:	0003      	movs	r3, r0
 800465c:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x6ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004660:	f7fd fb94 	bl	8001d8c <HAL_GetTick>
 8004664:	0002      	movs	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e0a7      	b.n	80047c2 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004672:	4a56      	ldr	r2, [pc, #344]	@ (80047cc <HAL_RCC_OscConfig+0x844>)
 8004674:	2398      	movs	r3, #152	@ 0x98
 8004676:	58d3      	ldr	r3, [r2, r3]
 8004678:	2202      	movs	r2, #2
 800467a:	4013      	ands	r3, r2
 800467c:	d0f0      	beq.n	8004660 <HAL_RCC_OscConfig+0x6d8>
 800467e:	e01b      	b.n	80046b8 <HAL_RCC_OscConfig+0x730>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004680:	4a52      	ldr	r2, [pc, #328]	@ (80047cc <HAL_RCC_OscConfig+0x844>)
 8004682:	2398      	movs	r3, #152	@ 0x98
 8004684:	58d3      	ldr	r3, [r2, r3]
 8004686:	4951      	ldr	r1, [pc, #324]	@ (80047cc <HAL_RCC_OscConfig+0x844>)
 8004688:	2201      	movs	r2, #1
 800468a:	4393      	bics	r3, r2
 800468c:	2298      	movs	r2, #152	@ 0x98
 800468e:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004690:	f7fd fb7c 	bl	8001d8c <HAL_GetTick>
 8004694:	0003      	movs	r3, r0
 8004696:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 8004698:	e008      	b.n	80046ac <HAL_RCC_OscConfig+0x724>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800469a:	f7fd fb77 	bl	8001d8c <HAL_GetTick>
 800469e:	0002      	movs	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_OscConfig+0x724>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e08a      	b.n	80047c2 <HAL_RCC_OscConfig+0x83a>
      while (READ_BIT(RCC->CRRCR,  RCC_CRRCR_HSI48RDY) != 0U)
 80046ac:	4a47      	ldr	r2, [pc, #284]	@ (80047cc <HAL_RCC_OscConfig+0x844>)
 80046ae:	2398      	movs	r3, #152	@ 0x98
 80046b0:	58d3      	ldr	r3, [r2, r3]
 80046b2:	2202      	movs	r2, #2
 80046b4:	4013      	ands	r3, r2
 80046b6:	d1f0      	bne.n	800469a <HAL_RCC_OscConfig+0x712>
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d100      	bne.n	80046c2 <HAL_RCC_OscConfig+0x73a>
 80046c0:	e07e      	b.n	80047c0 <HAL_RCC_OscConfig+0x838>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046c2:	4b42      	ldr	r3, [pc, #264]	@ (80047cc <HAL_RCC_OscConfig+0x844>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2238      	movs	r2, #56	@ 0x38
 80046c8:	4013      	ands	r3, r2
 80046ca:	2b18      	cmp	r3, #24
 80046cc:	d100      	bne.n	80046d0 <HAL_RCC_OscConfig+0x748>
 80046ce:	e075      	b.n	80047bc <HAL_RCC_OscConfig+0x834>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d156      	bne.n	8004786 <HAL_RCC_OscConfig+0x7fe>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d8:	4b3c      	ldr	r3, [pc, #240]	@ (80047cc <HAL_RCC_OscConfig+0x844>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	4b3b      	ldr	r3, [pc, #236]	@ (80047cc <HAL_RCC_OscConfig+0x844>)
 80046de:	493d      	ldr	r1, [pc, #244]	@ (80047d4 <HAL_RCC_OscConfig+0x84c>)
 80046e0:	400a      	ands	r2, r1
 80046e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7fd fb52 	bl	8001d8c <HAL_GetTick>
 80046e8:	0003      	movs	r3, r0
 80046ea:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ee:	f7fd fb4d 	bl	8001d8c <HAL_GetTick>
 80046f2:	0002      	movs	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x778>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e060      	b.n	80047c2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004700:	4b32      	ldr	r3, [pc, #200]	@ (80047cc <HAL_RCC_OscConfig+0x844>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	2380      	movs	r3, #128	@ 0x80
 8004706:	049b      	lsls	r3, r3, #18
 8004708:	4013      	ands	r3, r2
 800470a:	d1f0      	bne.n	80046ee <HAL_RCC_OscConfig+0x766>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800470c:	4b2f      	ldr	r3, [pc, #188]	@ (80047cc <HAL_RCC_OscConfig+0x844>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	4a31      	ldr	r2, [pc, #196]	@ (80047d8 <HAL_RCC_OscConfig+0x850>)
 8004712:	4013      	ands	r3, r2
 8004714:	0019      	movs	r1, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004724:	021b      	lsls	r3, r3, #8
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004738:	431a      	orrs	r2, r3
 800473a:	4b24      	ldr	r3, [pc, #144]	@ (80047cc <HAL_RCC_OscConfig+0x844>)
 800473c:	430a      	orrs	r2, r1
 800473e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8004740:	4b22      	ldr	r3, [pc, #136]	@ (80047cc <HAL_RCC_OscConfig+0x844>)
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	4b21      	ldr	r3, [pc, #132]	@ (80047cc <HAL_RCC_OscConfig+0x844>)
 8004746:	2180      	movs	r1, #128	@ 0x80
 8004748:	0549      	lsls	r1, r1, #21
 800474a:	430a      	orrs	r2, r1
 800474c:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800474e:	4b1f      	ldr	r3, [pc, #124]	@ (80047cc <HAL_RCC_OscConfig+0x844>)
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	4b1e      	ldr	r3, [pc, #120]	@ (80047cc <HAL_RCC_OscConfig+0x844>)
 8004754:	2180      	movs	r1, #128	@ 0x80
 8004756:	0449      	lsls	r1, r1, #17
 8004758:	430a      	orrs	r2, r1
 800475a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475c:	f7fd fb16 	bl	8001d8c <HAL_GetTick>
 8004760:	0003      	movs	r3, r0
 8004762:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x7f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004766:	f7fd fb11 	bl	8001d8c <HAL_GetTick>
 800476a:	0002      	movs	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e024      	b.n	80047c2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004778:	4b14      	ldr	r3, [pc, #80]	@ (80047cc <HAL_RCC_OscConfig+0x844>)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	2380      	movs	r3, #128	@ 0x80
 800477e:	049b      	lsls	r3, r3, #18
 8004780:	4013      	ands	r3, r2
 8004782:	d0f0      	beq.n	8004766 <HAL_RCC_OscConfig+0x7de>
 8004784:	e01c      	b.n	80047c0 <HAL_RCC_OscConfig+0x838>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004786:	4b11      	ldr	r3, [pc, #68]	@ (80047cc <HAL_RCC_OscConfig+0x844>)
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	4b10      	ldr	r3, [pc, #64]	@ (80047cc <HAL_RCC_OscConfig+0x844>)
 800478c:	4911      	ldr	r1, [pc, #68]	@ (80047d4 <HAL_RCC_OscConfig+0x84c>)
 800478e:	400a      	ands	r2, r1
 8004790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004792:	f7fd fafb 	bl	8001d8c <HAL_GetTick>
 8004796:	0003      	movs	r3, r0
 8004798:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x826>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800479c:	f7fd faf6 	bl	8001d8c <HAL_GetTick>
 80047a0:	0002      	movs	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x826>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e009      	b.n	80047c2 <HAL_RCC_OscConfig+0x83a>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ae:	4b07      	ldr	r3, [pc, #28]	@ (80047cc <HAL_RCC_OscConfig+0x844>)
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	2380      	movs	r3, #128	@ 0x80
 80047b4:	049b      	lsls	r3, r3, #18
 80047b6:	4013      	ands	r3, r2
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x814>
 80047ba:	e001      	b.n	80047c0 <HAL_RCC_OscConfig+0x838>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e000      	b.n	80047c2 <HAL_RCC_OscConfig+0x83a>
    }
  }
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	0018      	movs	r0, r3
 80047c4:	46bd      	mov	sp, r7
 80047c6:	b008      	add	sp, #32
 80047c8:	bdb0      	pop	{r4, r5, r7, pc}
 80047ca:	46c0      	nop			@ (mov r8, r8)
 80047cc:	40021000 	.word	0x40021000
 80047d0:	efffffff 	.word	0xefffffff
 80047d4:	feffffff 	.word	0xfeffffff
 80047d8:	11c1808c 	.word	0x11c1808c

080047dc <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 80047dc:	b5b0      	push	{r4, r5, r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047e6:	4b6c      	ldr	r3, [pc, #432]	@ (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2207      	movs	r2, #7
 80047ec:	4013      	ands	r3, r2
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d911      	bls.n	8004818 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f4:	4b68      	ldr	r3, [pc, #416]	@ (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2207      	movs	r2, #7
 80047fa:	4393      	bics	r3, r2
 80047fc:	0019      	movs	r1, r3
 80047fe:	4b66      	ldr	r3, [pc, #408]	@ (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004806:	4b64      	ldr	r3, [pc, #400]	@ (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2207      	movs	r2, #7
 800480c:	4013      	ands	r3, r2
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d001      	beq.n	8004818 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e0bb      	b.n	8004990 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2201      	movs	r2, #1
 800481e:	4013      	ands	r3, r2
 8004820:	d100      	bne.n	8004824 <HAL_RCC_ClockConfig+0x48>
 8004822:	e064      	b.n	80048ee <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	2b03      	cmp	r3, #3
 800482a:	d107      	bne.n	800483c <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800482c:	4b5b      	ldr	r3, [pc, #364]	@ (800499c <HAL_RCC_ClockConfig+0x1c0>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	2380      	movs	r3, #128	@ 0x80
 8004832:	049b      	lsls	r3, r3, #18
 8004834:	4013      	ands	r3, r2
 8004836:	d138      	bne.n	80048aa <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e0a9      	b.n	8004990 <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	2b02      	cmp	r3, #2
 8004842:	d107      	bne.n	8004854 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004844:	4b55      	ldr	r3, [pc, #340]	@ (800499c <HAL_RCC_ClockConfig+0x1c0>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	2380      	movs	r3, #128	@ 0x80
 800484a:	029b      	lsls	r3, r3, #10
 800484c:	4013      	ands	r3, r2
 800484e:	d12c      	bne.n	80048aa <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e09d      	b.n	8004990 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d106      	bne.n	800486a <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800485c:	4b4f      	ldr	r3, [pc, #316]	@ (800499c <HAL_RCC_ClockConfig+0x1c0>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2202      	movs	r2, #2
 8004862:	4013      	ands	r3, r2
 8004864:	d121      	bne.n	80048aa <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e092      	b.n	8004990 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d107      	bne.n	8004882 <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004872:	4b4a      	ldr	r3, [pc, #296]	@ (800499c <HAL_RCC_ClockConfig+0x1c0>)
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	2380      	movs	r3, #128	@ 0x80
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	4013      	ands	r3, r2
 800487c:	d115      	bne.n	80048aa <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e086      	b.n	8004990 <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2b04      	cmp	r3, #4
 8004888:	d107      	bne.n	800489a <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800488a:	4a44      	ldr	r2, [pc, #272]	@ (800499c <HAL_RCC_ClockConfig+0x1c0>)
 800488c:	2394      	movs	r3, #148	@ 0x94
 800488e:	58d3      	ldr	r3, [r2, r3]
 8004890:	2202      	movs	r2, #2
 8004892:	4013      	ands	r3, r2
 8004894:	d109      	bne.n	80048aa <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e07a      	b.n	8004990 <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800489a:	4a40      	ldr	r2, [pc, #256]	@ (800499c <HAL_RCC_ClockConfig+0x1c0>)
 800489c:	2390      	movs	r3, #144	@ 0x90
 800489e:	58d3      	ldr	r3, [r2, r3]
 80048a0:	2202      	movs	r2, #2
 80048a2:	4013      	ands	r3, r2
 80048a4:	d101      	bne.n	80048aa <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e072      	b.n	8004990 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048aa:	4b3c      	ldr	r3, [pc, #240]	@ (800499c <HAL_RCC_ClockConfig+0x1c0>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2207      	movs	r2, #7
 80048b0:	4393      	bics	r3, r2
 80048b2:	0019      	movs	r1, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	4b38      	ldr	r3, [pc, #224]	@ (800499c <HAL_RCC_ClockConfig+0x1c0>)
 80048ba:	430a      	orrs	r2, r1
 80048bc:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048be:	f7fd fa65 	bl	8001d8c <HAL_GetTick>
 80048c2:	0003      	movs	r3, r0
 80048c4:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c6:	e009      	b.n	80048dc <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048c8:	f7fd fa60 	bl	8001d8c <HAL_GetTick>
 80048cc:	0002      	movs	r2, r0
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	4a33      	ldr	r2, [pc, #204]	@ (80049a0 <HAL_RCC_ClockConfig+0x1c4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e059      	b.n	8004990 <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048dc:	4b2f      	ldr	r3, [pc, #188]	@ (800499c <HAL_RCC_ClockConfig+0x1c0>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2238      	movs	r2, #56	@ 0x38
 80048e2:	401a      	ands	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d1ec      	bne.n	80048c8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2202      	movs	r2, #2
 80048f4:	4013      	ands	r3, r2
 80048f6:	d009      	beq.n	800490c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048f8:	4b28      	ldr	r3, [pc, #160]	@ (800499c <HAL_RCC_ClockConfig+0x1c0>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	4a29      	ldr	r2, [pc, #164]	@ (80049a4 <HAL_RCC_ClockConfig+0x1c8>)
 80048fe:	4013      	ands	r3, r2
 8004900:	0019      	movs	r1, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689a      	ldr	r2, [r3, #8]
 8004906:	4b25      	ldr	r3, [pc, #148]	@ (800499c <HAL_RCC_ClockConfig+0x1c0>)
 8004908:	430a      	orrs	r2, r1
 800490a:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800490c:	4b22      	ldr	r3, [pc, #136]	@ (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2207      	movs	r2, #7
 8004912:	4013      	ands	r3, r2
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d211      	bcs.n	800493e <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491a:	4b1f      	ldr	r3, [pc, #124]	@ (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2207      	movs	r2, #7
 8004920:	4393      	bics	r3, r2
 8004922:	0019      	movs	r1, r3
 8004924:	4b1c      	ldr	r3, [pc, #112]	@ (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800492c:	4b1a      	ldr	r3, [pc, #104]	@ (8004998 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2207      	movs	r2, #7
 8004932:	4013      	ands	r3, r2
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d001      	beq.n	800493e <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e028      	b.n	8004990 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2204      	movs	r2, #4
 8004944:	4013      	ands	r3, r2
 8004946:	d009      	beq.n	800495c <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004948:	4b14      	ldr	r3, [pc, #80]	@ (800499c <HAL_RCC_ClockConfig+0x1c0>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	4a16      	ldr	r2, [pc, #88]	@ (80049a8 <HAL_RCC_ClockConfig+0x1cc>)
 800494e:	4013      	ands	r3, r2
 8004950:	0019      	movs	r1, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	4b11      	ldr	r3, [pc, #68]	@ (800499c <HAL_RCC_ClockConfig+0x1c0>)
 8004958:	430a      	orrs	r2, r1
 800495a:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800495c:	f000 f82a 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8004960:	0001      	movs	r1, r0
 8004962:	4b0e      	ldr	r3, [pc, #56]	@ (800499c <HAL_RCC_ClockConfig+0x1c0>)
 8004964:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004966:	0a1b      	lsrs	r3, r3, #8
 8004968:	220f      	movs	r2, #15
 800496a:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800496c:	4a0f      	ldr	r2, [pc, #60]	@ (80049ac <HAL_RCC_ClockConfig+0x1d0>)
 800496e:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004970:	001a      	movs	r2, r3
 8004972:	231f      	movs	r3, #31
 8004974:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8004976:	000a      	movs	r2, r1
 8004978:	40da      	lsrs	r2, r3
 800497a:	4b0d      	ldr	r3, [pc, #52]	@ (80049b0 <HAL_RCC_ClockConfig+0x1d4>)
 800497c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 800497e:	250b      	movs	r5, #11
 8004980:	197c      	adds	r4, r7, r5
 8004982:	2003      	movs	r0, #3
 8004984:	f7fd f9a8 	bl	8001cd8 <HAL_InitTick>
 8004988:	0003      	movs	r3, r0
 800498a:	7023      	strb	r3, [r4, #0]

  return halstatus;
 800498c:	197b      	adds	r3, r7, r5
 800498e:	781b      	ldrb	r3, [r3, #0]
}
 8004990:	0018      	movs	r0, r3
 8004992:	46bd      	mov	sp, r7
 8004994:	b004      	add	sp, #16
 8004996:	bdb0      	pop	{r4, r5, r7, pc}
 8004998:	40022000 	.word	0x40022000
 800499c:	40021000 	.word	0x40021000
 80049a0:	00001388 	.word	0x00001388
 80049a4:	fffff0ff 	.word	0xfffff0ff
 80049a8:	ffff8fff 	.word	0xffff8fff
 80049ac:	0800d094 	.word	0x0800d094
 80049b0:	2000003c 	.word	0x2000003c

080049b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08a      	sub	sp, #40	@ 0x28
 80049b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 80049be:	2300      	movs	r3, #0
 80049c0:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049c2:	4b46      	ldr	r3, [pc, #280]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x128>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2238      	movs	r2, #56	@ 0x38
 80049c8:	4013      	ands	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049cc:	4b43      	ldr	r3, [pc, #268]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x128>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	2203      	movs	r2, #3
 80049d2:	4013      	ands	r3, r2
 80049d4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <HAL_RCC_GetSysClockFreq+0x34>
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	2b18      	cmp	r3, #24
 80049e0:	d125      	bne.n	8004a2e <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d122      	bne.n	8004a2e <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049e8:	4b3c      	ldr	r3, [pc, #240]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x128>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2208      	movs	r2, #8
 80049ee:	4013      	ands	r3, r2
 80049f0:	d107      	bne.n	8004a02 <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 80049f2:	4a3a      	ldr	r2, [pc, #232]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x128>)
 80049f4:	2394      	movs	r3, #148	@ 0x94
 80049f6:	58d3      	ldr	r3, [r2, r3]
 80049f8:	0a1b      	lsrs	r3, r3, #8
 80049fa:	220f      	movs	r2, #15
 80049fc:	4013      	ands	r3, r2
 80049fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a00:	e005      	b.n	8004a0e <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a02:	4b36      	ldr	r3, [pc, #216]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x128>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	091b      	lsrs	r3, r3, #4
 8004a08:	220f      	movs	r2, #15
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a10:	2b0b      	cmp	r3, #11
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 8004a18:	4b31      	ldr	r3, [pc, #196]	@ (8004ae0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a1c:	0092      	lsls	r2, r2, #2
 8004a1e:	58d3      	ldr	r3, [r2, r3]
 8004a20:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d11b      	bne.n	8004a60 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a2c:	e018      	b.n	8004a60 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d102      	bne.n	8004a3a <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a34:	4b2b      	ldr	r3, [pc, #172]	@ (8004ae4 <HAL_RCC_GetSysClockFreq+0x130>)
 8004a36:	623b      	str	r3, [r7, #32]
 8004a38:	e012      	b.n	8004a60 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	2b10      	cmp	r3, #16
 8004a3e:	d102      	bne.n	8004a46 <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a40:	4b29      	ldr	r3, [pc, #164]	@ (8004ae8 <HAL_RCC_GetSysClockFreq+0x134>)
 8004a42:	623b      	str	r3, [r7, #32]
 8004a44:	e00c      	b.n	8004a60 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d103      	bne.n	8004a54 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004a4c:	23fa      	movs	r3, #250	@ 0xfa
 8004a4e:	01db      	lsls	r3, r3, #7
 8004a50:	623b      	str	r3, [r7, #32]
 8004a52:	e005      	b.n	8004a60 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	2b28      	cmp	r3, #40	@ 0x28
 8004a58:	d102      	bne.n	8004a60 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004a5a:	2380      	movs	r3, #128	@ 0x80
 8004a5c:	021b      	lsls	r3, r3, #8
 8004a5e:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	2b18      	cmp	r3, #24
 8004a64:	d135      	bne.n	8004ad2 <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a66:	4b1d      	ldr	r3, [pc, #116]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x128>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	2203      	movs	r2, #3
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a70:	4b1a      	ldr	r3, [pc, #104]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x128>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	2207      	movs	r2, #7
 8004a78:	4013      	ands	r3, r2
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d003      	beq.n	8004a8c <HAL_RCC_GetSysClockFreq+0xd8>
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	d003      	beq.n	8004a92 <HAL_RCC_GetSysClockFreq+0xde>
 8004a8a:	e005      	b.n	8004a98 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 8004a8c:	4b15      	ldr	r3, [pc, #84]	@ (8004ae4 <HAL_RCC_GetSysClockFreq+0x130>)
 8004a8e:	61fb      	str	r3, [r7, #28]
        break;
 8004a90:	e005      	b.n	8004a9e <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 8004a92:	4b15      	ldr	r3, [pc, #84]	@ (8004ae8 <HAL_RCC_GetSysClockFreq+0x134>)
 8004a94:	61fb      	str	r3, [r7, #28]
        break;
 8004a96:	e002      	b.n	8004a9e <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 8004a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9a:	61fb      	str	r3, [r7, #28]
        break;
 8004a9c:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 8004a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x128>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	0a1b      	lsrs	r3, r3, #8
 8004aa4:	227f      	movs	r2, #127	@ 0x7f
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	69fa      	ldr	r2, [r7, #28]
 8004aaa:	4353      	muls	r3, r2
 8004aac:	68f9      	ldr	r1, [r7, #12]
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f7fb fb3c 	bl	800012c <__udivsi3>
 8004ab4:	0003      	movs	r3, r0
 8004ab6:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004ab8:	4b08      	ldr	r3, [pc, #32]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x128>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	0f5b      	lsrs	r3, r3, #29
 8004abe:	2207      	movs	r2, #7
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	68b8      	ldr	r0, [r7, #8]
 8004aca:	f7fb fb2f 	bl	800012c <__udivsi3>
 8004ace:	0003      	movs	r3, r0
 8004ad0:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
}
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	b00a      	add	sp, #40	@ 0x28
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	0800d0ac 	.word	0x0800d0ac
 8004ae4:	00f42400 	.word	0x00f42400
 8004ae8:	003d0900 	.word	0x003d0900

08004aec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004af0:	4b02      	ldr	r3, [pc, #8]	@ (8004afc <HAL_RCC_GetHCLKFreq+0x10>)
 8004af2:	681b      	ldr	r3, [r3, #0]
}
 8004af4:	0018      	movs	r0, r3
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	46c0      	nop			@ (mov r8, r8)
 8004afc:	2000003c 	.word	0x2000003c

08004b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 8004b04:	f7ff fff2 	bl	8004aec <HAL_RCC_GetHCLKFreq>
 8004b08:	0001      	movs	r1, r0
 8004b0a:	4b07      	ldr	r3, [pc, #28]	@ (8004b28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	0b1b      	lsrs	r3, r3, #12
 8004b10:	2207      	movs	r2, #7
 8004b12:	4013      	ands	r3, r2
 8004b14:	4a05      	ldr	r2, [pc, #20]	@ (8004b2c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8004b16:	5cd3      	ldrb	r3, [r2, r3]
 8004b18:	001a      	movs	r2, r3
 8004b1a:	231f      	movs	r3, #31
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	40d9      	lsrs	r1, r3
 8004b20:	000b      	movs	r3, r1
}
 8004b22:	0018      	movs	r0, r3
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	0800d0a4 	.word	0x0800d0a4

08004b30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b38:	2300      	movs	r3, #0
 8004b3a:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8004bfc <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8004b3e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004b40:	2380      	movs	r3, #128	@ 0x80
 8004b42:	055b      	lsls	r3, r3, #21
 8004b44:	4013      	ands	r3, r2
 8004b46:	d004      	beq.n	8004b52 <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b48:	f7ff fa04 	bl	8003f54 <HAL_PWREx_GetVoltageRange>
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	e017      	b.n	8004b82 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b52:	4b2a      	ldr	r3, [pc, #168]	@ (8004bfc <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8004b54:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004b56:	4b29      	ldr	r3, [pc, #164]	@ (8004bfc <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8004b58:	2180      	movs	r1, #128	@ 0x80
 8004b5a:	0549      	lsls	r1, r1, #21
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b60:	4b26      	ldr	r3, [pc, #152]	@ (8004bfc <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8004b62:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004b64:	2380      	movs	r3, #128	@ 0x80
 8004b66:	055b      	lsls	r3, r3, #21
 8004b68:	4013      	ands	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b6e:	f7ff f9f1 	bl	8003f54 <HAL_PWREx_GetVoltageRange>
 8004b72:	0003      	movs	r3, r0
 8004b74:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b76:	4b21      	ldr	r3, [pc, #132]	@ (8004bfc <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8004b78:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004b7a:	4b20      	ldr	r3, [pc, #128]	@ (8004bfc <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8004b7c:	4920      	ldr	r1, [pc, #128]	@ (8004c00 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 8004b7e:	400a      	ands	r2, r1
 8004b80:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	2380      	movs	r3, #128	@ 0x80
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d111      	bne.n	8004bb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b80      	cmp	r3, #128	@ 0x80
 8004b90:	d91c      	bls.n	8004bcc <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2bb0      	cmp	r3, #176	@ 0xb0
 8004b96:	d902      	bls.n	8004b9e <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b98:	2302      	movs	r3, #2
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	e016      	b.n	8004bcc <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b90      	cmp	r3, #144	@ 0x90
 8004ba2:	d902      	bls.n	8004baa <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	e010      	b.n	8004bcc <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 8004baa:	2300      	movs	r3, #0
 8004bac:	613b      	str	r3, [r7, #16]
 8004bae:	e00d      	b.n	8004bcc <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bb4:	d902      	bls.n	8004bbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	613b      	str	r3, [r7, #16]
 8004bba:	e007      	b.n	8004bcc <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b70      	cmp	r3, #112	@ 0x70
 8004bc0:	d102      	bne.n	8004bc8 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	613b      	str	r3, [r7, #16]
 8004bc6:	e001      	b.n	8004bcc <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004bc8:	2300      	movs	r3, #0
 8004bca:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8004c04 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2207      	movs	r2, #7
 8004bd2:	4393      	bics	r3, r2
 8004bd4:	0019      	movs	r1, r3
 8004bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c04 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004bde:	4b09      	ldr	r3, [pc, #36]	@ (8004c04 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2207      	movs	r2, #7
 8004be4:	4013      	ands	r3, r2
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d001      	beq.n	8004bf0 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e000      	b.n	8004bf2 <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	b006      	add	sp, #24
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	46c0      	nop			@ (mov r8, r8)
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	efffffff 	.word	0xefffffff
 8004c04:	40022000 	.word	0x40022000

08004c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c10:	2313      	movs	r3, #19
 8004c12:	18fb      	adds	r3, r7, r3
 8004c14:	2200      	movs	r2, #0
 8004c16:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c18:	2312      	movs	r3, #18
 8004c1a:	18fb      	adds	r3, r7, r3
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	2380      	movs	r3, #128	@ 0x80
 8004c26:	021b      	lsls	r3, r3, #8
 8004c28:	4013      	ands	r3, r2
 8004c2a:	d100      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004c2c:	e0b7      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c2e:	2011      	movs	r0, #17
 8004c30:	183b      	adds	r3, r7, r0
 8004c32:	2200      	movs	r2, #0
 8004c34:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c36:	4b4c      	ldr	r3, [pc, #304]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004c3a:	2380      	movs	r3, #128	@ 0x80
 8004c3c:	055b      	lsls	r3, r3, #21
 8004c3e:	4013      	ands	r3, r2
 8004c40:	d110      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c42:	4b49      	ldr	r3, [pc, #292]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004c46:	4b48      	ldr	r3, [pc, #288]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c48:	2180      	movs	r1, #128	@ 0x80
 8004c4a:	0549      	lsls	r1, r1, #21
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c50:	4b45      	ldr	r3, [pc, #276]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c52:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004c54:	2380      	movs	r3, #128	@ 0x80
 8004c56:	055b      	lsls	r3, r3, #21
 8004c58:	4013      	ands	r3, r2
 8004c5a:	60bb      	str	r3, [r7, #8]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c5e:	183b      	adds	r3, r7, r0
 8004c60:	2201      	movs	r2, #1
 8004c62:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c64:	4b41      	ldr	r3, [pc, #260]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	4b40      	ldr	r3, [pc, #256]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c6a:	2180      	movs	r1, #128	@ 0x80
 8004c6c:	0049      	lsls	r1, r1, #1
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c72:	f7fd f88b 	bl	8001d8c <HAL_GetTick>
 8004c76:	0003      	movs	r3, r0
 8004c78:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c7a:	e00b      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c7c:	f7fd f886 	bl	8001d8c <HAL_GetTick>
 8004c80:	0002      	movs	r2, r0
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d904      	bls.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004c8a:	2313      	movs	r3, #19
 8004c8c:	18fb      	adds	r3, r7, r3
 8004c8e:	2203      	movs	r2, #3
 8004c90:	701a      	strb	r2, [r3, #0]
        break;
 8004c92:	e005      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c94:	4b35      	ldr	r3, [pc, #212]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	2380      	movs	r3, #128	@ 0x80
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	d0ed      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004ca0:	2313      	movs	r3, #19
 8004ca2:	18fb      	adds	r3, r7, r3
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d168      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004caa:	4a2f      	ldr	r2, [pc, #188]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cac:	2390      	movs	r3, #144	@ 0x90
 8004cae:	58d2      	ldr	r2, [r2, r3]
 8004cb0:	23c0      	movs	r3, #192	@ 0xc0
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d01f      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d01a      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cc8:	4a27      	ldr	r2, [pc, #156]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cca:	2390      	movs	r3, #144	@ 0x90
 8004ccc:	58d3      	ldr	r3, [r2, r3]
 8004cce:	4a28      	ldr	r2, [pc, #160]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cd4:	4a24      	ldr	r2, [pc, #144]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cd6:	2390      	movs	r3, #144	@ 0x90
 8004cd8:	58d3      	ldr	r3, [r2, r3]
 8004cda:	4923      	ldr	r1, [pc, #140]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cdc:	2280      	movs	r2, #128	@ 0x80
 8004cde:	0252      	lsls	r2, r2, #9
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	2290      	movs	r2, #144	@ 0x90
 8004ce4:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ce6:	4a20      	ldr	r2, [pc, #128]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ce8:	2390      	movs	r3, #144	@ 0x90
 8004cea:	58d3      	ldr	r3, [r2, r3]
 8004cec:	491e      	ldr	r1, [pc, #120]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cee:	4a21      	ldr	r2, [pc, #132]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	2290      	movs	r2, #144	@ 0x90
 8004cf4:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cf6:	491c      	ldr	r1, [pc, #112]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cf8:	2290      	movs	r2, #144	@ 0x90
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	2201      	movs	r2, #1
 8004d02:	4013      	ands	r3, r2
 8004d04:	d017      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d06:	f7fd f841 	bl	8001d8c <HAL_GetTick>
 8004d0a:	0003      	movs	r3, r0
 8004d0c:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d0e:	e00c      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d10:	f7fd f83c 	bl	8001d8c <HAL_GetTick>
 8004d14:	0002      	movs	r2, r0
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	4a17      	ldr	r2, [pc, #92]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d904      	bls.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 8004d20:	2313      	movs	r3, #19
 8004d22:	18fb      	adds	r3, r7, r3
 8004d24:	2203      	movs	r2, #3
 8004d26:	701a      	strb	r2, [r3, #0]
            break;
 8004d28:	e005      	b.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d2a:	4a0f      	ldr	r2, [pc, #60]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d2c:	2390      	movs	r3, #144	@ 0x90
 8004d2e:	58d3      	ldr	r3, [r2, r3]
 8004d30:	2202      	movs	r2, #2
 8004d32:	4013      	ands	r3, r2
 8004d34:	d0ec      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 8004d36:	2313      	movs	r3, #19
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d10b      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d40:	4a09      	ldr	r2, [pc, #36]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d42:	2390      	movs	r3, #144	@ 0x90
 8004d44:	58d3      	ldr	r3, [r2, r3]
 8004d46:	4a0a      	ldr	r2, [pc, #40]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d48:	401a      	ands	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4e:	4906      	ldr	r1, [pc, #24]	@ (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	2290      	movs	r2, #144	@ 0x90
 8004d54:	508b      	str	r3, [r1, r2]
 8004d56:	e017      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d58:	2312      	movs	r3, #18
 8004d5a:	18fb      	adds	r3, r7, r3
 8004d5c:	2213      	movs	r2, #19
 8004d5e:	18ba      	adds	r2, r7, r2
 8004d60:	7812      	ldrb	r2, [r2, #0]
 8004d62:	701a      	strb	r2, [r3, #0]
 8004d64:	e010      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004d66:	46c0      	nop			@ (mov r8, r8)
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	40007000 	.word	0x40007000
 8004d70:	fffffcff 	.word	0xfffffcff
 8004d74:	fffeffff 	.word	0xfffeffff
 8004d78:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7c:	2312      	movs	r3, #18
 8004d7e:	18fb      	adds	r3, r7, r3
 8004d80:	2213      	movs	r2, #19
 8004d82:	18ba      	adds	r2, r7, r2
 8004d84:	7812      	ldrb	r2, [r2, #0]
 8004d86:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d88:	2311      	movs	r3, #17
 8004d8a:	18fb      	adds	r3, r7, r3
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d105      	bne.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d92:	4ba4      	ldr	r3, [pc, #656]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004d94:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004d96:	4ba3      	ldr	r3, [pc, #652]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004d98:	49a3      	ldr	r1, [pc, #652]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8004d9a:	400a      	ands	r2, r1
 8004d9c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2201      	movs	r2, #1
 8004da4:	4013      	ands	r3, r2
 8004da6:	d00b      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004da8:	4a9e      	ldr	r2, [pc, #632]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004daa:	2388      	movs	r3, #136	@ 0x88
 8004dac:	58d3      	ldr	r3, [r2, r3]
 8004dae:	2203      	movs	r2, #3
 8004db0:	4393      	bics	r3, r2
 8004db2:	001a      	movs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	499a      	ldr	r1, [pc, #616]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	2288      	movs	r2, #136	@ 0x88
 8004dbe:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	d00b      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dca:	4a96      	ldr	r2, [pc, #600]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004dcc:	2388      	movs	r3, #136	@ 0x88
 8004dce:	58d3      	ldr	r3, [r2, r3]
 8004dd0:	220c      	movs	r2, #12
 8004dd2:	4393      	bics	r3, r2
 8004dd4:	001a      	movs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	4992      	ldr	r1, [pc, #584]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	2288      	movs	r2, #136	@ 0x88
 8004de0:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2210      	movs	r2, #16
 8004de8:	4013      	ands	r3, r2
 8004dea:	d00a      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dec:	4a8d      	ldr	r2, [pc, #564]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004dee:	2388      	movs	r3, #136	@ 0x88
 8004df0:	58d3      	ldr	r3, [r2, r3]
 8004df2:	4a8e      	ldr	r2, [pc, #568]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004df4:	401a      	ands	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	498a      	ldr	r1, [pc, #552]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	2288      	movs	r2, #136	@ 0x88
 8004e00:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2208      	movs	r2, #8
 8004e08:	4013      	ands	r3, r2
 8004e0a:	d00a      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8004e0c:	4a85      	ldr	r2, [pc, #532]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e0e:	2388      	movs	r3, #136	@ 0x88
 8004e10:	58d3      	ldr	r3, [r2, r3]
 8004e12:	4a87      	ldr	r2, [pc, #540]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8004e14:	401a      	ands	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	4982      	ldr	r1, [pc, #520]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	2288      	movs	r2, #136	@ 0x88
 8004e20:	508b      	str	r3, [r1, r2]
  }
#if defined (LPUART3)
  /*-------------------------- LPUART3 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART3) == RCC_PERIPHCLK_LPUART3)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2204      	movs	r2, #4
 8004e28:	4013      	ands	r3, r2
 8004e2a:	d00b      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART3CLKSOURCE(PeriphClkInit->Lpuart3ClockSelection));

    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
 8004e2c:	4a7d      	ldr	r2, [pc, #500]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e2e:	2388      	movs	r3, #136	@ 0x88
 8004e30:	58d3      	ldr	r3, [r2, r3]
 8004e32:	22c0      	movs	r2, #192	@ 0xc0
 8004e34:	4393      	bics	r3, r2
 8004e36:	001a      	movs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	4979      	ldr	r1, [pc, #484]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	2288      	movs	r2, #136	@ 0x88
 8004e42:	508b      	str	r3, [r1, r2]
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d00a      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e4e:	4a75      	ldr	r2, [pc, #468]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e50:	2388      	movs	r3, #136	@ 0x88
 8004e52:	58d3      	ldr	r3, [r2, r3]
 8004e54:	4a77      	ldr	r2, [pc, #476]	@ (8005034 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004e56:	401a      	ands	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	4971      	ldr	r1, [pc, #452]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	2288      	movs	r2, #136	@ 0x88
 8004e62:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2240      	movs	r2, #64	@ 0x40
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	d00a      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e6e:	4a6d      	ldr	r2, [pc, #436]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e70:	2388      	movs	r3, #136	@ 0x88
 8004e72:	58d3      	ldr	r3, [r2, r3]
 8004e74:	4a70      	ldr	r2, [pc, #448]	@ (8005038 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8004e76:	401a      	ands	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	4969      	ldr	r1, [pc, #420]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	2288      	movs	r2, #136	@ 0x88
 8004e82:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2280      	movs	r2, #128	@ 0x80
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	d00a      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e8e:	4a65      	ldr	r2, [pc, #404]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e90:	2388      	movs	r3, #136	@ 0x88
 8004e92:	58d3      	ldr	r3, [r2, r3]
 8004e94:	4a69      	ldr	r2, [pc, #420]	@ (800503c <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004e96:	401a      	ands	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	4961      	ldr	r1, [pc, #388]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	2288      	movs	r2, #136	@ 0x88
 8004ea2:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	2380      	movs	r3, #128	@ 0x80
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	4013      	ands	r3, r2
 8004eae:	d00a      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004eb0:	4a5c      	ldr	r2, [pc, #368]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004eb2:	2388      	movs	r3, #136	@ 0x88
 8004eb4:	58d3      	ldr	r3, [r2, r3]
 8004eb6:	4a62      	ldr	r2, [pc, #392]	@ (8005040 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004eb8:	401a      	ands	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ebe:	4959      	ldr	r1, [pc, #356]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	2288      	movs	r2, #136	@ 0x88
 8004ec4:	508b      	str	r3, [r1, r2]
  }
#if defined (LPTIM3)
  /*----------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	2380      	movs	r3, #128	@ 0x80
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4013      	ands	r3, r2
 8004ed0:	d00a      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004ed2:	4a54      	ldr	r2, [pc, #336]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004ed4:	2388      	movs	r3, #136	@ 0x88
 8004ed6:	58d3      	ldr	r3, [r2, r3]
 8004ed8:	4a5a      	ldr	r2, [pc, #360]	@ (8005044 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 8004eda:	401a      	ands	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee0:	4950      	ldr	r1, [pc, #320]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	2288      	movs	r2, #136	@ 0x88
 8004ee6:	508b      	str	r3, [r1, r2]
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	2380      	movs	r3, #128	@ 0x80
 8004eee:	01db      	lsls	r3, r3, #7
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	d017      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ef8:	2380      	movs	r3, #128	@ 0x80
 8004efa:	055b      	lsls	r3, r3, #21
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d106      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x306>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 8004f00:	4b48      	ldr	r3, [pc, #288]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	4b47      	ldr	r3, [pc, #284]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004f06:	2180      	movs	r1, #128	@ 0x80
 8004f08:	0249      	lsls	r1, r1, #9
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f0e:	4a45      	ldr	r2, [pc, #276]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004f10:	2388      	movs	r3, #136	@ 0x88
 8004f12:	58d3      	ldr	r3, [r2, r3]
 8004f14:	4a4c      	ldr	r2, [pc, #304]	@ (8005048 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 8004f16:	401a      	ands	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f1c:	4941      	ldr	r1, [pc, #260]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	2288      	movs	r2, #136	@ 0x88
 8004f22:	508b      	str	r3, [r1, r2]
  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	2380      	movs	r3, #128	@ 0x80
 8004f2a:	015b      	lsls	r3, r3, #5
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	d017      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLQ)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f34:	2380      	movs	r3, #128	@ 0x80
 8004f36:	051b      	lsls	r3, r3, #20
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d106      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8004f3c:	4b39      	ldr	r3, [pc, #228]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	4b38      	ldr	r3, [pc, #224]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004f42:	2180      	movs	r1, #128	@ 0x80
 8004f44:	0449      	lsls	r1, r1, #17
 8004f46:	430a      	orrs	r2, r1
 8004f48:	60da      	str	r2, [r3, #12]
    }
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f4a:	4a36      	ldr	r2, [pc, #216]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004f4c:	2388      	movs	r3, #136	@ 0x88
 8004f4e:	58d3      	ldr	r3, [r2, r3]
 8004f50:	4a3e      	ldr	r2, [pc, #248]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004f52:	401a      	ands	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f58:	4932      	ldr	r1, [pc, #200]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	2288      	movs	r2, #136	@ 0x88
 8004f5e:	508b      	str	r3, [r1, r2]

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	2380      	movs	r3, #128	@ 0x80
 8004f66:	019b      	lsls	r3, r3, #6
 8004f68:	4013      	ands	r3, r2
 8004f6a:	d017      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f70:	2380      	movs	r3, #128	@ 0x80
 8004f72:	051b      	lsls	r3, r3, #20
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d106      	bne.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x37e>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8004f78:	4b2a      	ldr	r3, [pc, #168]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	4b29      	ldr	r3, [pc, #164]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004f7e:	2180      	movs	r1, #128	@ 0x80
 8004f80:	0449      	lsls	r1, r1, #17
 8004f82:	430a      	orrs	r2, r1
 8004f84:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f86:	4a27      	ldr	r2, [pc, #156]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004f88:	2388      	movs	r3, #136	@ 0x88
 8004f8a:	58d3      	ldr	r3, [r2, r3]
 8004f8c:	4a2f      	ldr	r2, [pc, #188]	@ (800504c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8004f8e:	401a      	ands	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f94:	4923      	ldr	r1, [pc, #140]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	2288      	movs	r2, #136	@ 0x88
 8004f9a:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	2380      	movs	r3, #128	@ 0x80
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	d017      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fac:	2380      	movs	r3, #128	@ 0x80
 8004fae:	045b      	lsls	r3, r3, #17
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d106      	bne.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8004fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004fb6:	68da      	ldr	r2, [r3, #12]
 8004fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004fba:	2180      	movs	r1, #128	@ 0x80
 8004fbc:	0449      	lsls	r1, r1, #17
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004fc2:	4a18      	ldr	r2, [pc, #96]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004fc4:	2388      	movs	r3, #136	@ 0x88
 8004fc6:	58d3      	ldr	r3, [r2, r3]
 8004fc8:	4a21      	ldr	r2, [pc, #132]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8004fca:	401a      	ands	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd0:	4914      	ldr	r1, [pc, #80]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	2288      	movs	r2, #136	@ 0x88
 8004fd6:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	2380      	movs	r3, #128	@ 0x80
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	d017      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fe8:	2380      	movs	r3, #128	@ 0x80
 8004fea:	049b      	lsls	r3, r3, #18
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d106      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8004ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8004ff6:	2180      	movs	r1, #128	@ 0x80
 8004ff8:	0449      	lsls	r1, r1, #17
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004ffe:	4a09      	ldr	r2, [pc, #36]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8005000:	2388      	movs	r3, #136	@ 0x88
 8005002:	58d3      	ldr	r3, [r2, r3]
 8005004:	4a12      	ldr	r2, [pc, #72]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8005006:	401a      	ands	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500c:	4905      	ldr	r1, [pc, #20]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800500e:	4313      	orrs	r3, r2
 8005010:	2288      	movs	r2, #136	@ 0x88
 8005012:	508b      	str	r3, [r1, r2]

  }

  return status;
 8005014:	2312      	movs	r3, #18
 8005016:	18fb      	adds	r3, r7, r3
 8005018:	781b      	ldrb	r3, [r3, #0]
}
 800501a:	0018      	movs	r0, r3
 800501c:	46bd      	mov	sp, r7
 800501e:	b006      	add	sp, #24
 8005020:	bd80      	pop	{r7, pc}
 8005022:	46c0      	nop			@ (mov r8, r8)
 8005024:	40021000 	.word	0x40021000
 8005028:	efffffff 	.word	0xefffffff
 800502c:	fffff3ff 	.word	0xfffff3ff
 8005030:	fffffcff 	.word	0xfffffcff
 8005034:	ffffcfff 	.word	0xffffcfff
 8005038:	fffcffff 	.word	0xfffcffff
 800503c:	fff3ffff 	.word	0xfff3ffff
 8005040:	ffcfffff 	.word	0xffcfffff
 8005044:	ff3fffff 	.word	0xff3fffff
 8005048:	cfffffff 	.word	0xcfffffff
 800504c:	f3ffffff 	.word	0xf3ffffff
 8005050:	feffffff 	.word	0xfeffffff

08005054 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005054:	b590      	push	{r4, r7, lr}
 8005056:	b089      	sub	sp, #36	@ 0x24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	2380      	movs	r3, #128	@ 0x80
 8005064:	021b      	lsls	r3, r3, #8
 8005066:	429a      	cmp	r2, r3
 8005068:	d154      	bne.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800506a:	4ad5      	ldr	r2, [pc, #852]	@ (80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800506c:	2390      	movs	r3, #144	@ 0x90
 800506e:	58d2      	ldr	r2, [r2, r3]
 8005070:	23c0      	movs	r3, #192	@ 0xc0
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4013      	ands	r3, r2
 8005076:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	23c0      	movs	r3, #192	@ 0xc0
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	429a      	cmp	r2, r3
 8005080:	d039      	beq.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	23c0      	movs	r3, #192	@ 0xc0
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	429a      	cmp	r2, r3
 800508a:	d901      	bls.n	8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800508c:	f000 fd1a 	bl	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	2380      	movs	r3, #128	@ 0x80
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	429a      	cmp	r2, r3
 8005098:	d006      	beq.n	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	2380      	movs	r3, #128	@ 0x80
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d00f      	beq.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 80050a4:	f000 fd0e 	bl	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80050a8:	4ac5      	ldr	r2, [pc, #788]	@ (80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80050aa:	2390      	movs	r3, #144	@ 0x90
 80050ac:	58d3      	ldr	r3, [r2, r3]
 80050ae:	2202      	movs	r2, #2
 80050b0:	4013      	ands	r3, r2
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d001      	beq.n	80050ba <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 80050b6:	f000 fd07 	bl	8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
          frequency = LSE_VALUE;
 80050ba:	2380      	movs	r3, #128	@ 0x80
 80050bc:	021b      	lsls	r3, r3, #8
 80050be:	61fb      	str	r3, [r7, #28]
        break;
 80050c0:	f000 fd02 	bl	8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80050c4:	4abe      	ldr	r2, [pc, #760]	@ (80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80050c6:	2394      	movs	r3, #148	@ 0x94
 80050c8:	58d3      	ldr	r3, [r2, r3]
 80050ca:	2202      	movs	r2, #2
 80050cc:	4013      	ands	r3, r2
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d001      	beq.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 80050d2:	f000 fcfb 	bl	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80050d6:	4aba      	ldr	r2, [pc, #744]	@ (80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80050d8:	2394      	movs	r3, #148	@ 0x94
 80050da:	58d3      	ldr	r3, [r2, r3]
 80050dc:	2204      	movs	r2, #4
 80050de:	4013      	ands	r3, r2
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d103      	bne.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 80050e4:	23fa      	movs	r3, #250	@ 0xfa
 80050e6:	61fb      	str	r3, [r7, #28]
        break;
 80050e8:	f000 fcf0 	bl	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
            frequency = LSI_VALUE;
 80050ec:	23fa      	movs	r3, #250	@ 0xfa
 80050ee:	01db      	lsls	r3, r3, #7
 80050f0:	61fb      	str	r3, [r7, #28]
        break;
 80050f2:	f000 fceb 	bl	8005acc <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80050f6:	4bb2      	ldr	r3, [pc, #712]	@ (80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	2380      	movs	r3, #128	@ 0x80
 80050fc:	029b      	lsls	r3, r3, #10
 80050fe:	401a      	ands	r2, r3
 8005100:	2380      	movs	r3, #128	@ 0x80
 8005102:	029b      	lsls	r3, r3, #10
 8005104:	429a      	cmp	r2, r3
 8005106:	d001      	beq.n	800510c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8005108:	f000 fce2 	bl	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
          frequency = HSE_VALUE / 32U;
 800510c:	4bad      	ldr	r3, [pc, #692]	@ (80053c4 <HAL_RCCEx_GetPeriphCLKFreq+0x370>)
 800510e:	61fb      	str	r3, [r7, #28]
        break;
 8005110:	f000 fcde 	bl	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	2380      	movs	r3, #128	@ 0x80
 8005118:	029b      	lsls	r3, r3, #10
 800511a:	429a      	cmp	r2, r3
 800511c:	d100      	bne.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 800511e:	e11a      	b.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	2380      	movs	r3, #128	@ 0x80
 8005124:	029b      	lsls	r3, r3, #10
 8005126:	429a      	cmp	r2, r3
 8005128:	d901      	bls.n	800512e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800512a:	f000 fcd3 	bl	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	2380      	movs	r3, #128	@ 0x80
 8005132:	025b      	lsls	r3, r3, #9
 8005134:	429a      	cmp	r2, r3
 8005136:	d100      	bne.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8005138:	e10d      	b.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	2380      	movs	r3, #128	@ 0x80
 800513e:	025b      	lsls	r3, r3, #9
 8005140:	429a      	cmp	r2, r3
 8005142:	d901      	bls.n	8005148 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005144:	f000 fcc6 	bl	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	2380      	movs	r3, #128	@ 0x80
 800514c:	01db      	lsls	r3, r3, #7
 800514e:	429a      	cmp	r2, r3
 8005150:	d100      	bne.n	8005154 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005152:	e1eb      	b.n	800552c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	2380      	movs	r3, #128	@ 0x80
 8005158:	01db      	lsls	r3, r3, #7
 800515a:	429a      	cmp	r2, r3
 800515c:	d901      	bls.n	8005162 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800515e:	f000 fcb9 	bl	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	2380      	movs	r3, #128	@ 0x80
 8005166:	019b      	lsls	r3, r3, #6
 8005168:	429a      	cmp	r2, r3
 800516a:	d101      	bne.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 800516c:	f000 fc50 	bl	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	2380      	movs	r3, #128	@ 0x80
 8005174:	019b      	lsls	r3, r3, #6
 8005176:	429a      	cmp	r2, r3
 8005178:	d901      	bls.n	800517e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800517a:	f000 fcab 	bl	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	2380      	movs	r3, #128	@ 0x80
 8005182:	015b      	lsls	r3, r3, #5
 8005184:	429a      	cmp	r2, r3
 8005186:	d101      	bne.n	800518c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005188:	f000 fbe2 	bl	8005950 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	2380      	movs	r3, #128	@ 0x80
 8005190:	015b      	lsls	r3, r3, #5
 8005192:	429a      	cmp	r2, r3
 8005194:	d901      	bls.n	800519a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005196:	f000 fc9d 	bl	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	2380      	movs	r3, #128	@ 0x80
 800519e:	011b      	lsls	r3, r3, #4
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d101      	bne.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80051a4:	f000 fba9 	bl	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	2380      	movs	r3, #128	@ 0x80
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d901      	bls.n	80051b6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 80051b2:	f000 fc8f 	bl	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	2380      	movs	r3, #128	@ 0x80
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	429a      	cmp	r2, r3
 80051be:	d101      	bne.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 80051c0:	f000 fb70 	bl	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	2380      	movs	r3, #128	@ 0x80
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d901      	bls.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80051ce:	f000 fc81 	bl	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	2380      	movs	r3, #128	@ 0x80
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	429a      	cmp	r2, r3
 80051da:	d100      	bne.n	80051de <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 80051dc:	e305      	b.n	80057ea <HAL_RCCEx_GetPeriphCLKFreq+0x796>
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	2380      	movs	r3, #128	@ 0x80
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d901      	bls.n	80051ec <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 80051e8:	f000 fc74 	bl	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	2380      	movs	r3, #128	@ 0x80
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d100      	bne.n	80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80051f6:	e29b      	b.n	8005730 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	2380      	movs	r3, #128	@ 0x80
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	429a      	cmp	r2, r3
 8005200:	d901      	bls.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
 8005202:	f000 fc67 	bl	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b80      	cmp	r3, #128	@ 0x80
 800520a:	d100      	bne.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 800520c:	e22f      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b80      	cmp	r3, #128	@ 0x80
 8005212:	d901      	bls.n	8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8005214:	f000 fc5e 	bl	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b20      	cmp	r3, #32
 800521c:	d80f      	bhi.n	800523e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 8005224:	f000 fc56 	bl	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b20      	cmp	r3, #32
 800522c:	d901      	bls.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
 800522e:	f000 fc51 	bl	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	009a      	lsls	r2, r3, #2
 8005236:	4b64      	ldr	r3, [pc, #400]	@ (80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0x374>)
 8005238:	18d3      	adds	r3, r2, r3
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	469f      	mov	pc, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b40      	cmp	r3, #64	@ 0x40
 8005242:	d100      	bne.n	8005246 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
 8005244:	e1df      	b.n	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
            break;
        }
        break;
      }
      default:
        break;
 8005246:	f000 fc45 	bl	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800524a:	4a5d      	ldr	r2, [pc, #372]	@ (80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 800524c:	2388      	movs	r3, #136	@ 0x88
 800524e:	58d3      	ldr	r3, [r2, r3]
 8005250:	2203      	movs	r2, #3
 8005252:	4013      	ands	r3, r2
 8005254:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b03      	cmp	r3, #3
 800525a:	d025      	beq.n	80052a8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	2b03      	cmp	r3, #3
 8005260:	d82d      	bhi.n	80052be <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2b02      	cmp	r3, #2
 8005266:	d013      	beq.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2b02      	cmp	r3, #2
 800526c:	d827      	bhi.n	80052be <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d005      	beq.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x232>
            break;
 800527a:	e020      	b.n	80052be <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
            frequency = HAL_RCC_GetPCLK1Freq();
 800527c:	f7ff fc40 	bl	8004b00 <HAL_RCC_GetPCLK1Freq>
 8005280:	0003      	movs	r3, r0
 8005282:	61fb      	str	r3, [r7, #28]
            break;
 8005284:	e022      	b.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            frequency = HAL_RCC_GetSysClockFreq();
 8005286:	f7ff fb95 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 800528a:	0003      	movs	r3, r0
 800528c:	61fb      	str	r3, [r7, #28]
            break;
 800528e:	e01d      	b.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005290:	4b4b      	ldr	r3, [pc, #300]	@ (80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	2380      	movs	r3, #128	@ 0x80
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	401a      	ands	r2, r3
 800529a:	2380      	movs	r3, #128	@ 0x80
 800529c:	00db      	lsls	r3, r3, #3
 800529e:	429a      	cmp	r2, r3
 80052a0:	d110      	bne.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
              frequency = HSI_VALUE;
 80052a2:	4b4a      	ldr	r3, [pc, #296]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 80052a4:	61fb      	str	r3, [r7, #28]
            break;
 80052a6:	e00d      	b.n	80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80052a8:	4a45      	ldr	r2, [pc, #276]	@ (80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80052aa:	2390      	movs	r3, #144	@ 0x90
 80052ac:	58d3      	ldr	r3, [r2, r3]
 80052ae:	2202      	movs	r2, #2
 80052b0:	4013      	ands	r3, r2
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d109      	bne.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
              frequency = LSE_VALUE;
 80052b6:	2380      	movs	r3, #128	@ 0x80
 80052b8:	021b      	lsls	r3, r3, #8
 80052ba:	61fb      	str	r3, [r7, #28]
            break;
 80052bc:	e005      	b.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
            break;
 80052be:	46c0      	nop			@ (mov r8, r8)
 80052c0:	f000 fc09 	bl	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80052c4:	46c0      	nop			@ (mov r8, r8)
 80052c6:	f000 fc06 	bl	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80052ca:	46c0      	nop			@ (mov r8, r8)
        break;
 80052cc:	f000 fc03 	bl	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80052d0:	4a3b      	ldr	r2, [pc, #236]	@ (80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 80052d2:	2388      	movs	r3, #136	@ 0x88
 80052d4:	58d3      	ldr	r3, [r2, r3]
 80052d6:	220c      	movs	r2, #12
 80052d8:	4013      	ands	r3, r2
 80052da:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	2b0c      	cmp	r3, #12
 80052e0:	d025      	beq.n	800532e <HAL_RCCEx_GetPeriphCLKFreq+0x2da>
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2b0c      	cmp	r3, #12
 80052e6:	d82d      	bhi.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2b08      	cmp	r3, #8
 80052ec:	d013      	beq.n	8005316 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d827      	bhi.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2b04      	cmp	r3, #4
 80052fe:	d005      	beq.n	800530c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 8005300:	e020      	b.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005302:	f7ff fbfd 	bl	8004b00 <HAL_RCC_GetPCLK1Freq>
 8005306:	0003      	movs	r3, r0
 8005308:	61fb      	str	r3, [r7, #28]
            break;
 800530a:	e022      	b.n	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            frequency = HAL_RCC_GetSysClockFreq();
 800530c:	f7ff fb52 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8005310:	0003      	movs	r3, r0
 8005312:	61fb      	str	r3, [r7, #28]
            break;
 8005314:	e01d      	b.n	8005352 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005316:	4b2a      	ldr	r3, [pc, #168]	@ (80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	2380      	movs	r3, #128	@ 0x80
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	401a      	ands	r2, r3
 8005320:	2380      	movs	r3, #128	@ 0x80
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	429a      	cmp	r2, r3
 8005326:	d110      	bne.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
              frequency = HSI_VALUE;
 8005328:	4b28      	ldr	r3, [pc, #160]	@ (80053cc <HAL_RCCEx_GetPeriphCLKFreq+0x378>)
 800532a:	61fb      	str	r3, [r7, #28]
            break;
 800532c:	e00d      	b.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800532e:	4a24      	ldr	r2, [pc, #144]	@ (80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8005330:	2390      	movs	r3, #144	@ 0x90
 8005332:	58d3      	ldr	r3, [r2, r3]
 8005334:	2202      	movs	r2, #2
 8005336:	4013      	ands	r3, r2
 8005338:	2b02      	cmp	r3, #2
 800533a:	d109      	bne.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
              frequency = LSE_VALUE;
 800533c:	2380      	movs	r3, #128	@ 0x80
 800533e:	021b      	lsls	r3, r3, #8
 8005340:	61fb      	str	r3, [r7, #28]
            break;
 8005342:	e005      	b.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
            break;
 8005344:	46c0      	nop			@ (mov r8, r8)
 8005346:	f000 fbc6 	bl	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800534a:	46c0      	nop			@ (mov r8, r8)
 800534c:	f000 fbc3 	bl	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8005350:	46c0      	nop			@ (mov r8, r8)
        break;
 8005352:	f000 fbc0 	bl	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005356:	f7ff fbd3 	bl	8004b00 <HAL_RCC_GetPCLK1Freq>
 800535a:	0003      	movs	r3, r0
 800535c:	61fb      	str	r3, [r7, #28]
        break;
 800535e:	f000 fbba 	bl	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005362:	4a17      	ldr	r2, [pc, #92]	@ (80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>)
 8005364:	2388      	movs	r3, #136	@ 0x88
 8005366:	58d2      	ldr	r2, [r2, r3]
 8005368:	23c0      	movs	r3, #192	@ 0xc0
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	4013      	ands	r3, r2
 800536e:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	23c0      	movs	r3, #192	@ 0xc0
 8005374:	011b      	lsls	r3, r3, #4
 8005376:	429a      	cmp	r2, r3
 8005378:	d036      	beq.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	23c0      	movs	r3, #192	@ 0xc0
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	429a      	cmp	r2, r3
 8005382:	d83c      	bhi.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	2380      	movs	r3, #128	@ 0x80
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	429a      	cmp	r2, r3
 800538c:	d020      	beq.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	2380      	movs	r3, #128	@ 0x80
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	429a      	cmp	r2, r3
 8005396:	d832      	bhi.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d005      	beq.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	2380      	movs	r3, #128	@ 0x80
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d005      	beq.n	80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
            break;
 80053a8:	e029      	b.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 80053aa:	f7ff fba9 	bl	8004b00 <HAL_RCC_GetPCLK1Freq>
 80053ae:	0003      	movs	r3, r0
 80053b0:	61fb      	str	r3, [r7, #28]
            break;
 80053b2:	e02b      	b.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
            frequency = HAL_RCC_GetSysClockFreq();
 80053b4:	f7ff fafe 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 80053b8:	0003      	movs	r3, r0
 80053ba:	61fb      	str	r3, [r7, #28]
            break;
 80053bc:	e026      	b.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80053be:	46c0      	nop			@ (mov r8, r8)
 80053c0:	40021000 	.word	0x40021000
 80053c4:	0001e848 	.word	0x0001e848
 80053c8:	0800d0dc 	.word	0x0800d0dc
 80053cc:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053d0:	4bbb      	ldr	r3, [pc, #748]	@ (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	2380      	movs	r3, #128	@ 0x80
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	401a      	ands	r2, r3
 80053da:	2380      	movs	r3, #128	@ 0x80
 80053dc:	00db      	lsls	r3, r3, #3
 80053de:	429a      	cmp	r2, r3
 80053e0:	d110      	bne.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
              frequency = HSI_VALUE;
 80053e2:	4bb8      	ldr	r3, [pc, #736]	@ (80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80053e4:	61fb      	str	r3, [r7, #28]
            break;
 80053e6:	e00d      	b.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80053e8:	4ab5      	ldr	r2, [pc, #724]	@ (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80053ea:	2390      	movs	r3, #144	@ 0x90
 80053ec:	58d3      	ldr	r3, [r2, r3]
 80053ee:	2202      	movs	r2, #2
 80053f0:	4013      	ands	r3, r2
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d109      	bne.n	800540a <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
              frequency = LSE_VALUE;
 80053f6:	2380      	movs	r3, #128	@ 0x80
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	61fb      	str	r3, [r7, #28]
            break;
 80053fc:	e005      	b.n	800540a <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
            break;
 80053fe:	46c0      	nop			@ (mov r8, r8)
 8005400:	f000 fb69 	bl	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8005404:	46c0      	nop			@ (mov r8, r8)
 8005406:	f000 fb66 	bl	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800540a:	46c0      	nop			@ (mov r8, r8)
        break;
 800540c:	f000 fb63 	bl	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8005410:	4aab      	ldr	r2, [pc, #684]	@ (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8005412:	2388      	movs	r3, #136	@ 0x88
 8005414:	58d2      	ldr	r2, [r2, r3]
 8005416:	23c0      	movs	r3, #192	@ 0xc0
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4013      	ands	r3, r2
 800541c:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	23c0      	movs	r3, #192	@ 0xc0
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	429a      	cmp	r2, r3
 8005426:	d02d      	beq.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	23c0      	movs	r3, #192	@ 0xc0
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	429a      	cmp	r2, r3
 8005430:	d833      	bhi.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	2380      	movs	r3, #128	@ 0x80
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	429a      	cmp	r2, r3
 800543a:	d017      	beq.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	2380      	movs	r3, #128	@ 0x80
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	429a      	cmp	r2, r3
 8005444:	d829      	bhi.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d005      	beq.n	8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x404>
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	2380      	movs	r3, #128	@ 0x80
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	429a      	cmp	r2, r3
 8005454:	d005      	beq.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 8005456:	e020      	b.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005458:	f7ff fb52 	bl	8004b00 <HAL_RCC_GetPCLK1Freq>
 800545c:	0003      	movs	r3, r0
 800545e:	61fb      	str	r3, [r7, #28]
            break;
 8005460:	e022      	b.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            frequency = HAL_RCC_GetSysClockFreq();
 8005462:	f7ff faa7 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8005466:	0003      	movs	r3, r0
 8005468:	61fb      	str	r3, [r7, #28]
            break;
 800546a:	e01d      	b.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x454>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800546c:	4b94      	ldr	r3, [pc, #592]	@ (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	2380      	movs	r3, #128	@ 0x80
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	401a      	ands	r2, r3
 8005476:	2380      	movs	r3, #128	@ 0x80
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	429a      	cmp	r2, r3
 800547c:	d110      	bne.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
              frequency = HSI_VALUE;
 800547e:	4b91      	ldr	r3, [pc, #580]	@ (80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8005480:	61fb      	str	r3, [r7, #28]
            break;
 8005482:	e00d      	b.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005484:	4a8e      	ldr	r2, [pc, #568]	@ (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8005486:	2390      	movs	r3, #144	@ 0x90
 8005488:	58d3      	ldr	r3, [r2, r3]
 800548a:	2202      	movs	r2, #2
 800548c:	4013      	ands	r3, r2
 800548e:	2b02      	cmp	r3, #2
 8005490:	d109      	bne.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
              frequency = LSE_VALUE;
 8005492:	2380      	movs	r3, #128	@ 0x80
 8005494:	021b      	lsls	r3, r3, #8
 8005496:	61fb      	str	r3, [r7, #28]
            break;
 8005498:	e005      	b.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            break;
 800549a:	46c0      	nop			@ (mov r8, r8)
 800549c:	f000 fb1b 	bl	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80054a0:	46c0      	nop			@ (mov r8, r8)
 80054a2:	f000 fb18 	bl	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80054a6:	46c0      	nop			@ (mov r8, r8)
        break;
 80054a8:	f000 fb15 	bl	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPUART3_SOURCE();
 80054ac:	4a84      	ldr	r2, [pc, #528]	@ (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80054ae:	2388      	movs	r3, #136	@ 0x88
 80054b0:	58d3      	ldr	r3, [r2, r3]
 80054b2:	22c0      	movs	r2, #192	@ 0xc0
 80054b4:	4013      	ands	r3, r2
 80054b6:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80054bc:	d025      	beq.n	800550a <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2bc0      	cmp	r3, #192	@ 0xc0
 80054c2:	d82d      	bhi.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	2b80      	cmp	r3, #128	@ 0x80
 80054c8:	d013      	beq.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2b80      	cmp	r3, #128	@ 0x80
 80054ce:	d827      	bhi.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2b40      	cmp	r3, #64	@ 0x40
 80054da:	d005      	beq.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            break;
 80054dc:	e020      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 80054de:	f7ff fb0f 	bl	8004b00 <HAL_RCC_GetPCLK1Freq>
 80054e2:	0003      	movs	r3, r0
 80054e4:	61fb      	str	r3, [r7, #28]
            break;
 80054e6:	e020      	b.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            frequency = HAL_RCC_GetSysClockFreq();
 80054e8:	f7ff fa64 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 80054ec:	0003      	movs	r3, r0
 80054ee:	61fb      	str	r3, [r7, #28]
            break;
 80054f0:	e01b      	b.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80054f2:	4b73      	ldr	r3, [pc, #460]	@ (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	2380      	movs	r3, #128	@ 0x80
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	401a      	ands	r2, r3
 80054fc:	2380      	movs	r3, #128	@ 0x80
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	429a      	cmp	r2, r3
 8005502:	d10f      	bne.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
              frequency = HSI_VALUE;
 8005504:	4b6f      	ldr	r3, [pc, #444]	@ (80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8005506:	61fb      	str	r3, [r7, #28]
            break;
 8005508:	e00c      	b.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800550a:	4a6d      	ldr	r2, [pc, #436]	@ (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800550c:	2390      	movs	r3, #144	@ 0x90
 800550e:	58d3      	ldr	r3, [r2, r3]
 8005510:	2202      	movs	r2, #2
 8005512:	4013      	ands	r3, r2
 8005514:	2b02      	cmp	r3, #2
 8005516:	d107      	bne.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
              frequency = LSE_VALUE;
 8005518:	2380      	movs	r3, #128	@ 0x80
 800551a:	021b      	lsls	r3, r3, #8
 800551c:	61fb      	str	r3, [r7, #28]
            break;
 800551e:	e003      	b.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            break;
 8005520:	46c0      	nop			@ (mov r8, r8)
 8005522:	e2d8      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8005524:	46c0      	nop			@ (mov r8, r8)
 8005526:	e2d6      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8005528:	46c0      	nop			@ (mov r8, r8)
        break;
 800552a:	e2d4      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800552c:	4a64      	ldr	r2, [pc, #400]	@ (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800552e:	2388      	movs	r3, #136	@ 0x88
 8005530:	58d2      	ldr	r2, [r2, r3]
 8005532:	23c0      	movs	r3, #192	@ 0xc0
 8005534:	059b      	lsls	r3, r3, #22
 8005536:	4013      	ands	r3, r2
 8005538:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	2380      	movs	r3, #128	@ 0x80
 800553e:	059b      	lsls	r3, r3, #22
 8005540:	429a      	cmp	r2, r3
 8005542:	d012      	beq.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	2380      	movs	r3, #128	@ 0x80
 8005548:	059b      	lsls	r3, r3, #22
 800554a:	429a      	cmp	r2, r3
 800554c:	d825      	bhi.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d005      	beq.n	8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	2380      	movs	r3, #128	@ 0x80
 8005558:	055b      	lsls	r3, r3, #21
 800555a:	429a      	cmp	r2, r3
 800555c:	d014      	beq.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x534>
            break;
 800555e:	e01c      	b.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
            frequency = HAL_RCC_GetSysClockFreq();
 8005560:	f7ff fa28 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8005564:	0003      	movs	r3, r0
 8005566:	61fb      	str	r3, [r7, #28]
            break;
 8005568:	e018      	b.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800556a:	4b55      	ldr	r3, [pc, #340]	@ (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	2380      	movs	r3, #128	@ 0x80
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	401a      	ands	r2, r3
 8005574:	2380      	movs	r3, #128	@ 0x80
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	429a      	cmp	r2, r3
 800557a:	d102      	bne.n	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
              frequency = HSI_VALUE;
 800557c:	4b51      	ldr	r3, [pc, #324]	@ (80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 800557e:	61fb      	str	r3, [r7, #28]
            break;
 8005580:	e00c      	b.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
              frequency = 0U;
 8005582:	2300      	movs	r3, #0
 8005584:	61fb      	str	r3, [r7, #28]
            break;
 8005586:	e009      	b.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8005588:	2408      	movs	r4, #8
 800558a:	193b      	adds	r3, r7, r4
 800558c:	0018      	movs	r0, r3
 800558e:	f000 faad 	bl	8005aec <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 8005592:	193b      	adds	r3, r7, r4
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	61fb      	str	r3, [r7, #28]
            break;
 8005598:	e000      	b.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
            break;
 800559a:	46c0      	nop			@ (mov r8, r8)
        break;
 800559c:	e29b      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800559e:	4a48      	ldr	r2, [pc, #288]	@ (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80055a0:	2388      	movs	r3, #136	@ 0x88
 80055a2:	58d2      	ldr	r2, [r2, r3]
 80055a4:	23c0      	movs	r3, #192	@ 0xc0
 80055a6:	019b      	lsls	r3, r3, #6
 80055a8:	4013      	ands	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	2380      	movs	r3, #128	@ 0x80
 80055b0:	019b      	lsls	r3, r3, #6
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d017      	beq.n	80055e6 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	2380      	movs	r3, #128	@ 0x80
 80055ba:	019b      	lsls	r3, r3, #6
 80055bc:	429a      	cmp	r2, r3
 80055be:	d81e      	bhi.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d005      	beq.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	2380      	movs	r3, #128	@ 0x80
 80055ca:	015b      	lsls	r3, r3, #5
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d005      	beq.n	80055dc <HAL_RCCEx_GetPeriphCLKFreq+0x588>
            break;
 80055d0:	e015      	b.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
            frequency = HAL_RCC_GetPCLK1Freq();
 80055d2:	f7ff fa95 	bl	8004b00 <HAL_RCC_GetPCLK1Freq>
 80055d6:	0003      	movs	r3, r0
 80055d8:	61fb      	str	r3, [r7, #28]
            break;
 80055da:	e013      	b.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            frequency = HAL_RCC_GetSysClockFreq();
 80055dc:	f7ff f9ea 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 80055e0:	0003      	movs	r3, r0
 80055e2:	61fb      	str	r3, [r7, #28]
            break;
 80055e4:	e00e      	b.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80055e6:	4b36      	ldr	r3, [pc, #216]	@ (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	2380      	movs	r3, #128	@ 0x80
 80055ec:	00db      	lsls	r3, r3, #3
 80055ee:	401a      	ands	r2, r3
 80055f0:	2380      	movs	r3, #128	@ 0x80
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d104      	bne.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
              frequency = HSI_VALUE;
 80055f8:	4b32      	ldr	r3, [pc, #200]	@ (80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 80055fa:	61fb      	str	r3, [r7, #28]
            break;
 80055fc:	e001      	b.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
            break;
 80055fe:	46c0      	nop			@ (mov r8, r8)
 8005600:	e269      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8005602:	46c0      	nop			@ (mov r8, r8)
        break;
 8005604:	e267      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005606:	4a2e      	ldr	r2, [pc, #184]	@ (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8005608:	2388      	movs	r3, #136	@ 0x88
 800560a:	58d2      	ldr	r2, [r2, r3]
 800560c:	23c0      	movs	r3, #192	@ 0xc0
 800560e:	029b      	lsls	r3, r3, #10
 8005610:	4013      	ands	r3, r2
 8005612:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	2380      	movs	r3, #128	@ 0x80
 8005618:	029b      	lsls	r3, r3, #10
 800561a:	429a      	cmp	r2, r3
 800561c:	d017      	beq.n	800564e <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	2380      	movs	r3, #128	@ 0x80
 8005622:	029b      	lsls	r3, r3, #10
 8005624:	429a      	cmp	r2, r3
 8005626:	d81e      	bhi.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d005      	beq.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	2380      	movs	r3, #128	@ 0x80
 8005632:	025b      	lsls	r3, r3, #9
 8005634:	429a      	cmp	r2, r3
 8005636:	d005      	beq.n	8005644 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
            break;
 8005638:	e015      	b.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            frequency = HAL_RCC_GetPCLK1Freq();
 800563a:	f7ff fa61 	bl	8004b00 <HAL_RCC_GetPCLK1Freq>
 800563e:	0003      	movs	r3, r0
 8005640:	61fb      	str	r3, [r7, #28]
            break;
 8005642:	e013      	b.n	800566c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HAL_RCC_GetSysClockFreq();
 8005644:	f7ff f9b6 	bl	80049b4 <HAL_RCC_GetSysClockFreq>
 8005648:	0003      	movs	r3, r0
 800564a:	61fb      	str	r3, [r7, #28]
            break;
 800564c:	e00e      	b.n	800566c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800564e:	4b1c      	ldr	r3, [pc, #112]	@ (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	2380      	movs	r3, #128	@ 0x80
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	401a      	ands	r2, r3
 8005658:	2380      	movs	r3, #128	@ 0x80
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	429a      	cmp	r2, r3
 800565e:	d104      	bne.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
              frequency = HSI_VALUE;
 8005660:	4b18      	ldr	r3, [pc, #96]	@ (80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>)
 8005662:	61fb      	str	r3, [r7, #28]
            break;
 8005664:	e001      	b.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
            break;
 8005666:	46c0      	nop			@ (mov r8, r8)
 8005668:	e235      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800566a:	46c0      	nop			@ (mov r8, r8)
        break;
 800566c:	e233      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800566e:	4a14      	ldr	r2, [pc, #80]	@ (80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>)
 8005670:	2388      	movs	r3, #136	@ 0x88
 8005672:	58d2      	ldr	r2, [r2, r3]
 8005674:	23c0      	movs	r3, #192	@ 0xc0
 8005676:	031b      	lsls	r3, r3, #12
 8005678:	4013      	ands	r3, r2
 800567a:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	23c0      	movs	r3, #192	@ 0xc0
 8005680:	031b      	lsls	r3, r3, #12
 8005682:	429a      	cmp	r2, r3
 8005684:	d041      	beq.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	23c0      	movs	r3, #192	@ 0xc0
 800568a:	031b      	lsls	r3, r3, #12
 800568c:	429a      	cmp	r2, r3
 800568e:	d847      	bhi.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	2380      	movs	r3, #128	@ 0x80
 8005694:	031b      	lsls	r3, r3, #12
 8005696:	429a      	cmp	r2, r3
 8005698:	d02b      	beq.n	80056f2 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	2380      	movs	r3, #128	@ 0x80
 800569e:	031b      	lsls	r3, r3, #12
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d83d      	bhi.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d005      	beq.n	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	2380      	movs	r3, #128	@ 0x80
 80056ae:	02db      	lsls	r3, r3, #11
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d009      	beq.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            break;
 80056b4:	e034      	b.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
            frequency = HAL_RCC_GetPCLK1Freq();
 80056b6:	f7ff fa23 	bl	8004b00 <HAL_RCC_GetPCLK1Freq>
 80056ba:	0003      	movs	r3, r0
 80056bc:	61fb      	str	r3, [r7, #28]
            break;
 80056be:	e036      	b.n	800572e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80056c0:	40021000 	.word	0x40021000
 80056c4:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80056c8:	4abd      	ldr	r2, [pc, #756]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80056ca:	2394      	movs	r3, #148	@ 0x94
 80056cc:	58d3      	ldr	r3, [r2, r3]
 80056ce:	2202      	movs	r2, #2
 80056d0:	4013      	ands	r3, r2
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d126      	bne.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 80056d6:	4aba      	ldr	r2, [pc, #744]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80056d8:	2394      	movs	r3, #148	@ 0x94
 80056da:	58d3      	ldr	r3, [r2, r3]
 80056dc:	2204      	movs	r2, #4
 80056de:	4013      	ands	r3, r2
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d102      	bne.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x696>
                frequency = LSI_VALUE / 128U;
 80056e4:	23fa      	movs	r3, #250	@ 0xfa
 80056e6:	61fb      	str	r3, [r7, #28]
            break;
 80056e8:	e01c      	b.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
                frequency = LSI_VALUE;
 80056ea:	23fa      	movs	r3, #250	@ 0xfa
 80056ec:	01db      	lsls	r3, r3, #7
 80056ee:	61fb      	str	r3, [r7, #28]
            break;
 80056f0:	e018      	b.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80056f2:	4bb3      	ldr	r3, [pc, #716]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	2380      	movs	r3, #128	@ 0x80
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	401a      	ands	r2, r3
 80056fc:	2380      	movs	r3, #128	@ 0x80
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	429a      	cmp	r2, r3
 8005702:	d111      	bne.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
              frequency = HSI_VALUE;
 8005704:	4baf      	ldr	r3, [pc, #700]	@ (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 8005706:	61fb      	str	r3, [r7, #28]
            break;
 8005708:	e00e      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800570a:	4aad      	ldr	r2, [pc, #692]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800570c:	2390      	movs	r3, #144	@ 0x90
 800570e:	58d3      	ldr	r3, [r2, r3]
 8005710:	2202      	movs	r2, #2
 8005712:	4013      	ands	r3, r2
 8005714:	2b02      	cmp	r3, #2
 8005716:	d109      	bne.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
              frequency = LSE_VALUE;
 8005718:	2380      	movs	r3, #128	@ 0x80
 800571a:	021b      	lsls	r3, r3, #8
 800571c:	61fb      	str	r3, [r7, #28]
            break;
 800571e:	e005      	b.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
            break;
 8005720:	46c0      	nop			@ (mov r8, r8)
 8005722:	e1d8      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8005724:	46c0      	nop			@ (mov r8, r8)
 8005726:	e1d6      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8005728:	46c0      	nop			@ (mov r8, r8)
 800572a:	e1d4      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800572c:	46c0      	nop			@ (mov r8, r8)
        break;
 800572e:	e1d2      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005730:	4aa3      	ldr	r2, [pc, #652]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8005732:	2388      	movs	r3, #136	@ 0x88
 8005734:	58d2      	ldr	r2, [r2, r3]
 8005736:	23c0      	movs	r3, #192	@ 0xc0
 8005738:	039b      	lsls	r3, r3, #14
 800573a:	4013      	ands	r3, r2
 800573c:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	23c0      	movs	r3, #192	@ 0xc0
 8005742:	039b      	lsls	r3, r3, #14
 8005744:	429a      	cmp	r2, r3
 8005746:	d03d      	beq.n	80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	23c0      	movs	r3, #192	@ 0xc0
 800574c:	039b      	lsls	r3, r3, #14
 800574e:	429a      	cmp	r2, r3
 8005750:	d843      	bhi.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	2380      	movs	r3, #128	@ 0x80
 8005756:	039b      	lsls	r3, r3, #14
 8005758:	429a      	cmp	r2, r3
 800575a:	d027      	beq.n	80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x758>
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	2380      	movs	r3, #128	@ 0x80
 8005760:	039b      	lsls	r3, r3, #14
 8005762:	429a      	cmp	r2, r3
 8005764:	d839      	bhi.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d005      	beq.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	2380      	movs	r3, #128	@ 0x80
 8005770:	035b      	lsls	r3, r3, #13
 8005772:	429a      	cmp	r2, r3
 8005774:	d005      	beq.n	8005782 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
            break;
 8005776:	e030      	b.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x786>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005778:	f7ff f9c2 	bl	8004b00 <HAL_RCC_GetPCLK1Freq>
 800577c:	0003      	movs	r3, r0
 800577e:	61fb      	str	r3, [r7, #28]
            break;
 8005780:	e032      	b.n	80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005782:	4a8f      	ldr	r2, [pc, #572]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8005784:	2394      	movs	r3, #148	@ 0x94
 8005786:	58d3      	ldr	r3, [r2, r3]
 8005788:	2202      	movs	r2, #2
 800578a:	4013      	ands	r3, r2
 800578c:	2b02      	cmp	r3, #2
 800578e:	d126      	bne.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8005790:	4a8b      	ldr	r2, [pc, #556]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8005792:	2394      	movs	r3, #148	@ 0x94
 8005794:	58d3      	ldr	r3, [r2, r3]
 8005796:	2204      	movs	r2, #4
 8005798:	4013      	ands	r3, r2
 800579a:	2b04      	cmp	r3, #4
 800579c:	d102      	bne.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
                frequency = LSI_VALUE / 128U;
 800579e:	23fa      	movs	r3, #250	@ 0xfa
 80057a0:	61fb      	str	r3, [r7, #28]
            break;
 80057a2:	e01c      	b.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
                frequency = LSI_VALUE;
 80057a4:	23fa      	movs	r3, #250	@ 0xfa
 80057a6:	01db      	lsls	r3, r3, #7
 80057a8:	61fb      	str	r3, [r7, #28]
            break;
 80057aa:	e018      	b.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80057ac:	4b84      	ldr	r3, [pc, #528]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	2380      	movs	r3, #128	@ 0x80
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	401a      	ands	r2, r3
 80057b6:	2380      	movs	r3, #128	@ 0x80
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d111      	bne.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
              frequency = HSI_VALUE;
 80057be:	4b81      	ldr	r3, [pc, #516]	@ (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 80057c0:	61fb      	str	r3, [r7, #28]
            break;
 80057c2:	e00e      	b.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80057c4:	4a7e      	ldr	r2, [pc, #504]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80057c6:	2390      	movs	r3, #144	@ 0x90
 80057c8:	58d3      	ldr	r3, [r2, r3]
 80057ca:	2202      	movs	r2, #2
 80057cc:	4013      	ands	r3, r2
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d109      	bne.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
              frequency = LSE_VALUE;
 80057d2:	2380      	movs	r3, #128	@ 0x80
 80057d4:	021b      	lsls	r3, r3, #8
 80057d6:	61fb      	str	r3, [r7, #28]
            break;
 80057d8:	e005      	b.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
            break;
 80057da:	46c0      	nop			@ (mov r8, r8)
 80057dc:	e17b      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80057de:	46c0      	nop			@ (mov r8, r8)
 80057e0:	e179      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80057e2:	46c0      	nop			@ (mov r8, r8)
 80057e4:	e177      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80057e6:	46c0      	nop			@ (mov r8, r8)
        break;
 80057e8:	e175      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80057ea:	4a75      	ldr	r2, [pc, #468]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80057ec:	2388      	movs	r3, #136	@ 0x88
 80057ee:	58d2      	ldr	r2, [r2, r3]
 80057f0:	23c0      	movs	r3, #192	@ 0xc0
 80057f2:	041b      	lsls	r3, r3, #16
 80057f4:	4013      	ands	r3, r2
 80057f6:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	23c0      	movs	r3, #192	@ 0xc0
 80057fc:	041b      	lsls	r3, r3, #16
 80057fe:	429a      	cmp	r2, r3
 8005800:	d03d      	beq.n	800587e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	23c0      	movs	r3, #192	@ 0xc0
 8005806:	041b      	lsls	r3, r3, #16
 8005808:	429a      	cmp	r2, r3
 800580a:	d843      	bhi.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	2380      	movs	r3, #128	@ 0x80
 8005810:	041b      	lsls	r3, r3, #16
 8005812:	429a      	cmp	r2, r3
 8005814:	d027      	beq.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	2380      	movs	r3, #128	@ 0x80
 800581a:	041b      	lsls	r3, r3, #16
 800581c:	429a      	cmp	r2, r3
 800581e:	d839      	bhi.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d005      	beq.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	2380      	movs	r3, #128	@ 0x80
 800582a:	03db      	lsls	r3, r3, #15
 800582c:	429a      	cmp	r2, r3
 800582e:	d005      	beq.n	800583c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
            break;
 8005830:	e030      	b.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005832:	f7ff f965 	bl	8004b00 <HAL_RCC_GetPCLK1Freq>
 8005836:	0003      	movs	r3, r0
 8005838:	61fb      	str	r3, [r7, #28]
            break;
 800583a:	e032      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x84e>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800583c:	4a60      	ldr	r2, [pc, #384]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800583e:	2394      	movs	r3, #148	@ 0x94
 8005840:	58d3      	ldr	r3, [r2, r3]
 8005842:	2202      	movs	r2, #2
 8005844:	4013      	ands	r3, r2
 8005846:	2b02      	cmp	r3, #2
 8005848:	d126      	bne.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800584a:	4a5d      	ldr	r2, [pc, #372]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800584c:	2394      	movs	r3, #148	@ 0x94
 800584e:	58d3      	ldr	r3, [r2, r3]
 8005850:	2204      	movs	r2, #4
 8005852:	4013      	ands	r3, r2
 8005854:	2b04      	cmp	r3, #4
 8005856:	d102      	bne.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
                frequency = LSI_VALUE / 128U;
 8005858:	23fa      	movs	r3, #250	@ 0xfa
 800585a:	61fb      	str	r3, [r7, #28]
            break;
 800585c:	e01c      	b.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
                frequency = LSI_VALUE;
 800585e:	23fa      	movs	r3, #250	@ 0xfa
 8005860:	01db      	lsls	r3, r3, #7
 8005862:	61fb      	str	r3, [r7, #28]
            break;
 8005864:	e018      	b.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005866:	4b56      	ldr	r3, [pc, #344]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	2380      	movs	r3, #128	@ 0x80
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	401a      	ands	r2, r3
 8005870:	2380      	movs	r3, #128	@ 0x80
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	429a      	cmp	r2, r3
 8005876:	d111      	bne.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
              frequency = HSI_VALUE;
 8005878:	4b52      	ldr	r3, [pc, #328]	@ (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
 800587a:	61fb      	str	r3, [r7, #28]
            break;
 800587c:	e00e      	b.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800587e:	4a50      	ldr	r2, [pc, #320]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8005880:	2390      	movs	r3, #144	@ 0x90
 8005882:	58d3      	ldr	r3, [r2, r3]
 8005884:	2202      	movs	r2, #2
 8005886:	4013      	ands	r3, r2
 8005888:	2b02      	cmp	r3, #2
 800588a:	d109      	bne.n	80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
              frequency = LSE_VALUE;
 800588c:	2380      	movs	r3, #128	@ 0x80
 800588e:	021b      	lsls	r3, r3, #8
 8005890:	61fb      	str	r3, [r7, #28]
            break;
 8005892:	e005      	b.n	80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>
            break;
 8005894:	46c0      	nop			@ (mov r8, r8)
 8005896:	e11e      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8005898:	46c0      	nop			@ (mov r8, r8)
 800589a:	e11c      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 800589c:	46c0      	nop			@ (mov r8, r8)
 800589e:	e11a      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 80058a0:	46c0      	nop			@ (mov r8, r8)
        break;
 80058a2:	e118      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 80058a4:	4a46      	ldr	r2, [pc, #280]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80058a6:	2388      	movs	r3, #136	@ 0x88
 80058a8:	58d2      	ldr	r2, [r2, r3]
 80058aa:	2380      	movs	r3, #128	@ 0x80
 80058ac:	045b      	lsls	r3, r3, #17
 80058ae:	4013      	ands	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d005      	beq.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	2380      	movs	r3, #128	@ 0x80
 80058bc:	045b      	lsls	r3, r3, #17
 80058be:	429a      	cmp	r2, r3
 80058c0:	d011      	beq.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
            break;
 80058c2:	e019      	b.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 80058c4:	4b3e      	ldr	r3, [pc, #248]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	23e0      	movs	r3, #224	@ 0xe0
 80058ca:	01db      	lsls	r3, r3, #7
 80058cc:	4013      	ands	r3, r2
 80058ce:	d104      	bne.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x886>
              frequency = HAL_RCC_GetPCLK1Freq();
 80058d0:	f7ff f916 	bl	8004b00 <HAL_RCC_GetPCLK1Freq>
 80058d4:	0003      	movs	r3, r0
 80058d6:	61fb      	str	r3, [r7, #28]
            break;
 80058d8:	e00e      	b.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 80058da:	f7ff f911 	bl	8004b00 <HAL_RCC_GetPCLK1Freq>
 80058de:	0003      	movs	r3, r0
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	61fb      	str	r3, [r7, #28]
            break;
 80058e4:	e008      	b.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80058e6:	2408      	movs	r4, #8
 80058e8:	193b      	adds	r3, r7, r4
 80058ea:	0018      	movs	r0, r3
 80058ec:	f000 f8fe 	bl	8005aec <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80058f0:	193b      	adds	r3, r7, r4
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	61fb      	str	r3, [r7, #28]
            break;
 80058f6:	46c0      	nop			@ (mov r8, r8)
        break;
 80058f8:	e0ed      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 80058fa:	4a31      	ldr	r2, [pc, #196]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80058fc:	2388      	movs	r3, #136	@ 0x88
 80058fe:	58d2      	ldr	r2, [r2, r3]
 8005900:	2380      	movs	r3, #128	@ 0x80
 8005902:	049b      	lsls	r3, r3, #18
 8005904:	4013      	ands	r3, r2
 8005906:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d005      	beq.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	2380      	movs	r3, #128	@ 0x80
 8005912:	049b      	lsls	r3, r3, #18
 8005914:	429a      	cmp	r2, r3
 8005916:	d011      	beq.n	800593c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
            break;
 8005918:	e019      	b.n	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 800591a:	4b29      	ldr	r3, [pc, #164]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 800591c:	689a      	ldr	r2, [r3, #8]
 800591e:	23e0      	movs	r3, #224	@ 0xe0
 8005920:	01db      	lsls	r3, r3, #7
 8005922:	4013      	ands	r3, r2
 8005924:	d104      	bne.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
              frequency = HAL_RCC_GetPCLK1Freq();
 8005926:	f7ff f8eb 	bl	8004b00 <HAL_RCC_GetPCLK1Freq>
 800592a:	0003      	movs	r3, r0
 800592c:	61fb      	str	r3, [r7, #28]
            break;
 800592e:	e00e      	b.n	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8005930:	f7ff f8e6 	bl	8004b00 <HAL_RCC_GetPCLK1Freq>
 8005934:	0003      	movs	r3, r0
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	61fb      	str	r3, [r7, #28]
            break;
 800593a:	e008      	b.n	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 800593c:	2408      	movs	r4, #8
 800593e:	193b      	adds	r3, r7, r4
 8005940:	0018      	movs	r0, r3
 8005942:	f000 f8d3 	bl	8005aec <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8005946:	193b      	adds	r3, r7, r4
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	61fb      	str	r3, [r7, #28]
            break;
 800594c:	46c0      	nop			@ (mov r8, r8)
        break;
 800594e:	e0c2      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8005950:	4a1b      	ldr	r2, [pc, #108]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 8005952:	2388      	movs	r3, #136	@ 0x88
 8005954:	58d2      	ldr	r2, [r2, r3]
 8005956:	23c0      	movs	r3, #192	@ 0xc0
 8005958:	051b      	lsls	r3, r3, #20
 800595a:	4013      	ands	r3, r2
 800595c:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	23c0      	movs	r3, #192	@ 0xc0
 8005962:	051b      	lsls	r3, r3, #20
 8005964:	429a      	cmp	r2, r3
 8005966:	d017      	beq.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	23c0      	movs	r3, #192	@ 0xc0
 800596c:	051b      	lsls	r3, r3, #20
 800596e:	429a      	cmp	r2, r3
 8005970:	d84a      	bhi.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	2380      	movs	r3, #128	@ 0x80
 8005976:	051b      	lsls	r3, r3, #20
 8005978:	429a      	cmp	r2, r3
 800597a:	d039      	beq.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	2380      	movs	r3, #128	@ 0x80
 8005980:	051b      	lsls	r3, r3, #20
 8005982:	429a      	cmp	r2, r3
 8005984:	d840      	bhi.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d03a      	beq.n	8005a02 <HAL_RCCEx_GetPeriphCLKFreq+0x9ae>
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	2380      	movs	r3, #128	@ 0x80
 8005990:	04db      	lsls	r3, r3, #19
 8005992:	429a      	cmp	r2, r3
 8005994:	d003      	beq.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
            break;
 8005996:	e037      	b.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
            frequency = HSI48_VALUE;
 8005998:	4b0b      	ldr	r3, [pc, #44]	@ (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
 800599a:	61fb      	str	r3, [r7, #28]
            break;
 800599c:	e037      	b.n	8005a0e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800599e:	4b08      	ldr	r3, [pc, #32]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2202      	movs	r2, #2
 80059a4:	4013      	ands	r3, r2
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d130      	bne.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 80059aa:	4b05      	ldr	r3, [pc, #20]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2208      	movs	r2, #8
 80059b0:	4013      	ands	r3, r2
 80059b2:	d00b      	beq.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 80059b4:	4b02      	ldr	r3, [pc, #8]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	091b      	lsrs	r3, r3, #4
 80059ba:	220f      	movs	r2, #15
 80059bc:	4013      	ands	r3, r2
 80059be:	e00b      	b.n	80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
 80059c0:	40021000 	.word	0x40021000
 80059c4:	00f42400 	.word	0x00f42400
 80059c8:	02dc6c00 	.word	0x02dc6c00
 80059cc:	4a44      	ldr	r2, [pc, #272]	@ (8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 80059ce:	2394      	movs	r3, #148	@ 0x94
 80059d0:	58d3      	ldr	r3, [r2, r3]
 80059d2:	0a1b      	lsrs	r3, r3, #8
 80059d4:	220f      	movs	r2, #15
 80059d6:	4013      	ands	r3, r2
 80059d8:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	2b0b      	cmp	r3, #11
 80059de:	d901      	bls.n	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
                msirange = 11U;
 80059e0:	230b      	movs	r3, #11
 80059e2:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 80059e4:	4b3f      	ldr	r3, [pc, #252]	@ (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	0092      	lsls	r2, r2, #2
 80059ea:	58d3      	ldr	r3, [r2, r3]
 80059ec:	61fb      	str	r3, [r7, #28]
            break;
 80059ee:	e00d      	b.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 80059f0:	2408      	movs	r4, #8
 80059f2:	193b      	adds	r3, r7, r4
 80059f4:	0018      	movs	r0, r3
 80059f6:	f000 f879 	bl	8005aec <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 80059fa:	193b      	adds	r3, r7, r4
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	61fb      	str	r3, [r7, #28]
            break;
 8005a00:	e005      	b.n	8005a0e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            frequency = 0U;
 8005a02:	2300      	movs	r3, #0
 8005a04:	61fb      	str	r3, [r7, #28]
            break;
 8005a06:	e002      	b.n	8005a0e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
            break;
 8005a08:	46c0      	nop			@ (mov r8, r8)
 8005a0a:	e064      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8005a0c:	46c0      	nop			@ (mov r8, r8)
        break;
 8005a0e:	e062      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005a10:	4a33      	ldr	r2, [pc, #204]	@ (8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8005a12:	2388      	movs	r3, #136	@ 0x88
 8005a14:	58d2      	ldr	r2, [r2, r3]
 8005a16:	23c0      	movs	r3, #192	@ 0xc0
 8005a18:	051b      	lsls	r3, r3, #20
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	23c0      	movs	r3, #192	@ 0xc0
 8005a22:	051b      	lsls	r3, r3, #20
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d017      	beq.n	8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0xa04>
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	23c0      	movs	r3, #192	@ 0xc0
 8005a2c:	051b      	lsls	r3, r3, #20
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d844      	bhi.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	2380      	movs	r3, #128	@ 0x80
 8005a36:	051b      	lsls	r3, r3, #20
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d033      	beq.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	2380      	movs	r3, #128	@ 0x80
 8005a40:	051b      	lsls	r3, r3, #20
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d83a      	bhi.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d034      	beq.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	2380      	movs	r3, #128	@ 0x80
 8005a50:	04db      	lsls	r3, r3, #19
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d003      	beq.n	8005a5e <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
            break;
 8005a56:	e031      	b.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            frequency = HSI48_VALUE;
 8005a58:	4b23      	ldr	r3, [pc, #140]	@ (8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>)
 8005a5a:	61fb      	str	r3, [r7, #28]
            break;
 8005a5c:	e031      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005a5e:	4b20      	ldr	r3, [pc, #128]	@ (8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2202      	movs	r2, #2
 8005a64:	4013      	ands	r3, r2
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d12a      	bne.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8005a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2208      	movs	r2, #8
 8005a70:	4013      	ands	r3, r2
 8005a72:	d005      	beq.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0xa2c>
 8005a74:	4b1a      	ldr	r3, [pc, #104]	@ (8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	091b      	lsrs	r3, r3, #4
 8005a7a:	220f      	movs	r2, #15
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	e005      	b.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8005a80:	4a17      	ldr	r2, [pc, #92]	@ (8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8c>)
 8005a82:	2394      	movs	r3, #148	@ 0x94
 8005a84:	58d3      	ldr	r3, [r2, r3]
 8005a86:	0a1b      	lsrs	r3, r3, #8
 8005a88:	220f      	movs	r2, #15
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2b0b      	cmp	r3, #11
 8005a92:	d901      	bls.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
                msirange = 11U;
 8005a94:	230b      	movs	r3, #11
 8005a96:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8005a98:	4b12      	ldr	r3, [pc, #72]	@ (8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>)
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	0092      	lsls	r2, r2, #2
 8005a9e:	58d3      	ldr	r3, [r2, r3]
 8005aa0:	61fb      	str	r3, [r7, #28]
            break;
 8005aa2:	e00d      	b.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8005aa4:	2408      	movs	r4, #8
 8005aa6:	193b      	adds	r3, r7, r4
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	f000 f81f 	bl	8005aec <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8005aae:	193b      	adds	r3, r7, r4
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	61fb      	str	r3, [r7, #28]
            break;
 8005ab4:	e005      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = 0U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	61fb      	str	r3, [r7, #28]
            break;
 8005aba:	e002      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            break;
 8005abc:	46c0      	nop			@ (mov r8, r8)
 8005abe:	e00a      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
            break;
 8005ac0:	46c0      	nop			@ (mov r8, r8)
        break;
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8005ac4:	46c0      	nop			@ (mov r8, r8)
 8005ac6:	e006      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8005ac8:	46c0      	nop			@ (mov r8, r8)
 8005aca:	e004      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8005acc:	46c0      	nop			@ (mov r8, r8)
 8005ace:	e002      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8005ad0:	46c0      	nop			@ (mov r8, r8)
 8005ad2:	e000      	b.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
        break;
 8005ad4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 8005ad6:	69fb      	ldr	r3, [r7, #28]
}
 8005ad8:	0018      	movs	r0, r3
 8005ada:	46bd      	mov	sp, r7
 8005adc:	b009      	add	sp, #36	@ 0x24
 8005ade:	bd90      	pop	{r4, r7, pc}
 8005ae0:	40021000 	.word	0x40021000
 8005ae4:	0800d0ac 	.word	0x0800d0ac
 8005ae8:	02dc6c00 	.word	0x02dc6c00

08005aec <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b088      	sub	sp, #32
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005af4:	4b58      	ldr	r3, [pc, #352]	@ (8005c58 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	0a1b      	lsrs	r3, r3, #8
 8005afa:	227f      	movs	r2, #127	@ 0x7f
 8005afc:	4013      	ands	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005b00:	4b55      	ldr	r3, [pc, #340]	@ (8005c58 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	2203      	movs	r2, #3
 8005b06:	4013      	ands	r3, r2
 8005b08:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8005b0a:	4b53      	ldr	r3, [pc, #332]	@ (8005c58 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	091b      	lsrs	r3, r3, #4
 8005b10:	2207      	movs	r2, #7
 8005b12:	4013      	ands	r3, r2
 8005b14:	3301      	adds	r3, #1
 8005b16:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8005b18:	4b4f      	ldr	r3, [pc, #316]	@ (8005c58 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2208      	movs	r2, #8
 8005b1e:	4013      	ands	r3, r2
 8005b20:	d005      	beq.n	8005b2e <HAL_RCCEx_GetPLLClockFreq+0x42>
 8005b22:	4b4d      	ldr	r3, [pc, #308]	@ (8005c58 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	091b      	lsrs	r3, r3, #4
 8005b28:	220f      	movs	r2, #15
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	e005      	b.n	8005b3a <HAL_RCCEx_GetPLLClockFreq+0x4e>
 8005b2e:	4a4a      	ldr	r2, [pc, #296]	@ (8005c58 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8005b30:	2394      	movs	r3, #148	@ 0x94
 8005b32:	58d3      	ldr	r3, [r2, r3]
 8005b34:	0a1b      	lsrs	r3, r3, #8
 8005b36:	220f      	movs	r2, #15
 8005b38:	4013      	ands	r3, r2
 8005b3a:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	2b0b      	cmp	r3, #11
 8005b40:	d901      	bls.n	8005b46 <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 8005b42:	230b      	movs	r3, #11
 8005b44:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2b03      	cmp	r3, #3
 8005b4a:	d020      	beq.n	8005b8e <HAL_RCCEx_GetPLLClockFreq+0xa2>
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d827      	bhi.n	8005ba2 <HAL_RCCEx_GetPLLClockFreq+0xb6>
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d00c      	beq.n	8005b72 <HAL_RCCEx_GetPLLClockFreq+0x86>
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d121      	bne.n	8005ba2 <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 8005b5e:	68f9      	ldr	r1, [r7, #12]
 8005b60:	483e      	ldr	r0, [pc, #248]	@ (8005c5c <HAL_RCCEx_GetPLLClockFreq+0x170>)
 8005b62:	f7fa fae3 	bl	800012c <__udivsi3>
 8005b66:	0003      	movs	r3, r0
 8005b68:	001a      	movs	r2, r3
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	4353      	muls	r3, r2
 8005b6e:	61fb      	str	r3, [r7, #28]
      break;
 8005b70:	e025      	b.n	8005bbe <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8005b72:	4b3b      	ldr	r3, [pc, #236]	@ (8005c60 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	0092      	lsls	r2, r2, #2
 8005b78:	58d3      	ldr	r3, [r2, r3]
 8005b7a:	68f9      	ldr	r1, [r7, #12]
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	f7fa fad5 	bl	800012c <__udivsi3>
 8005b82:	0003      	movs	r3, r0
 8005b84:	001a      	movs	r2, r3
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	4353      	muls	r3, r2
 8005b8a:	61fb      	str	r3, [r7, #28]
      break;
 8005b8c:	e017      	b.n	8005bbe <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 8005b8e:	68f9      	ldr	r1, [r7, #12]
 8005b90:	4834      	ldr	r0, [pc, #208]	@ (8005c64 <HAL_RCCEx_GetPLLClockFreq+0x178>)
 8005b92:	f7fa facb 	bl	800012c <__udivsi3>
 8005b96:	0003      	movs	r3, r0
 8005b98:	001a      	movs	r2, r3
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	4353      	muls	r3, r2
 8005b9e:	61fb      	str	r3, [r7, #28]
      break;
 8005ba0:	e00d      	b.n	8005bbe <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8005ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8005c60 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	0092      	lsls	r2, r2, #2
 8005ba8:	58d3      	ldr	r3, [r2, r3]
 8005baa:	68f9      	ldr	r1, [r7, #12]
 8005bac:	0018      	movs	r0, r3
 8005bae:	f7fa fabd 	bl	800012c <__udivsi3>
 8005bb2:	0003      	movs	r3, r0
 8005bb4:	001a      	movs	r2, r3
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	4353      	muls	r3, r2
 8005bba:	61fb      	str	r3, [r7, #28]
      break;
 8005bbc:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 8005bbe:	4b26      	ldr	r3, [pc, #152]	@ (8005c58 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	2380      	movs	r3, #128	@ 0x80
 8005bc4:	025b      	lsls	r3, r3, #9
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	d00e      	beq.n	8005be8 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8005bca:	4b23      	ldr	r3, [pc, #140]	@ (8005c58 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8005bcc:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 8005bce:	0c5b      	lsrs	r3, r3, #17
 8005bd0:	221f      	movs	r2, #31
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8005bd6:	0019      	movs	r1, r3
 8005bd8:	69f8      	ldr	r0, [r7, #28]
 8005bda:	f7fa faa7 	bl	800012c <__udivsi3>
 8005bde:	0003      	movs	r3, r0
 8005be0:	001a      	movs	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	e002      	b.n	8005bee <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 8005bee:	4b1a      	ldr	r3, [pc, #104]	@ (8005c58 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8005bf0:	68da      	ldr	r2, [r3, #12]
 8005bf2:	2380      	movs	r3, #128	@ 0x80
 8005bf4:	045b      	lsls	r3, r3, #17
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	d00e      	beq.n	8005c18 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8005bfa:	4b17      	ldr	r3, [pc, #92]	@ (8005c58 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8005bfc:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 8005bfe:	0e5b      	lsrs	r3, r3, #25
 8005c00:	2207      	movs	r2, #7
 8005c02:	4013      	ands	r3, r2
 8005c04:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8005c06:	0019      	movs	r1, r3
 8005c08:	69f8      	ldr	r0, [r7, #28]
 8005c0a:	f7fa fa8f 	bl	800012c <__udivsi3>
 8005c0e:	0003      	movs	r3, r0
 8005c10:	001a      	movs	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	605a      	str	r2, [r3, #4]
 8005c16:	e002      	b.n	8005c1e <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 8005c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c58 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	2380      	movs	r3, #128	@ 0x80
 8005c24:	055b      	lsls	r3, r3, #21
 8005c26:	4013      	ands	r3, r2
 8005c28:	d00e      	beq.n	8005c48 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8005c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c58 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8005c2c:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 8005c2e:	0f5b      	lsrs	r3, r3, #29
 8005c30:	2207      	movs	r2, #7
 8005c32:	4013      	ands	r3, r2
 8005c34:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8005c36:	0019      	movs	r1, r3
 8005c38:	69f8      	ldr	r0, [r7, #28]
 8005c3a:	f7fa fa77 	bl	800012c <__udivsi3>
 8005c3e:	0003      	movs	r3, r0
 8005c40:	001a      	movs	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 8005c46:	e002      	b.n	8005c4e <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	609a      	str	r2, [r3, #8]
}
 8005c4e:	46c0      	nop			@ (mov r8, r8)
 8005c50:	46bd      	mov	sp, r7
 8005c52:	b008      	add	sp, #32
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	46c0      	nop			@ (mov r8, r8)
 8005c58:	40021000 	.word	0x40021000
 8005c5c:	00f42400 	.word	0x00f42400
 8005c60:	0800d0ac 	.word	0x0800d0ac
 8005c64:	003d0900 	.word	0x003d0900

08005c68 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(const RCC_CRSInitTypeDef *const pInit)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8005c70:	4b1c      	ldr	r3, [pc, #112]	@ (8005ce4 <HAL_RCCEx_CRSConfig+0x7c>)
 8005c72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c74:	4b1b      	ldr	r3, [pc, #108]	@ (8005ce4 <HAL_RCCEx_CRSConfig+0x7c>)
 8005c76:	2180      	movs	r1, #128	@ 0x80
 8005c78:	0249      	lsls	r1, r1, #9
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 8005c7e:	4b19      	ldr	r3, [pc, #100]	@ (8005ce4 <HAL_RCCEx_CRSConfig+0x7c>)
 8005c80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c82:	4b18      	ldr	r3, [pc, #96]	@ (8005ce4 <HAL_RCCEx_CRSConfig+0x7c>)
 8005c84:	4918      	ldr	r1, [pc, #96]	@ (8005ce8 <HAL_RCCEx_CRSConfig+0x80>)
 8005c86:	400a      	ands	r2, r1
 8005c88:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	431a      	orrs	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	041b      	lsls	r3, r3, #16
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8005cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8005cec <HAL_RCCEx_CRSConfig+0x84>)
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	605a      	str	r2, [r3, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8005cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8005cec <HAL_RCCEx_CRSConfig+0x84>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a0c      	ldr	r2, [pc, #48]	@ (8005cf0 <HAL_RCCEx_CRSConfig+0x88>)
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	0019      	movs	r1, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	021a      	lsls	r2, r3, #8
 8005cc8:	4b08      	ldr	r3, [pc, #32]	@ (8005cec <HAL_RCCEx_CRSConfig+0x84>)
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	601a      	str	r2, [r3, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8005cce:	4b07      	ldr	r3, [pc, #28]	@ (8005cec <HAL_RCCEx_CRSConfig+0x84>)
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	4b06      	ldr	r3, [pc, #24]	@ (8005cec <HAL_RCCEx_CRSConfig+0x84>)
 8005cd4:	2160      	movs	r1, #96	@ 0x60
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	601a      	str	r2, [r3, #0]
}
 8005cda:	46c0      	nop			@ (mov r8, r8)
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	b004      	add	sp, #16
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	46c0      	nop			@ (mov r8, r8)
 8005ce4:	40021000 	.word	0x40021000
 8005ce8:	fffeffff 	.word	0xfffeffff
 8005cec:	40006c00 	.word	0x40006c00
 8005cf0:	ffffc0ff 	.word	0xffffc0ff

08005cf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e046      	b.n	8005d94 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2288      	movs	r2, #136	@ 0x88
 8005d0a:	589b      	ldr	r3, [r3, r2]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d107      	bne.n	8005d20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2284      	movs	r2, #132	@ 0x84
 8005d14:	2100      	movs	r1, #0
 8005d16:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	f7fa feb6 	bl	8000a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2288      	movs	r2, #136	@ 0x88
 8005d24:	2124      	movs	r1, #36	@ 0x24
 8005d26:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2101      	movs	r1, #1
 8005d34:	438a      	bics	r2, r1
 8005d36:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	0018      	movs	r0, r3
 8005d44:	f000 faa2 	bl	800628c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	0018      	movs	r0, r3
 8005d4c:	f000 f8cc 	bl	8005ee8 <UART_SetConfig>
 8005d50:	0003      	movs	r3, r0
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d101      	bne.n	8005d5a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e01c      	b.n	8005d94 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	490d      	ldr	r1, [pc, #52]	@ (8005d9c <HAL_UART_Init+0xa8>)
 8005d66:	400a      	ands	r2, r1
 8005d68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	212a      	movs	r1, #42	@ 0x2a
 8005d76:	438a      	bics	r2, r1
 8005d78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2101      	movs	r1, #1
 8005d86:	430a      	orrs	r2, r1
 8005d88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	f000 fb31 	bl	80063f4 <UART_CheckIdleState>
 8005d92:	0003      	movs	r3, r0
}
 8005d94:	0018      	movs	r0, r3
 8005d96:	46bd      	mov	sp, r7
 8005d98:	b002      	add	sp, #8
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	ffffb7ff 	.word	0xffffb7ff

08005da0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b08a      	sub	sp, #40	@ 0x28
 8005da4:	af02      	add	r7, sp, #8
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	1dbb      	adds	r3, r7, #6
 8005dae:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2288      	movs	r2, #136	@ 0x88
 8005db4:	589b      	ldr	r3, [r3, r2]
 8005db6:	2b20      	cmp	r3, #32
 8005db8:	d000      	beq.n	8005dbc <HAL_UART_Transmit+0x1c>
 8005dba:	e090      	b.n	8005ede <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_UART_Transmit+0x2a>
 8005dc2:	1dbb      	adds	r3, r7, #6
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e088      	b.n	8005ee0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	689a      	ldr	r2, [r3, #8]
 8005dd2:	2380      	movs	r3, #128	@ 0x80
 8005dd4:	015b      	lsls	r3, r3, #5
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d109      	bne.n	8005dee <HAL_UART_Transmit+0x4e>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d105      	bne.n	8005dee <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2201      	movs	r2, #1
 8005de6:	4013      	ands	r3, r2
 8005de8:	d001      	beq.n	8005dee <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e078      	b.n	8005ee0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2290      	movs	r2, #144	@ 0x90
 8005df2:	2100      	movs	r1, #0
 8005df4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2288      	movs	r2, #136	@ 0x88
 8005dfa:	2121      	movs	r1, #33	@ 0x21
 8005dfc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dfe:	f7fb ffc5 	bl	8001d8c <HAL_GetTick>
 8005e02:	0003      	movs	r3, r0
 8005e04:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	1dba      	adds	r2, r7, #6
 8005e0a:	2154      	movs	r1, #84	@ 0x54
 8005e0c:	8812      	ldrh	r2, [r2, #0]
 8005e0e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	1dba      	adds	r2, r7, #6
 8005e14:	2156      	movs	r1, #86	@ 0x56
 8005e16:	8812      	ldrh	r2, [r2, #0]
 8005e18:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	689a      	ldr	r2, [r3, #8]
 8005e1e:	2380      	movs	r3, #128	@ 0x80
 8005e20:	015b      	lsls	r3, r3, #5
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d108      	bne.n	8005e38 <HAL_UART_Transmit+0x98>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d104      	bne.n	8005e38 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	61bb      	str	r3, [r7, #24]
 8005e36:	e003      	b.n	8005e40 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e40:	e030      	b.n	8005ea4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	0013      	movs	r3, r2
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2180      	movs	r1, #128	@ 0x80
 8005e50:	f000 fb7a 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 8005e54:	1e03      	subs	r3, r0, #0
 8005e56:	d005      	beq.n	8005e64 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2288      	movs	r2, #136	@ 0x88
 8005e5c:	2120      	movs	r1, #32
 8005e5e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e03d      	b.n	8005ee0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10b      	bne.n	8005e82 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	001a      	movs	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	05d2      	lsls	r2, r2, #23
 8005e76:	0dd2      	lsrs	r2, r2, #23
 8005e78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	3302      	adds	r3, #2
 8005e7e:	61bb      	str	r3, [r7, #24]
 8005e80:	e007      	b.n	8005e92 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	781a      	ldrb	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2256      	movs	r2, #86	@ 0x56
 8005e96:	5a9b      	ldrh	r3, [r3, r2]
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	b299      	uxth	r1, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2256      	movs	r2, #86	@ 0x56
 8005ea2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2256      	movs	r2, #86	@ 0x56
 8005ea8:	5a9b      	ldrh	r3, [r3, r2]
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1c8      	bne.n	8005e42 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	0013      	movs	r3, r2
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2140      	movs	r1, #64	@ 0x40
 8005ebe:	f000 fb43 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 8005ec2:	1e03      	subs	r3, r0, #0
 8005ec4:	d005      	beq.n	8005ed2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2288      	movs	r2, #136	@ 0x88
 8005eca:	2120      	movs	r1, #32
 8005ecc:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e006      	b.n	8005ee0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2288      	movs	r2, #136	@ 0x88
 8005ed6:	2120      	movs	r1, #32
 8005ed8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	e000      	b.n	8005ee0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8005ede:	2302      	movs	r3, #2
  }
}
 8005ee0:	0018      	movs	r0, r3
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	b008      	add	sp, #32
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ee8:	b5b0      	push	{r4, r5, r7, lr}
 8005eea:	b092      	sub	sp, #72	@ 0x48
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ef0:	231f      	movs	r3, #31
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	189b      	adds	r3, r3, r2
 8005ef6:	19db      	adds	r3, r3, r7
 8005ef8:	2200      	movs	r2, #0
 8005efa:	701a      	strb	r2, [r3, #0]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4ac8      	ldr	r2, [pc, #800]	@ (8006224 <UART_SetConfig+0x33c>)
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f04:	689a      	ldr	r2, [r3, #8]
 8005f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	431a      	orrs	r2, r3
 8005f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4ac1      	ldr	r2, [pc, #772]	@ (8006228 <UART_SetConfig+0x340>)
 8005f22:	4013      	ands	r3, r2
 8005f24:	0019      	movs	r1, r3
 8005f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f2c:	430b      	orrs	r3, r1
 8005f2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	4abd      	ldr	r2, [pc, #756]	@ (800622c <UART_SetConfig+0x344>)
 8005f38:	4013      	ands	r3, r2
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3e:	68d9      	ldr	r1, [r3, #12]
 8005f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	0003      	movs	r3, r0
 8005f46:	430b      	orrs	r3, r1
 8005f48:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4ab3      	ldr	r2, [pc, #716]	@ (8006224 <UART_SetConfig+0x33c>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d00e      	beq.n	8005f78 <UART_SetConfig+0x90>
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4ab4      	ldr	r2, [pc, #720]	@ (8006230 <UART_SetConfig+0x348>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d009      	beq.n	8005f78 <UART_SetConfig+0x90>
 8005f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4ab2      	ldr	r2, [pc, #712]	@ (8006234 <UART_SetConfig+0x34c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d004      	beq.n	8005f78 <UART_SetConfig+0x90>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f74:	4313      	orrs	r3, r2
 8005f76:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	4aae      	ldr	r2, [pc, #696]	@ (8006238 <UART_SetConfig+0x350>)
 8005f80:	4013      	ands	r3, r2
 8005f82:	0019      	movs	r1, r3
 8005f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f8a:	430b      	orrs	r3, r1
 8005f8c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f94:	220f      	movs	r2, #15
 8005f96:	4393      	bics	r3, r2
 8005f98:	0018      	movs	r0, r3
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	0003      	movs	r3, r0
 8005fa4:	430b      	orrs	r3, r1
 8005fa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4aa3      	ldr	r2, [pc, #652]	@ (800623c <UART_SetConfig+0x354>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d102      	bne.n	8005fb8 <UART_SetConfig+0xd0>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fb6:	e033      	b.n	8006020 <UART_SetConfig+0x138>
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4aa0      	ldr	r2, [pc, #640]	@ (8006240 <UART_SetConfig+0x358>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d102      	bne.n	8005fc8 <UART_SetConfig+0xe0>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fc6:	e02b      	b.n	8006020 <UART_SetConfig+0x138>
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a9d      	ldr	r2, [pc, #628]	@ (8006244 <UART_SetConfig+0x35c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d103      	bne.n	8005fda <UART_SetConfig+0xf2>
 8005fd2:	2380      	movs	r3, #128	@ 0x80
 8005fd4:	025b      	lsls	r3, r3, #9
 8005fd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fd8:	e022      	b.n	8006020 <UART_SetConfig+0x138>
 8005fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a9a      	ldr	r2, [pc, #616]	@ (8006248 <UART_SetConfig+0x360>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d103      	bne.n	8005fec <UART_SetConfig+0x104>
 8005fe4:	2380      	movs	r3, #128	@ 0x80
 8005fe6:	029b      	lsls	r3, r3, #10
 8005fe8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fea:	e019      	b.n	8006020 <UART_SetConfig+0x138>
 8005fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a8c      	ldr	r2, [pc, #560]	@ (8006224 <UART_SetConfig+0x33c>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d102      	bne.n	8005ffc <UART_SetConfig+0x114>
 8005ff6:	2310      	movs	r3, #16
 8005ff8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ffa:	e011      	b.n	8006020 <UART_SetConfig+0x138>
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a8b      	ldr	r2, [pc, #556]	@ (8006230 <UART_SetConfig+0x348>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d102      	bne.n	800600c <UART_SetConfig+0x124>
 8006006:	2308      	movs	r3, #8
 8006008:	643b      	str	r3, [r7, #64]	@ 0x40
 800600a:	e009      	b.n	8006020 <UART_SetConfig+0x138>
 800600c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a88      	ldr	r2, [pc, #544]	@ (8006234 <UART_SetConfig+0x34c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d102      	bne.n	800601c <UART_SetConfig+0x134>
 8006016:	2304      	movs	r3, #4
 8006018:	643b      	str	r3, [r7, #64]	@ 0x40
 800601a:	e001      	b.n	8006020 <UART_SetConfig+0x138>
 800601c:	2300      	movs	r3, #0
 800601e:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a7f      	ldr	r2, [pc, #508]	@ (8006224 <UART_SetConfig+0x33c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d00a      	beq.n	8006040 <UART_SetConfig+0x158>
 800602a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a80      	ldr	r2, [pc, #512]	@ (8006230 <UART_SetConfig+0x348>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d005      	beq.n	8006040 <UART_SetConfig+0x158>
 8006034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a7e      	ldr	r2, [pc, #504]	@ (8006234 <UART_SetConfig+0x34c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d000      	beq.n	8006040 <UART_SetConfig+0x158>
 800603e:	e06f      	b.n	8006120 <UART_SetConfig+0x238>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006040:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006042:	0018      	movs	r0, r3
 8006044:	f7ff f806 	bl	8005054 <HAL_RCCEx_GetPeriphCLKFreq>
 8006048:	0003      	movs	r3, r0
 800604a:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 800604c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800604e:	2b00      	cmp	r3, #0
 8006050:	d100      	bne.n	8006054 <UART_SetConfig+0x16c>
 8006052:	e103      	b.n	800625c <UART_SetConfig+0x374>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006056:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006058:	4b7c      	ldr	r3, [pc, #496]	@ (800624c <UART_SetConfig+0x364>)
 800605a:	0052      	lsls	r2, r2, #1
 800605c:	5ad3      	ldrh	r3, [r2, r3]
 800605e:	0019      	movs	r1, r3
 8006060:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006062:	f7fa f863 	bl	800012c <__udivsi3>
 8006066:	0003      	movs	r3, r0
 8006068:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800606a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	0013      	movs	r3, r2
 8006070:	005b      	lsls	r3, r3, #1
 8006072:	189b      	adds	r3, r3, r2
 8006074:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006076:	429a      	cmp	r2, r3
 8006078:	d305      	bcc.n	8006086 <UART_SetConfig+0x19e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800607a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006080:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006082:	429a      	cmp	r2, r3
 8006084:	d906      	bls.n	8006094 <UART_SetConfig+0x1ac>
      {
        ret = HAL_ERROR;
 8006086:	231f      	movs	r3, #31
 8006088:	2220      	movs	r2, #32
 800608a:	189b      	adds	r3, r3, r2
 800608c:	19db      	adds	r3, r3, r7
 800608e:	2201      	movs	r2, #1
 8006090:	701a      	strb	r2, [r3, #0]
 8006092:	e044      	b.n	800611e <UART_SetConfig+0x236>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006096:	61bb      	str	r3, [r7, #24]
 8006098:	2300      	movs	r3, #0
 800609a:	61fb      	str	r3, [r7, #28]
 800609c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80060a0:	4b6a      	ldr	r3, [pc, #424]	@ (800624c <UART_SetConfig+0x364>)
 80060a2:	0052      	lsls	r2, r2, #1
 80060a4:	5ad3      	ldrh	r3, [r2, r3]
 80060a6:	613b      	str	r3, [r7, #16]
 80060a8:	2300      	movs	r3, #0
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	69b8      	ldr	r0, [r7, #24]
 80060b2:	69f9      	ldr	r1, [r7, #28]
 80060b4:	f7fa f9b0 	bl	8000418 <__aeabi_uldivmod>
 80060b8:	0002      	movs	r2, r0
 80060ba:	000b      	movs	r3, r1
 80060bc:	0e11      	lsrs	r1, r2, #24
 80060be:	021d      	lsls	r5, r3, #8
 80060c0:	430d      	orrs	r5, r1
 80060c2:	0214      	lsls	r4, r2, #8
 80060c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	085b      	lsrs	r3, r3, #1
 80060ca:	60bb      	str	r3, [r7, #8]
 80060cc:	2300      	movs	r3, #0
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	68b8      	ldr	r0, [r7, #8]
 80060d2:	68f9      	ldr	r1, [r7, #12]
 80060d4:	1900      	adds	r0, r0, r4
 80060d6:	4169      	adcs	r1, r5
 80060d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	603b      	str	r3, [r7, #0]
 80060de:	2300      	movs	r3, #0
 80060e0:	607b      	str	r3, [r7, #4]
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f7fa f997 	bl	8000418 <__aeabi_uldivmod>
 80060ea:	0002      	movs	r2, r0
 80060ec:	000b      	movs	r3, r1
 80060ee:	0013      	movs	r3, r2
 80060f0:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060f4:	23c0      	movs	r3, #192	@ 0xc0
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d309      	bcc.n	8006110 <UART_SetConfig+0x228>
 80060fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060fe:	2380      	movs	r3, #128	@ 0x80
 8006100:	035b      	lsls	r3, r3, #13
 8006102:	429a      	cmp	r2, r3
 8006104:	d204      	bcs.n	8006110 <UART_SetConfig+0x228>
        {
          huart->Instance->BRR = usartdiv;
 8006106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800610c:	60da      	str	r2, [r3, #12]
 800610e:	e006      	b.n	800611e <UART_SetConfig+0x236>
        }
        else
        {
          ret = HAL_ERROR;
 8006110:	231f      	movs	r3, #31
 8006112:	2220      	movs	r2, #32
 8006114:	189b      	adds	r3, r3, r2
 8006116:	19db      	adds	r3, r3, r7
 8006118:	2201      	movs	r2, #1
 800611a:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800611c:	e09e      	b.n	800625c <UART_SetConfig+0x374>
 800611e:	e09d      	b.n	800625c <UART_SetConfig+0x374>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006122:	69da      	ldr	r2, [r3, #28]
 8006124:	2380      	movs	r3, #128	@ 0x80
 8006126:	021b      	lsls	r3, r3, #8
 8006128:	429a      	cmp	r2, r3
 800612a:	d14c      	bne.n	80061c6 <UART_SetConfig+0x2de>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800612c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800612e:	0018      	movs	r0, r3
 8006130:	f7fe ff90 	bl	8005054 <HAL_RCCEx_GetPeriphCLKFreq>
 8006134:	0003      	movs	r3, r0
 8006136:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800613a:	2b00      	cmp	r3, #0
 800613c:	d100      	bne.n	8006140 <UART_SetConfig+0x258>
 800613e:	e08d      	b.n	800625c <UART_SetConfig+0x374>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006142:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006144:	4b41      	ldr	r3, [pc, #260]	@ (800624c <UART_SetConfig+0x364>)
 8006146:	0052      	lsls	r2, r2, #1
 8006148:	5ad3      	ldrh	r3, [r2, r3]
 800614a:	0019      	movs	r1, r3
 800614c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800614e:	f7f9 ffed 	bl	800012c <__udivsi3>
 8006152:	0003      	movs	r3, r0
 8006154:	005a      	lsls	r2, r3, #1
 8006156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	085b      	lsrs	r3, r3, #1
 800615c:	18d2      	adds	r2, r2, r3
 800615e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	0019      	movs	r1, r3
 8006164:	0010      	movs	r0, r2
 8006166:	f7f9 ffe1 	bl	800012c <__udivsi3>
 800616a:	0003      	movs	r3, r0
 800616c:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800616e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006170:	2b0f      	cmp	r3, #15
 8006172:	d921      	bls.n	80061b8 <UART_SetConfig+0x2d0>
 8006174:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006176:	2380      	movs	r3, #128	@ 0x80
 8006178:	025b      	lsls	r3, r3, #9
 800617a:	429a      	cmp	r2, r3
 800617c:	d21c      	bcs.n	80061b8 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800617e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006180:	b29a      	uxth	r2, r3
 8006182:	2012      	movs	r0, #18
 8006184:	2420      	movs	r4, #32
 8006186:	1903      	adds	r3, r0, r4
 8006188:	19db      	adds	r3, r3, r7
 800618a:	210f      	movs	r1, #15
 800618c:	438a      	bics	r2, r1
 800618e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006192:	085b      	lsrs	r3, r3, #1
 8006194:	b29b      	uxth	r3, r3
 8006196:	2207      	movs	r2, #7
 8006198:	4013      	ands	r3, r2
 800619a:	b299      	uxth	r1, r3
 800619c:	1903      	adds	r3, r0, r4
 800619e:	19db      	adds	r3, r3, r7
 80061a0:	1902      	adds	r2, r0, r4
 80061a2:	19d2      	adds	r2, r2, r7
 80061a4:	8812      	ldrh	r2, [r2, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80061aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	1902      	adds	r2, r0, r4
 80061b0:	19d2      	adds	r2, r2, r7
 80061b2:	8812      	ldrh	r2, [r2, #0]
 80061b4:	60da      	str	r2, [r3, #12]
 80061b6:	e051      	b.n	800625c <UART_SetConfig+0x374>
      }
      else
      {
        ret = HAL_ERROR;
 80061b8:	231f      	movs	r3, #31
 80061ba:	2220      	movs	r2, #32
 80061bc:	189b      	adds	r3, r3, r2
 80061be:	19db      	adds	r3, r3, r7
 80061c0:	2201      	movs	r2, #1
 80061c2:	701a      	strb	r2, [r3, #0]
 80061c4:	e04a      	b.n	800625c <UART_SetConfig+0x374>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80061c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061c8:	0018      	movs	r0, r3
 80061ca:	f7fe ff43 	bl	8005054 <HAL_RCCEx_GetPeriphCLKFreq>
 80061ce:	0003      	movs	r3, r0
 80061d0:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 80061d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d041      	beq.n	800625c <UART_SetConfig+0x374>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061dc:	4b1b      	ldr	r3, [pc, #108]	@ (800624c <UART_SetConfig+0x364>)
 80061de:	0052      	lsls	r2, r2, #1
 80061e0:	5ad3      	ldrh	r3, [r2, r3]
 80061e2:	0019      	movs	r1, r3
 80061e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80061e6:	f7f9 ffa1 	bl	800012c <__udivsi3>
 80061ea:	0003      	movs	r3, r0
 80061ec:	001a      	movs	r2, r3
 80061ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	085b      	lsrs	r3, r3, #1
 80061f4:	18d2      	adds	r2, r2, r3
 80061f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	0019      	movs	r1, r3
 80061fc:	0010      	movs	r0, r2
 80061fe:	f7f9 ff95 	bl	800012c <__udivsi3>
 8006202:	0003      	movs	r3, r0
 8006204:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006208:	2b0f      	cmp	r3, #15
 800620a:	d921      	bls.n	8006250 <UART_SetConfig+0x368>
 800620c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800620e:	2380      	movs	r3, #128	@ 0x80
 8006210:	025b      	lsls	r3, r3, #9
 8006212:	429a      	cmp	r2, r3
 8006214:	d21c      	bcs.n	8006250 <UART_SetConfig+0x368>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006218:	b29a      	uxth	r2, r3
 800621a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	60da      	str	r2, [r3, #12]
 8006220:	e01c      	b.n	800625c <UART_SetConfig+0x374>
 8006222:	46c0      	nop			@ (mov r8, r8)
 8006224:	40008000 	.word	0x40008000
 8006228:	cfff69f3 	.word	0xcfff69f3
 800622c:	ffffcfff 	.word	0xffffcfff
 8006230:	40008400 	.word	0x40008400
 8006234:	40008c00 	.word	0x40008c00
 8006238:	11fff4ff 	.word	0x11fff4ff
 800623c:	40013800 	.word	0x40013800
 8006240:	40004400 	.word	0x40004400
 8006244:	40004800 	.word	0x40004800
 8006248:	40004c00 	.word	0x40004c00
 800624c:	0800d160 	.word	0x0800d160
      }
      else
      {
        ret = HAL_ERROR;
 8006250:	231f      	movs	r3, #31
 8006252:	2220      	movs	r2, #32
 8006254:	189b      	adds	r3, r3, r2
 8006256:	19db      	adds	r3, r3, r7
 8006258:	2201      	movs	r2, #1
 800625a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800625c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625e:	226a      	movs	r2, #106	@ 0x6a
 8006260:	2101      	movs	r1, #1
 8006262:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006266:	2268      	movs	r2, #104	@ 0x68
 8006268:	2101      	movs	r1, #1
 800626a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800626c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626e:	2200      	movs	r2, #0
 8006270:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006274:	2200      	movs	r2, #0
 8006276:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006278:	231f      	movs	r3, #31
 800627a:	2220      	movs	r2, #32
 800627c:	189b      	adds	r3, r3, r2
 800627e:	19db      	adds	r3, r3, r7
 8006280:	781b      	ldrb	r3, [r3, #0]
}
 8006282:	0018      	movs	r0, r3
 8006284:	46bd      	mov	sp, r7
 8006286:	b012      	add	sp, #72	@ 0x48
 8006288:	bdb0      	pop	{r4, r5, r7, pc}
 800628a:	46c0      	nop			@ (mov r8, r8)

0800628c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006298:	2208      	movs	r2, #8
 800629a:	4013      	ands	r3, r2
 800629c:	d00b      	beq.n	80062b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	4a4a      	ldr	r2, [pc, #296]	@ (80063d0 <UART_AdvFeatureConfig+0x144>)
 80062a6:	4013      	ands	r3, r2
 80062a8:	0019      	movs	r1, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ba:	2201      	movs	r2, #1
 80062bc:	4013      	ands	r3, r2
 80062be:	d00b      	beq.n	80062d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	4a43      	ldr	r2, [pc, #268]	@ (80063d4 <UART_AdvFeatureConfig+0x148>)
 80062c8:	4013      	ands	r3, r2
 80062ca:	0019      	movs	r1, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062dc:	2202      	movs	r2, #2
 80062de:	4013      	ands	r3, r2
 80062e0:	d00b      	beq.n	80062fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	4a3b      	ldr	r2, [pc, #236]	@ (80063d8 <UART_AdvFeatureConfig+0x14c>)
 80062ea:	4013      	ands	r3, r2
 80062ec:	0019      	movs	r1, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062fe:	2204      	movs	r2, #4
 8006300:	4013      	ands	r3, r2
 8006302:	d00b      	beq.n	800631c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	4a34      	ldr	r2, [pc, #208]	@ (80063dc <UART_AdvFeatureConfig+0x150>)
 800630c:	4013      	ands	r3, r2
 800630e:	0019      	movs	r1, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	430a      	orrs	r2, r1
 800631a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006320:	2210      	movs	r2, #16
 8006322:	4013      	ands	r3, r2
 8006324:	d00b      	beq.n	800633e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	4a2c      	ldr	r2, [pc, #176]	@ (80063e0 <UART_AdvFeatureConfig+0x154>)
 800632e:	4013      	ands	r3, r2
 8006330:	0019      	movs	r1, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006342:	2220      	movs	r2, #32
 8006344:	4013      	ands	r3, r2
 8006346:	d00b      	beq.n	8006360 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	4a25      	ldr	r2, [pc, #148]	@ (80063e4 <UART_AdvFeatureConfig+0x158>)
 8006350:	4013      	ands	r3, r2
 8006352:	0019      	movs	r1, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006364:	2240      	movs	r2, #64	@ 0x40
 8006366:	4013      	ands	r3, r2
 8006368:	d01d      	beq.n	80063a6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	4a1d      	ldr	r2, [pc, #116]	@ (80063e8 <UART_AdvFeatureConfig+0x15c>)
 8006372:	4013      	ands	r3, r2
 8006374:	0019      	movs	r1, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006386:	2380      	movs	r3, #128	@ 0x80
 8006388:	035b      	lsls	r3, r3, #13
 800638a:	429a      	cmp	r2, r3
 800638c:	d10b      	bne.n	80063a6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	4a15      	ldr	r2, [pc, #84]	@ (80063ec <UART_AdvFeatureConfig+0x160>)
 8006396:	4013      	ands	r3, r2
 8006398:	0019      	movs	r1, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063aa:	2280      	movs	r2, #128	@ 0x80
 80063ac:	4013      	ands	r3, r2
 80063ae:	d00b      	beq.n	80063c8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	4a0e      	ldr	r2, [pc, #56]	@ (80063f0 <UART_AdvFeatureConfig+0x164>)
 80063b8:	4013      	ands	r3, r2
 80063ba:	0019      	movs	r1, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	605a      	str	r2, [r3, #4]
  }
}
 80063c8:	46c0      	nop			@ (mov r8, r8)
 80063ca:	46bd      	mov	sp, r7
 80063cc:	b002      	add	sp, #8
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	ffff7fff 	.word	0xffff7fff
 80063d4:	fffdffff 	.word	0xfffdffff
 80063d8:	fffeffff 	.word	0xfffeffff
 80063dc:	fffbffff 	.word	0xfffbffff
 80063e0:	ffffefff 	.word	0xffffefff
 80063e4:	ffffdfff 	.word	0xffffdfff
 80063e8:	ffefffff 	.word	0xffefffff
 80063ec:	ff9fffff 	.word	0xff9fffff
 80063f0:	fff7ffff 	.word	0xfff7ffff

080063f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b092      	sub	sp, #72	@ 0x48
 80063f8:	af02      	add	r7, sp, #8
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2290      	movs	r2, #144	@ 0x90
 8006400:	2100      	movs	r1, #0
 8006402:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006404:	f7fb fcc2 	bl	8001d8c <HAL_GetTick>
 8006408:	0003      	movs	r3, r0
 800640a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2208      	movs	r2, #8
 8006414:	4013      	ands	r3, r2
 8006416:	2b08      	cmp	r3, #8
 8006418:	d12d      	bne.n	8006476 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800641a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800641c:	2280      	movs	r2, #128	@ 0x80
 800641e:	0391      	lsls	r1, r2, #14
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	4a47      	ldr	r2, [pc, #284]	@ (8006540 <UART_CheckIdleState+0x14c>)
 8006424:	9200      	str	r2, [sp, #0]
 8006426:	2200      	movs	r2, #0
 8006428:	f000 f88e 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 800642c:	1e03      	subs	r3, r0, #0
 800642e:	d022      	beq.n	8006476 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006430:	f3ef 8310 	mrs	r3, PRIMASK
 8006434:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006438:	63bb      	str	r3, [r7, #56]	@ 0x38
 800643a:	2301      	movs	r3, #1
 800643c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800643e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006440:	f383 8810 	msr	PRIMASK, r3
}
 8006444:	46c0      	nop			@ (mov r8, r8)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2180      	movs	r1, #128	@ 0x80
 8006452:	438a      	bics	r2, r1
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006458:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800645a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800645c:	f383 8810 	msr	PRIMASK, r3
}
 8006460:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2288      	movs	r2, #136	@ 0x88
 8006466:	2120      	movs	r1, #32
 8006468:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2284      	movs	r2, #132	@ 0x84
 800646e:	2100      	movs	r1, #0
 8006470:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e060      	b.n	8006538 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2204      	movs	r2, #4
 800647e:	4013      	ands	r3, r2
 8006480:	2b04      	cmp	r3, #4
 8006482:	d146      	bne.n	8006512 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006486:	2280      	movs	r2, #128	@ 0x80
 8006488:	03d1      	lsls	r1, r2, #15
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	4a2c      	ldr	r2, [pc, #176]	@ (8006540 <UART_CheckIdleState+0x14c>)
 800648e:	9200      	str	r2, [sp, #0]
 8006490:	2200      	movs	r2, #0
 8006492:	f000 f859 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 8006496:	1e03      	subs	r3, r0, #0
 8006498:	d03b      	beq.n	8006512 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800649a:	f3ef 8310 	mrs	r3, PRIMASK
 800649e:	60fb      	str	r3, [r7, #12]
  return(result);
 80064a0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80064a4:	2301      	movs	r3, #1
 80064a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	f383 8810 	msr	PRIMASK, r3
}
 80064ae:	46c0      	nop			@ (mov r8, r8)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4922      	ldr	r1, [pc, #136]	@ (8006544 <UART_CheckIdleState+0x150>)
 80064bc:	400a      	ands	r2, r1
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f383 8810 	msr	PRIMASK, r3
}
 80064ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80064cc:	f3ef 8310 	mrs	r3, PRIMASK
 80064d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80064d2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80064d6:	2301      	movs	r3, #1
 80064d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	f383 8810 	msr	PRIMASK, r3
}
 80064e0:	46c0      	nop			@ (mov r8, r8)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689a      	ldr	r2, [r3, #8]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2101      	movs	r1, #1
 80064ee:	438a      	bics	r2, r1
 80064f0:	609a      	str	r2, [r3, #8]
 80064f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	f383 8810 	msr	PRIMASK, r3
}
 80064fc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	228c      	movs	r2, #140	@ 0x8c
 8006502:	2120      	movs	r1, #32
 8006504:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2284      	movs	r2, #132	@ 0x84
 800650a:	2100      	movs	r1, #0
 800650c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e012      	b.n	8006538 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2288      	movs	r2, #136	@ 0x88
 8006516:	2120      	movs	r1, #32
 8006518:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	228c      	movs	r2, #140	@ 0x8c
 800651e:	2120      	movs	r1, #32
 8006520:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2284      	movs	r2, #132	@ 0x84
 8006532:	2100      	movs	r1, #0
 8006534:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	0018      	movs	r0, r3
 800653a:	46bd      	mov	sp, r7
 800653c:	b010      	add	sp, #64	@ 0x40
 800653e:	bd80      	pop	{r7, pc}
 8006540:	01ffffff 	.word	0x01ffffff
 8006544:	fffffedf 	.word	0xfffffedf

08006548 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	603b      	str	r3, [r7, #0]
 8006554:	1dfb      	adds	r3, r7, #7
 8006556:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006558:	e051      	b.n	80065fe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	3301      	adds	r3, #1
 800655e:	d04e      	beq.n	80065fe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006560:	f7fb fc14 	bl	8001d8c <HAL_GetTick>
 8006564:	0002      	movs	r2, r0
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	429a      	cmp	r2, r3
 800656e:	d302      	bcc.n	8006576 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e051      	b.n	800661e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2204      	movs	r2, #4
 8006582:	4013      	ands	r3, r2
 8006584:	d03b      	beq.n	80065fe <UART_WaitOnFlagUntilTimeout+0xb6>
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2b80      	cmp	r3, #128	@ 0x80
 800658a:	d038      	beq.n	80065fe <UART_WaitOnFlagUntilTimeout+0xb6>
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2b40      	cmp	r3, #64	@ 0x40
 8006590:	d035      	beq.n	80065fe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	2208      	movs	r2, #8
 800659a:	4013      	ands	r3, r2
 800659c:	2b08      	cmp	r3, #8
 800659e:	d111      	bne.n	80065c4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2208      	movs	r2, #8
 80065a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	0018      	movs	r0, r3
 80065ac:	f000 f83c 	bl	8006628 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2290      	movs	r2, #144	@ 0x90
 80065b4:	2108      	movs	r1, #8
 80065b6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2284      	movs	r2, #132	@ 0x84
 80065bc:	2100      	movs	r1, #0
 80065be:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e02c      	b.n	800661e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	69da      	ldr	r2, [r3, #28]
 80065ca:	2380      	movs	r3, #128	@ 0x80
 80065cc:	011b      	lsls	r3, r3, #4
 80065ce:	401a      	ands	r2, r3
 80065d0:	2380      	movs	r3, #128	@ 0x80
 80065d2:	011b      	lsls	r3, r3, #4
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d112      	bne.n	80065fe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2280      	movs	r2, #128	@ 0x80
 80065de:	0112      	lsls	r2, r2, #4
 80065e0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	0018      	movs	r0, r3
 80065e6:	f000 f81f 	bl	8006628 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2290      	movs	r2, #144	@ 0x90
 80065ee:	2120      	movs	r1, #32
 80065f0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2284      	movs	r2, #132	@ 0x84
 80065f6:	2100      	movs	r1, #0
 80065f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e00f      	b.n	800661e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	4013      	ands	r3, r2
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	425a      	negs	r2, r3
 800660e:	4153      	adcs	r3, r2
 8006610:	b2db      	uxtb	r3, r3
 8006612:	001a      	movs	r2, r3
 8006614:	1dfb      	adds	r3, r7, #7
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	429a      	cmp	r2, r3
 800661a:	d09e      	beq.n	800655a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	0018      	movs	r0, r3
 8006620:	46bd      	mov	sp, r7
 8006622:	b004      	add	sp, #16
 8006624:	bd80      	pop	{r7, pc}
	...

08006628 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b08e      	sub	sp, #56	@ 0x38
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006630:	f3ef 8310 	mrs	r3, PRIMASK
 8006634:	617b      	str	r3, [r7, #20]
  return(result);
 8006636:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006638:	637b      	str	r3, [r7, #52]	@ 0x34
 800663a:	2301      	movs	r3, #1
 800663c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	f383 8810 	msr	PRIMASK, r3
}
 8006644:	46c0      	nop			@ (mov r8, r8)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4926      	ldr	r1, [pc, #152]	@ (80066ec <UART_EndRxTransfer+0xc4>)
 8006652:	400a      	ands	r2, r1
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006658:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	f383 8810 	msr	PRIMASK, r3
}
 8006660:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006662:	f3ef 8310 	mrs	r3, PRIMASK
 8006666:	623b      	str	r3, [r7, #32]
  return(result);
 8006668:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800666a:	633b      	str	r3, [r7, #48]	@ 0x30
 800666c:	2301      	movs	r3, #1
 800666e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006672:	f383 8810 	msr	PRIMASK, r3
}
 8006676:	46c0      	nop			@ (mov r8, r8)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689a      	ldr	r2, [r3, #8]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	491b      	ldr	r1, [pc, #108]	@ (80066f0 <UART_EndRxTransfer+0xc8>)
 8006684:	400a      	ands	r2, r1
 8006686:	609a      	str	r2, [r3, #8]
 8006688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800668c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668e:	f383 8810 	msr	PRIMASK, r3
}
 8006692:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006698:	2b01      	cmp	r3, #1
 800669a:	d118      	bne.n	80066ce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800669c:	f3ef 8310 	mrs	r3, PRIMASK
 80066a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80066a2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066a6:	2301      	movs	r3, #1
 80066a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f383 8810 	msr	PRIMASK, r3
}
 80066b0:	46c0      	nop			@ (mov r8, r8)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2110      	movs	r1, #16
 80066be:	438a      	bics	r2, r1
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f383 8810 	msr	PRIMASK, r3
}
 80066cc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	228c      	movs	r2, #140	@ 0x8c
 80066d2:	2120      	movs	r1, #32
 80066d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80066e2:	46c0      	nop			@ (mov r8, r8)
 80066e4:	46bd      	mov	sp, r7
 80066e6:	b00e      	add	sp, #56	@ 0x38
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	46c0      	nop			@ (mov r8, r8)
 80066ec:	fffffedf 	.word	0xfffffedf
 80066f0:	effffffe 	.word	0xeffffffe

080066f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2284      	movs	r2, #132	@ 0x84
 8006700:	5c9b      	ldrb	r3, [r3, r2]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d101      	bne.n	800670a <HAL_UARTEx_DisableFifoMode+0x16>
 8006706:	2302      	movs	r3, #2
 8006708:	e027      	b.n	800675a <HAL_UARTEx_DisableFifoMode+0x66>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2284      	movs	r2, #132	@ 0x84
 800670e:	2101      	movs	r1, #1
 8006710:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2288      	movs	r2, #136	@ 0x88
 8006716:	2124      	movs	r1, #36	@ 0x24
 8006718:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2101      	movs	r1, #1
 800672e:	438a      	bics	r2, r1
 8006730:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4a0b      	ldr	r2, [pc, #44]	@ (8006764 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006736:	4013      	ands	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2288      	movs	r2, #136	@ 0x88
 800674c:	2120      	movs	r1, #32
 800674e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2284      	movs	r2, #132	@ 0x84
 8006754:	2100      	movs	r1, #0
 8006756:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	0018      	movs	r0, r3
 800675c:	46bd      	mov	sp, r7
 800675e:	b004      	add	sp, #16
 8006760:	bd80      	pop	{r7, pc}
 8006762:	46c0      	nop			@ (mov r8, r8)
 8006764:	dfffffff 	.word	0xdfffffff

08006768 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2284      	movs	r2, #132	@ 0x84
 8006776:	5c9b      	ldrb	r3, [r3, r2]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d101      	bne.n	8006780 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800677c:	2302      	movs	r3, #2
 800677e:	e02e      	b.n	80067de <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2284      	movs	r2, #132	@ 0x84
 8006784:	2101      	movs	r1, #1
 8006786:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2288      	movs	r2, #136	@ 0x88
 800678c:	2124      	movs	r1, #36	@ 0x24
 800678e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2101      	movs	r1, #1
 80067a4:	438a      	bics	r2, r1
 80067a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	08d9      	lsrs	r1, r3, #3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	0018      	movs	r0, r3
 80067c0:	f000 f854 	bl	800686c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2288      	movs	r2, #136	@ 0x88
 80067d0:	2120      	movs	r1, #32
 80067d2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2284      	movs	r2, #132	@ 0x84
 80067d8:	2100      	movs	r1, #0
 80067da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	0018      	movs	r0, r3
 80067e0:	46bd      	mov	sp, r7
 80067e2:	b004      	add	sp, #16
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2284      	movs	r2, #132	@ 0x84
 80067f6:	5c9b      	ldrb	r3, [r3, r2]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d101      	bne.n	8006800 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067fc:	2302      	movs	r3, #2
 80067fe:	e02f      	b.n	8006860 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2284      	movs	r2, #132	@ 0x84
 8006804:	2101      	movs	r1, #1
 8006806:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2288      	movs	r2, #136	@ 0x88
 800680c:	2124      	movs	r1, #36	@ 0x24
 800680e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2101      	movs	r1, #1
 8006824:	438a      	bics	r2, r1
 8006826:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	4a0e      	ldr	r2, [pc, #56]	@ (8006868 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006830:	4013      	ands	r3, r2
 8006832:	0019      	movs	r1, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	0018      	movs	r0, r3
 8006842:	f000 f813 	bl	800686c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2288      	movs	r2, #136	@ 0x88
 8006852:	2120      	movs	r1, #32
 8006854:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2284      	movs	r2, #132	@ 0x84
 800685a:	2100      	movs	r1, #0
 800685c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	0018      	movs	r0, r3
 8006862:	46bd      	mov	sp, r7
 8006864:	b004      	add	sp, #16
 8006866:	bd80      	pop	{r7, pc}
 8006868:	f1ffffff 	.word	0xf1ffffff

0800686c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800686c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006878:	2b00      	cmp	r3, #0
 800687a:	d108      	bne.n	800688e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	226a      	movs	r2, #106	@ 0x6a
 8006880:	2101      	movs	r1, #1
 8006882:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2268      	movs	r2, #104	@ 0x68
 8006888:	2101      	movs	r1, #1
 800688a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800688c:	e043      	b.n	8006916 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800688e:	260f      	movs	r6, #15
 8006890:	19bb      	adds	r3, r7, r6
 8006892:	2208      	movs	r2, #8
 8006894:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006896:	200e      	movs	r0, #14
 8006898:	183b      	adds	r3, r7, r0
 800689a:	2208      	movs	r2, #8
 800689c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	0e5b      	lsrs	r3, r3, #25
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	240d      	movs	r4, #13
 80068aa:	193b      	adds	r3, r7, r4
 80068ac:	2107      	movs	r1, #7
 80068ae:	400a      	ands	r2, r1
 80068b0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	0f5b      	lsrs	r3, r3, #29
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	250c      	movs	r5, #12
 80068be:	197b      	adds	r3, r7, r5
 80068c0:	2107      	movs	r1, #7
 80068c2:	400a      	ands	r2, r1
 80068c4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068c6:	183b      	adds	r3, r7, r0
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	197a      	adds	r2, r7, r5
 80068cc:	7812      	ldrb	r2, [r2, #0]
 80068ce:	4914      	ldr	r1, [pc, #80]	@ (8006920 <UARTEx_SetNbDataToProcess+0xb4>)
 80068d0:	5c8a      	ldrb	r2, [r1, r2]
 80068d2:	435a      	muls	r2, r3
 80068d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80068d6:	197b      	adds	r3, r7, r5
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	4a12      	ldr	r2, [pc, #72]	@ (8006924 <UARTEx_SetNbDataToProcess+0xb8>)
 80068dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068de:	0019      	movs	r1, r3
 80068e0:	f7f9 fcae 	bl	8000240 <__divsi3>
 80068e4:	0003      	movs	r3, r0
 80068e6:	b299      	uxth	r1, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	226a      	movs	r2, #106	@ 0x6a
 80068ec:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068ee:	19bb      	adds	r3, r7, r6
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	193a      	adds	r2, r7, r4
 80068f4:	7812      	ldrb	r2, [r2, #0]
 80068f6:	490a      	ldr	r1, [pc, #40]	@ (8006920 <UARTEx_SetNbDataToProcess+0xb4>)
 80068f8:	5c8a      	ldrb	r2, [r1, r2]
 80068fa:	435a      	muls	r2, r3
 80068fc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80068fe:	193b      	adds	r3, r7, r4
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	4a08      	ldr	r2, [pc, #32]	@ (8006924 <UARTEx_SetNbDataToProcess+0xb8>)
 8006904:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006906:	0019      	movs	r1, r3
 8006908:	f7f9 fc9a 	bl	8000240 <__divsi3>
 800690c:	0003      	movs	r3, r0
 800690e:	b299      	uxth	r1, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2268      	movs	r2, #104	@ 0x68
 8006914:	5299      	strh	r1, [r3, r2]
}
 8006916:	46c0      	nop			@ (mov r8, r8)
 8006918:	46bd      	mov	sp, r7
 800691a:	b005      	add	sp, #20
 800691c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800691e:	46c0      	nop			@ (mov r8, r8)
 8006920:	0800d178 	.word	0x0800d178
 8006924:	0800d180 	.word	0x0800d180

08006928 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006936:	4b05      	ldr	r3, [pc, #20]	@ (800694c <USB_EnableGlobalInt+0x24>)
 8006938:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	0018      	movs	r0, r3
 8006944:	46bd      	mov	sp, r7
 8006946:	b004      	add	sp, #16
 8006948:	bd80      	pop	{r7, pc}
 800694a:	46c0      	nop			@ (mov r8, r8)
 800694c:	0000bf80 	.word	0x0000bf80

08006950 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006958:	4b06      	ldr	r3, [pc, #24]	@ (8006974 <USB_DisableGlobalInt+0x24>)
 800695a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006960:	68fa      	ldr	r2, [r7, #12]
 8006962:	43d2      	mvns	r2, r2
 8006964:	401a      	ands	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	0018      	movs	r0, r3
 800696e:	46bd      	mov	sp, r7
 8006970:	b004      	add	sp, #16
 8006972:	bd80      	pop	{r7, pc}
 8006974:	0000bf80 	.word	0x0000bf80

08006978 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	000a      	movs	r2, r1
 8006982:	1cfb      	adds	r3, r7, #3
 8006984:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 8006986:	1cfb      	adds	r3, r7, #3
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d107      	bne.n	800699e <USB_SetCurrentMode+0x26>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006992:	005b      	lsls	r3, r3, #1
 8006994:	085a      	lsrs	r2, r3, #1
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	641a      	str	r2, [r3, #64]	@ 0x40
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	e000      	b.n	80069a0 <USB_SetCurrentMode+0x28>
    return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
}
 80069a0:	0018      	movs	r0, r3
 80069a2:	46bd      	mov	sp, r7
 80069a4:	b002      	add	sp, #8
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 80069a8:	b5b0      	push	{r4, r5, r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	1d3b      	adds	r3, r7, #4
 80069b2:	6019      	str	r1, [r3, #0]
 80069b4:	605a      	str	r2, [r3, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2201      	movs	r2, #1
 80069ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069c0:	2201      	movs	r2, #1
 80069c2:	4393      	bics	r3, r2
 80069c4:	001a      	movs	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 80069ca:	2517      	movs	r5, #23
 80069cc:	197c      	adds	r4, r7, r5
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2100      	movs	r1, #0
 80069d2:	0018      	movs	r0, r3
 80069d4:	f7ff ffd0 	bl	8006978 <USB_SetCurrentMode>
 80069d8:	0003      	movs	r3, r0
 80069da:	7023      	strb	r3, [r4, #0]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 80069e2:	197b      	adds	r3, r7, r5
 80069e4:	781b      	ldrb	r3, [r3, #0]
}
 80069e6:	0018      	movs	r0, r3
 80069e8:	46bd      	mov	sp, r7
 80069ea:	b006      	add	sp, #24
 80069ec:	bdb0      	pop	{r4, r5, r7, pc}

080069ee <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_DRD_TypeDef const *USBx, uint32_t num)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b082      	sub	sp, #8
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	0018      	movs	r0, r3
 80069fc:	46bd      	mov	sp, r7
 80069fe:	b002      	add	sp, #8
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_DRD_TypeDef const *USBx)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b082      	sub	sp, #8
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	0018      	movs	r0, r3
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	b002      	add	sp, #8
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b0a0      	sub	sp, #128	@ 0x80
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a1e:	237f      	movs	r3, #127	@ 0x7f
 8006a20:	18fb      	adds	r3, r7, r3
 8006a22:	2200      	movs	r2, #0
 8006a24:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	18d3      	adds	r3, r2, r3
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4adc      	ldr	r2, [pc, #880]	@ (8006da4 <USB_ActivateEndpoint+0x390>)
 8006a34:	4013      	ands	r3, r2
 8006a36:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* initialize Endpoint */
  switch (ep->type)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	78db      	ldrb	r3, [r3, #3]
 8006a3c:	2b03      	cmp	r3, #3
 8006a3e:	d00e      	beq.n	8006a5e <USB_ActivateEndpoint+0x4a>
 8006a40:	dc19      	bgt.n	8006a76 <USB_ActivateEndpoint+0x62>
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d01c      	beq.n	8006a80 <USB_ActivateEndpoint+0x6c>
 8006a46:	dc16      	bgt.n	8006a76 <USB_ActivateEndpoint+0x62>
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <USB_ActivateEndpoint+0x3e>
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d00c      	beq.n	8006a6a <USB_ActivateEndpoint+0x56>
 8006a50:	e011      	b.n	8006a76 <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006a52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a54:	2280      	movs	r2, #128	@ 0x80
 8006a56:	0092      	lsls	r2, r2, #2
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	67bb      	str	r3, [r7, #120]	@ 0x78
      break;
 8006a5c:	e011      	b.n	8006a82 <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006a5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a60:	22c0      	movs	r2, #192	@ 0xc0
 8006a62:	00d2      	lsls	r2, r2, #3
 8006a64:	4313      	orrs	r3, r2
 8006a66:	67bb      	str	r3, [r7, #120]	@ 0x78
      break;
 8006a68:	e00b      	b.n	8006a82 <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006a6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a6c:	2280      	movs	r2, #128	@ 0x80
 8006a6e:	00d2      	lsls	r2, r2, #3
 8006a70:	4313      	orrs	r3, r2
 8006a72:	67bb      	str	r3, [r7, #120]	@ 0x78
      break;
 8006a74:	e005      	b.n	8006a82 <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 8006a76:	237f      	movs	r3, #127	@ 0x7f
 8006a78:	18fb      	adds	r3, r7, r3
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	701a      	strb	r2, [r3, #0]
      break;
 8006a7e:	e000      	b.n	8006a82 <USB_ActivateEndpoint+0x6e>
      break;
 8006a80:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	18d3      	adds	r3, r2, r3
 8006a8c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006a8e:	49c6      	ldr	r1, [pc, #792]	@ (8006da8 <USB_ActivateEndpoint+0x394>)
 8006a90:	430a      	orrs	r2, r1
 8006a92:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	18d3      	adds	r3, r2, r3
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4ac2      	ldr	r2, [pc, #776]	@ (8006dac <USB_ActivateEndpoint+0x398>)
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	7812      	ldrb	r2, [r2, #0]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	18d3      	adds	r3, r2, r3
 8006ab6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006ab8:	49bb      	ldr	r1, [pc, #748]	@ (8006da8 <USB_ActivateEndpoint+0x394>)
 8006aba:	430a      	orrs	r2, r1
 8006abc:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	7b1b      	ldrb	r3, [r3, #12]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d000      	beq.n	8006ac8 <USB_ActivateEndpoint+0xb4>
 8006ac6:	e155      	b.n	8006d74 <USB_ActivateEndpoint+0x360>
  {
    if (ep->is_in != 0U)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	785b      	ldrb	r3, [r3, #1]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d06e      	beq.n	8006bae <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	00db      	lsls	r3, r3, #3
 8006ad6:	4ab6      	ldr	r2, [pc, #728]	@ (8006db0 <USB_ActivateEndpoint+0x39c>)
 8006ad8:	4694      	mov	ip, r2
 8006ada:	4463      	add	r3, ip
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	00db      	lsls	r3, r3, #3
 8006ae4:	49b2      	ldr	r1, [pc, #712]	@ (8006db0 <USB_ActivateEndpoint+0x39c>)
 8006ae6:	468c      	mov	ip, r1
 8006ae8:	4463      	add	r3, ip
 8006aea:	0c12      	lsrs	r2, r2, #16
 8006aec:	0412      	lsls	r2, r2, #16
 8006aee:	601a      	str	r2, [r3, #0]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	00db      	lsls	r3, r3, #3
 8006af6:	4aae      	ldr	r2, [pc, #696]	@ (8006db0 <USB_ActivateEndpoint+0x39c>)
 8006af8:	4694      	mov	ip, r2
 8006afa:	4463      	add	r3, ip
 8006afc:	6819      	ldr	r1, [r3, #0]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	88db      	ldrh	r3, [r3, #6]
 8006b02:	089b      	lsrs	r3, r3, #2
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	009a      	lsls	r2, r3, #2
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	48a8      	ldr	r0, [pc, #672]	@ (8006db0 <USB_ActivateEndpoint+0x39c>)
 8006b10:	4684      	mov	ip, r0
 8006b12:	4463      	add	r3, ip
 8006b14:	430a      	orrs	r2, r1
 8006b16:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	18d3      	adds	r3, r2, r3
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	61bb      	str	r3, [r7, #24]
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	2240      	movs	r2, #64	@ 0x40
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	d011      	beq.n	8006b52 <USB_ActivateEndpoint+0x13e>
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	18d3      	adds	r3, r2, r3
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a9c      	ldr	r2, [pc, #624]	@ (8006dac <USB_ActivateEndpoint+0x398>)
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	617b      	str	r3, [r7, #20]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	18d3      	adds	r3, r2, r3
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	4999      	ldr	r1, [pc, #612]	@ (8006db4 <USB_ActivateEndpoint+0x3a0>)
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	78db      	ldrb	r3, [r3, #3]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d016      	beq.n	8006b88 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	18d3      	adds	r3, r2, r3
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a94      	ldr	r2, [pc, #592]	@ (8006db8 <USB_ActivateEndpoint+0x3a4>)
 8006b68:	4013      	ands	r3, r2
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	4053      	eors	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	18d3      	adds	r3, r2, r3
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	4989      	ldr	r1, [pc, #548]	@ (8006da8 <USB_ActivateEndpoint+0x394>)
 8006b82:	430a      	orrs	r2, r1
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	e396      	b.n	80072b6 <USB_ActivateEndpoint+0x8a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	18d3      	adds	r3, r2, r3
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a88      	ldr	r2, [pc, #544]	@ (8006db8 <USB_ActivateEndpoint+0x3a4>)
 8006b96:	4013      	ands	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	18d3      	adds	r3, r2, r3
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	4980      	ldr	r1, [pc, #512]	@ (8006da8 <USB_ActivateEndpoint+0x394>)
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	601a      	str	r2, [r3, #0]
 8006bac:	e383      	b.n	80072b6 <USB_ActivateEndpoint+0x8a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	4a7e      	ldr	r2, [pc, #504]	@ (8006db0 <USB_ActivateEndpoint+0x39c>)
 8006bb6:	4694      	mov	ip, r2
 8006bb8:	4463      	add	r3, ip
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	00db      	lsls	r3, r3, #3
 8006bc2:	497b      	ldr	r1, [pc, #492]	@ (8006db0 <USB_ActivateEndpoint+0x39c>)
 8006bc4:	468c      	mov	ip, r1
 8006bc6:	4463      	add	r3, ip
 8006bc8:	0c12      	lsrs	r2, r2, #16
 8006bca:	0412      	lsls	r2, r2, #16
 8006bcc:	605a      	str	r2, [r3, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	00db      	lsls	r3, r3, #3
 8006bd4:	4a76      	ldr	r2, [pc, #472]	@ (8006db0 <USB_ActivateEndpoint+0x39c>)
 8006bd6:	4694      	mov	ip, r2
 8006bd8:	4463      	add	r3, ip
 8006bda:	6859      	ldr	r1, [r3, #4]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	88db      	ldrh	r3, [r3, #6]
 8006be0:	089b      	lsrs	r3, r3, #2
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	009a      	lsls	r2, r3, #2
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	4870      	ldr	r0, [pc, #448]	@ (8006db0 <USB_ActivateEndpoint+0x39c>)
 8006bee:	4684      	mov	ip, r0
 8006bf0:	4463      	add	r3, ip
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	4a6c      	ldr	r2, [pc, #432]	@ (8006db0 <USB_ActivateEndpoint+0x39c>)
 8006bfe:	4694      	mov	ip, r2
 8006c00:	4463      	add	r3, ip
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	00db      	lsls	r3, r3, #3
 8006c0a:	4969      	ldr	r1, [pc, #420]	@ (8006db0 <USB_ActivateEndpoint+0x39c>)
 8006c0c:	468c      	mov	ip, r1
 8006c0e:	4463      	add	r3, ip
 8006c10:	0192      	lsls	r2, r2, #6
 8006c12:	0992      	lsrs	r2, r2, #6
 8006c14:	605a      	str	r2, [r3, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d111      	bne.n	8006c42 <USB_ActivateEndpoint+0x22e>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	4a62      	ldr	r2, [pc, #392]	@ (8006db0 <USB_ActivateEndpoint+0x39c>)
 8006c26:	4694      	mov	ip, r2
 8006c28:	4463      	add	r3, ip
 8006c2a:	685a      	ldr	r2, [r3, #4]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	00db      	lsls	r3, r3, #3
 8006c32:	495f      	ldr	r1, [pc, #380]	@ (8006db0 <USB_ActivateEndpoint+0x39c>)
 8006c34:	468c      	mov	ip, r1
 8006c36:	4463      	add	r3, ip
 8006c38:	2180      	movs	r1, #128	@ 0x80
 8006c3a:	0609      	lsls	r1, r1, #24
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	605a      	str	r2, [r3, #4]
 8006c40:	e041      	b.n	8006cc6 <USB_ActivateEndpoint+0x2b2>
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c48:	d81d      	bhi.n	8006c86 <USB_ActivateEndpoint+0x272>
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	085b      	lsrs	r3, r3, #1
 8006c50:	677b      	str	r3, [r7, #116]	@ 0x74
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	2201      	movs	r2, #1
 8006c58:	4013      	ands	r3, r2
 8006c5a:	d002      	beq.n	8006c62 <USB_ActivateEndpoint+0x24e>
 8006c5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c5e:	3301      	adds	r3, #1
 8006c60:	677b      	str	r3, [r7, #116]	@ 0x74
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	00db      	lsls	r3, r3, #3
 8006c68:	4a51      	ldr	r2, [pc, #324]	@ (8006db0 <USB_ActivateEndpoint+0x39c>)
 8006c6a:	4694      	mov	ip, r2
 8006c6c:	4463      	add	r3, ip
 8006c6e:	6859      	ldr	r1, [r3, #4]
 8006c70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c72:	069a      	lsls	r2, r3, #26
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	484d      	ldr	r0, [pc, #308]	@ (8006db0 <USB_ActivateEndpoint+0x39c>)
 8006c7c:	4684      	mov	ip, r0
 8006c7e:	4463      	add	r3, ip
 8006c80:	430a      	orrs	r2, r1
 8006c82:	605a      	str	r2, [r3, #4]
 8006c84:	e01f      	b.n	8006cc6 <USB_ActivateEndpoint+0x2b2>
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	095b      	lsrs	r3, r3, #5
 8006c8c:	677b      	str	r3, [r7, #116]	@ 0x74
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	221f      	movs	r2, #31
 8006c94:	4013      	ands	r3, r2
 8006c96:	d102      	bne.n	8006c9e <USB_ActivateEndpoint+0x28a>
 8006c98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	677b      	str	r3, [r7, #116]	@ 0x74
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	00db      	lsls	r3, r3, #3
 8006ca4:	4a42      	ldr	r2, [pc, #264]	@ (8006db0 <USB_ActivateEndpoint+0x39c>)
 8006ca6:	4694      	mov	ip, r2
 8006ca8:	4463      	add	r3, ip
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006cae:	069b      	lsls	r3, r3, #26
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	00db      	lsls	r3, r3, #3
 8006cb8:	493d      	ldr	r1, [pc, #244]	@ (8006db0 <USB_ActivateEndpoint+0x39c>)
 8006cba:	468c      	mov	ip, r1
 8006cbc:	4463      	add	r3, ip
 8006cbe:	2180      	movs	r1, #128	@ 0x80
 8006cc0:	0609      	lsls	r1, r1, #24
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	18d3      	adds	r3, r2, r3
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006cd6:	2380      	movs	r3, #128	@ 0x80
 8006cd8:	01db      	lsls	r3, r3, #7
 8006cda:	4013      	ands	r3, r2
 8006cdc:	d011      	beq.n	8006d02 <USB_ActivateEndpoint+0x2ee>
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	18d3      	adds	r3, r2, r3
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a30      	ldr	r2, [pc, #192]	@ (8006dac <USB_ActivateEndpoint+0x398>)
 8006cec:	4013      	ands	r3, r2
 8006cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	18d3      	adds	r3, r2, r3
 8006cfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cfc:	492f      	ldr	r1, [pc, #188]	@ (8006dbc <USB_ActivateEndpoint+0x3a8>)
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d11c      	bne.n	8006d44 <USB_ActivateEndpoint+0x330>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	18d3      	adds	r3, r2, r3
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a2a      	ldr	r2, [pc, #168]	@ (8006dc0 <USB_ActivateEndpoint+0x3ac>)
 8006d18:	4013      	ands	r3, r2
 8006d1a:	61fb      	str	r3, [r7, #28]
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	2280      	movs	r2, #128	@ 0x80
 8006d20:	0152      	lsls	r2, r2, #5
 8006d22:	4053      	eors	r3, r2
 8006d24:	61fb      	str	r3, [r7, #28]
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	2280      	movs	r2, #128	@ 0x80
 8006d2a:	0192      	lsls	r2, r2, #6
 8006d2c:	4053      	eors	r3, r2
 8006d2e:	61fb      	str	r3, [r7, #28]
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	18d3      	adds	r3, r2, r3
 8006d3a:	69fa      	ldr	r2, [r7, #28]
 8006d3c:	491a      	ldr	r1, [pc, #104]	@ (8006da8 <USB_ActivateEndpoint+0x394>)
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	e2b8      	b.n	80072b6 <USB_ActivateEndpoint+0x8a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	18d3      	adds	r3, r2, r3
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a1b      	ldr	r2, [pc, #108]	@ (8006dc0 <USB_ActivateEndpoint+0x3ac>)
 8006d52:	4013      	ands	r3, r2
 8006d54:	623b      	str	r3, [r7, #32]
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	2280      	movs	r2, #128	@ 0x80
 8006d5a:	0192      	lsls	r2, r2, #6
 8006d5c:	4053      	eors	r3, r2
 8006d5e:	623b      	str	r3, [r7, #32]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	18d3      	adds	r3, r2, r3
 8006d6a:	6a3a      	ldr	r2, [r7, #32]
 8006d6c:	490e      	ldr	r1, [pc, #56]	@ (8006da8 <USB_ActivateEndpoint+0x394>)
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	601a      	str	r2, [r3, #0]
 8006d72:	e2a0      	b.n	80072b6 <USB_ActivateEndpoint+0x8a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	78db      	ldrb	r3, [r3, #3]
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d125      	bne.n	8006dc8 <USB_ActivateEndpoint+0x3b4>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	18d3      	adds	r3, r2, r3
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a08      	ldr	r2, [pc, #32]	@ (8006dac <USB_ActivateEndpoint+0x398>)
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	18d3      	adds	r3, r2, r3
 8006d98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006d9a:	490a      	ldr	r1, [pc, #40]	@ (8006dc4 <USB_ActivateEndpoint+0x3b0>)
 8006d9c:	430a      	orrs	r2, r1
 8006d9e:	601a      	str	r2, [r3, #0]
 8006da0:	e024      	b.n	8006dec <USB_ActivateEndpoint+0x3d8>
 8006da2:	46c0      	nop			@ (mov r8, r8)
 8006da4:	07ff898f 	.word	0x07ff898f
 8006da8:	00008080 	.word	0x00008080
 8006dac:	07ff8f8f 	.word	0x07ff8f8f
 8006db0:	40009800 	.word	0x40009800
 8006db4:	000080c0 	.word	0x000080c0
 8006db8:	07ff8fbf 	.word	0x07ff8fbf
 8006dbc:	0000c080 	.word	0x0000c080
 8006dc0:	07ffbf8f 	.word	0x07ffbf8f
 8006dc4:	00008180 	.word	0x00008180
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	18d3      	adds	r3, r2, r3
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4aca      	ldr	r2, [pc, #808]	@ (8007100 <USB_ActivateEndpoint+0x6ec>)
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	667b      	str	r3, [r7, #100]	@ 0x64
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	18d3      	adds	r3, r2, r3
 8006de4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006de6:	49c7      	ldr	r1, [pc, #796]	@ (8007104 <USB_ActivateEndpoint+0x6f0>)
 8006de8:	430a      	orrs	r2, r1
 8006dea:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	00db      	lsls	r3, r3, #3
 8006df2:	4ac5      	ldr	r2, [pc, #788]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 8006df4:	4694      	mov	ip, r2
 8006df6:	4463      	add	r3, ip
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	00db      	lsls	r3, r3, #3
 8006e00:	49c1      	ldr	r1, [pc, #772]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 8006e02:	468c      	mov	ip, r1
 8006e04:	4463      	add	r3, ip
 8006e06:	0c12      	lsrs	r2, r2, #16
 8006e08:	0412      	lsls	r2, r2, #16
 8006e0a:	601a      	str	r2, [r3, #0]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	00db      	lsls	r3, r3, #3
 8006e12:	4abd      	ldr	r2, [pc, #756]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 8006e14:	4694      	mov	ip, r2
 8006e16:	4463      	add	r3, ip
 8006e18:	6819      	ldr	r1, [r3, #0]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	891b      	ldrh	r3, [r3, #8]
 8006e1e:	089b      	lsrs	r3, r3, #2
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	009a      	lsls	r2, r3, #2
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	00db      	lsls	r3, r3, #3
 8006e2a:	48b7      	ldr	r0, [pc, #732]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 8006e2c:	4684      	mov	ip, r0
 8006e2e:	4463      	add	r3, ip
 8006e30:	430a      	orrs	r2, r1
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	00db      	lsls	r3, r3, #3
 8006e3a:	4ab3      	ldr	r2, [pc, #716]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 8006e3c:	4694      	mov	ip, r2
 8006e3e:	4463      	add	r3, ip
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	00db      	lsls	r3, r3, #3
 8006e48:	49af      	ldr	r1, [pc, #700]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 8006e4a:	468c      	mov	ip, r1
 8006e4c:	4463      	add	r3, ip
 8006e4e:	0c12      	lsrs	r2, r2, #16
 8006e50:	0412      	lsls	r2, r2, #16
 8006e52:	605a      	str	r2, [r3, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	00db      	lsls	r3, r3, #3
 8006e5a:	4aab      	ldr	r2, [pc, #684]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 8006e5c:	4694      	mov	ip, r2
 8006e5e:	4463      	add	r3, ip
 8006e60:	6859      	ldr	r1, [r3, #4]
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	895b      	ldrh	r3, [r3, #10]
 8006e66:	089b      	lsrs	r3, r3, #2
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	009a      	lsls	r2, r3, #2
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	00db      	lsls	r3, r3, #3
 8006e72:	48a5      	ldr	r0, [pc, #660]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 8006e74:	4684      	mov	ip, r0
 8006e76:	4463      	add	r3, ip
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	785b      	ldrb	r3, [r3, #1]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d000      	beq.n	8006e86 <USB_ActivateEndpoint+0x472>
 8006e84:	e19d      	b.n	80071c2 <USB_ActivateEndpoint+0x7ae>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	18d3      	adds	r3, r2, r3
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e96:	2380      	movs	r3, #128	@ 0x80
 8006e98:	01db      	lsls	r3, r3, #7
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	d011      	beq.n	8006ec2 <USB_ActivateEndpoint+0x4ae>
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	18d3      	adds	r3, r2, r3
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a98      	ldr	r2, [pc, #608]	@ (800710c <USB_ActivateEndpoint+0x6f8>)
 8006eac:	4013      	ands	r3, r2
 8006eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	18d3      	adds	r3, r2, r3
 8006eba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006ebc:	4994      	ldr	r1, [pc, #592]	@ (8007110 <USB_ActivateEndpoint+0x6fc>)
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	18d3      	adds	r3, r2, r3
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed2:	2240      	movs	r2, #64	@ 0x40
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	d011      	beq.n	8006efc <USB_ActivateEndpoint+0x4e8>
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	18d3      	adds	r3, r2, r3
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a89      	ldr	r2, [pc, #548]	@ (800710c <USB_ActivateEndpoint+0x6f8>)
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	18d3      	adds	r3, r2, r3
 8006ef4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ef6:	4987      	ldr	r1, [pc, #540]	@ (8007114 <USB_ActivateEndpoint+0x700>)
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	601a      	str	r2, [r3, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	785b      	ldrb	r3, [r3, #1]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d168      	bne.n	8006fd6 <USB_ActivateEndpoint+0x5c2>
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	00db      	lsls	r3, r3, #3
 8006f0a:	4a7f      	ldr	r2, [pc, #508]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 8006f0c:	4694      	mov	ip, r2
 8006f0e:	4463      	add	r3, ip
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	00db      	lsls	r3, r3, #3
 8006f18:	497b      	ldr	r1, [pc, #492]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 8006f1a:	468c      	mov	ip, r1
 8006f1c:	4463      	add	r3, ip
 8006f1e:	0192      	lsls	r2, r2, #6
 8006f20:	0992      	lsrs	r2, r2, #6
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d111      	bne.n	8006f50 <USB_ActivateEndpoint+0x53c>
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	00db      	lsls	r3, r3, #3
 8006f32:	4a75      	ldr	r2, [pc, #468]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 8006f34:	4694      	mov	ip, r2
 8006f36:	4463      	add	r3, ip
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	00db      	lsls	r3, r3, #3
 8006f40:	4971      	ldr	r1, [pc, #452]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 8006f42:	468c      	mov	ip, r1
 8006f44:	4463      	add	r3, ip
 8006f46:	2180      	movs	r1, #128	@ 0x80
 8006f48:	0609      	lsls	r1, r1, #24
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	e068      	b.n	8007022 <USB_ActivateEndpoint+0x60e>
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f56:	d81d      	bhi.n	8006f94 <USB_ActivateEndpoint+0x580>
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	085b      	lsrs	r3, r3, #1
 8006f5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	2201      	movs	r2, #1
 8006f66:	4013      	ands	r3, r2
 8006f68:	d002      	beq.n	8006f70 <USB_ActivateEndpoint+0x55c>
 8006f6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	00db      	lsls	r3, r3, #3
 8006f76:	4a64      	ldr	r2, [pc, #400]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 8006f78:	4694      	mov	ip, r2
 8006f7a:	4463      	add	r3, ip
 8006f7c:	6819      	ldr	r1, [r3, #0]
 8006f7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f80:	069a      	lsls	r2, r3, #26
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	00db      	lsls	r3, r3, #3
 8006f88:	485f      	ldr	r0, [pc, #380]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 8006f8a:	4684      	mov	ip, r0
 8006f8c:	4463      	add	r3, ip
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	601a      	str	r2, [r3, #0]
 8006f92:	e046      	b.n	8007022 <USB_ActivateEndpoint+0x60e>
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	095b      	lsrs	r3, r3, #5
 8006f9a:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	221f      	movs	r2, #31
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	d102      	bne.n	8006fac <USB_ActivateEndpoint+0x598>
 8006fa6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	673b      	str	r3, [r7, #112]	@ 0x70
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	00db      	lsls	r3, r3, #3
 8006fb2:	4a55      	ldr	r2, [pc, #340]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 8006fb4:	4694      	mov	ip, r2
 8006fb6:	4463      	add	r3, ip
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006fbc:	069b      	lsls	r3, r3, #26
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	00db      	lsls	r3, r3, #3
 8006fc6:	4950      	ldr	r1, [pc, #320]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 8006fc8:	468c      	mov	ip, r1
 8006fca:	4463      	add	r3, ip
 8006fcc:	2180      	movs	r1, #128	@ 0x80
 8006fce:	0609      	lsls	r1, r1, #24
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	e025      	b.n	8007022 <USB_ActivateEndpoint+0x60e>
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	785b      	ldrb	r3, [r3, #1]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d121      	bne.n	8007022 <USB_ActivateEndpoint+0x60e>
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	00db      	lsls	r3, r3, #3
 8006fe4:	4a48      	ldr	r2, [pc, #288]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 8006fe6:	4694      	mov	ip, r2
 8006fe8:	4463      	add	r3, ip
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	00db      	lsls	r3, r3, #3
 8006ff2:	4945      	ldr	r1, [pc, #276]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 8006ff4:	468c      	mov	ip, r1
 8006ff6:	4463      	add	r3, ip
 8006ff8:	0412      	lsls	r2, r2, #16
 8006ffa:	0c12      	lsrs	r2, r2, #16
 8006ffc:	601a      	str	r2, [r3, #0]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	00db      	lsls	r3, r3, #3
 8007004:	4a40      	ldr	r2, [pc, #256]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 8007006:	4694      	mov	ip, r2
 8007008:	4463      	add	r3, ip
 800700a:	6819      	ldr	r1, [r3, #0]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	041a      	lsls	r2, r3, #16
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	00db      	lsls	r3, r3, #3
 8007018:	483b      	ldr	r0, [pc, #236]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 800701a:	4684      	mov	ip, r0
 800701c:	4463      	add	r3, ip
 800701e:	430a      	orrs	r2, r1
 8007020:	601a      	str	r2, [r3, #0]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	785b      	ldrb	r3, [r3, #1]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d000      	beq.n	800702c <USB_ActivateEndpoint+0x618>
 800702a:	e075      	b.n	8007118 <USB_ActivateEndpoint+0x704>
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	00db      	lsls	r3, r3, #3
 8007032:	4a35      	ldr	r2, [pc, #212]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 8007034:	4694      	mov	ip, r2
 8007036:	4463      	add	r3, ip
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	00db      	lsls	r3, r3, #3
 8007040:	4931      	ldr	r1, [pc, #196]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 8007042:	468c      	mov	ip, r1
 8007044:	4463      	add	r3, ip
 8007046:	0192      	lsls	r2, r2, #6
 8007048:	0992      	lsrs	r2, r2, #6
 800704a:	605a      	str	r2, [r3, #4]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d111      	bne.n	8007078 <USB_ActivateEndpoint+0x664>
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	00db      	lsls	r3, r3, #3
 800705a:	4a2b      	ldr	r2, [pc, #172]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 800705c:	4694      	mov	ip, r2
 800705e:	4463      	add	r3, ip
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	00db      	lsls	r3, r3, #3
 8007068:	4927      	ldr	r1, [pc, #156]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 800706a:	468c      	mov	ip, r1
 800706c:	4463      	add	r3, ip
 800706e:	2180      	movs	r1, #128	@ 0x80
 8007070:	0609      	lsls	r1, r1, #24
 8007072:	430a      	orrs	r2, r1
 8007074:	605a      	str	r2, [r3, #4]
 8007076:	e075      	b.n	8007164 <USB_ActivateEndpoint+0x750>
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	2b3e      	cmp	r3, #62	@ 0x3e
 800707e:	d81d      	bhi.n	80070bc <USB_ActivateEndpoint+0x6a8>
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	085b      	lsrs	r3, r3, #1
 8007086:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	2201      	movs	r2, #1
 800708e:	4013      	ands	r3, r2
 8007090:	d002      	beq.n	8007098 <USB_ActivateEndpoint+0x684>
 8007092:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007094:	3301      	adds	r3, #1
 8007096:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	00db      	lsls	r3, r3, #3
 800709e:	4a1a      	ldr	r2, [pc, #104]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 80070a0:	4694      	mov	ip, r2
 80070a2:	4463      	add	r3, ip
 80070a4:	6859      	ldr	r1, [r3, #4]
 80070a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070a8:	069a      	lsls	r2, r3, #26
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	00db      	lsls	r3, r3, #3
 80070b0:	4815      	ldr	r0, [pc, #84]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 80070b2:	4684      	mov	ip, r0
 80070b4:	4463      	add	r3, ip
 80070b6:	430a      	orrs	r2, r1
 80070b8:	605a      	str	r2, [r3, #4]
 80070ba:	e053      	b.n	8007164 <USB_ActivateEndpoint+0x750>
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	095b      	lsrs	r3, r3, #5
 80070c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	221f      	movs	r2, #31
 80070ca:	4013      	ands	r3, r2
 80070cc:	d102      	bne.n	80070d4 <USB_ActivateEndpoint+0x6c0>
 80070ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070d0:	3b01      	subs	r3, #1
 80070d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	00db      	lsls	r3, r3, #3
 80070da:	4a0b      	ldr	r2, [pc, #44]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 80070dc:	4694      	mov	ip, r2
 80070de:	4463      	add	r3, ip
 80070e0:	685a      	ldr	r2, [r3, #4]
 80070e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070e4:	069b      	lsls	r3, r3, #26
 80070e6:	431a      	orrs	r2, r3
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	00db      	lsls	r3, r3, #3
 80070ee:	4906      	ldr	r1, [pc, #24]	@ (8007108 <USB_ActivateEndpoint+0x6f4>)
 80070f0:	468c      	mov	ip, r1
 80070f2:	4463      	add	r3, ip
 80070f4:	2180      	movs	r1, #128	@ 0x80
 80070f6:	0609      	lsls	r1, r1, #24
 80070f8:	430a      	orrs	r2, r1
 80070fa:	605a      	str	r2, [r3, #4]
 80070fc:	e032      	b.n	8007164 <USB_ActivateEndpoint+0x750>
 80070fe:	46c0      	nop			@ (mov r8, r8)
 8007100:	07ff8e8f 	.word	0x07ff8e8f
 8007104:	00008080 	.word	0x00008080
 8007108:	40009800 	.word	0x40009800
 800710c:	07ff8f8f 	.word	0x07ff8f8f
 8007110:	0000c080 	.word	0x0000c080
 8007114:	000080c0 	.word	0x000080c0
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	785b      	ldrb	r3, [r3, #1]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d121      	bne.n	8007164 <USB_ActivateEndpoint+0x750>
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	00db      	lsls	r3, r3, #3
 8007126:	4a67      	ldr	r2, [pc, #412]	@ (80072c4 <USB_ActivateEndpoint+0x8b0>)
 8007128:	4694      	mov	ip, r2
 800712a:	4463      	add	r3, ip
 800712c:	685a      	ldr	r2, [r3, #4]
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	00db      	lsls	r3, r3, #3
 8007134:	4963      	ldr	r1, [pc, #396]	@ (80072c4 <USB_ActivateEndpoint+0x8b0>)
 8007136:	468c      	mov	ip, r1
 8007138:	4463      	add	r3, ip
 800713a:	0412      	lsls	r2, r2, #16
 800713c:	0c12      	lsrs	r2, r2, #16
 800713e:	605a      	str	r2, [r3, #4]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	00db      	lsls	r3, r3, #3
 8007146:	4a5f      	ldr	r2, [pc, #380]	@ (80072c4 <USB_ActivateEndpoint+0x8b0>)
 8007148:	4694      	mov	ip, r2
 800714a:	4463      	add	r3, ip
 800714c:	6859      	ldr	r1, [r3, #4]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	041a      	lsls	r2, r3, #16
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	00db      	lsls	r3, r3, #3
 800715a:	485a      	ldr	r0, [pc, #360]	@ (80072c4 <USB_ActivateEndpoint+0x8b0>)
 800715c:	4684      	mov	ip, r0
 800715e:	4463      	add	r3, ip
 8007160:	430a      	orrs	r2, r1
 8007162:	605a      	str	r2, [r3, #4]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	18d3      	adds	r3, r2, r3
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a55      	ldr	r2, [pc, #340]	@ (80072c8 <USB_ActivateEndpoint+0x8b4>)
 8007172:	4013      	ands	r3, r2
 8007174:	633b      	str	r3, [r7, #48]	@ 0x30
 8007176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007178:	2280      	movs	r2, #128	@ 0x80
 800717a:	0152      	lsls	r2, r2, #5
 800717c:	4053      	eors	r3, r2
 800717e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007182:	2280      	movs	r2, #128	@ 0x80
 8007184:	0192      	lsls	r2, r2, #6
 8007186:	4053      	eors	r3, r2
 8007188:	633b      	str	r3, [r7, #48]	@ 0x30
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	18d3      	adds	r3, r2, r3
 8007194:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007196:	494d      	ldr	r1, [pc, #308]	@ (80072cc <USB_ActivateEndpoint+0x8b8>)
 8007198:	430a      	orrs	r2, r1
 800719a:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	18d3      	adds	r3, r2, r3
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a49      	ldr	r2, [pc, #292]	@ (80072d0 <USB_ActivateEndpoint+0x8bc>)
 80071aa:	4013      	ands	r3, r2
 80071ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	18d3      	adds	r3, r2, r3
 80071b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071ba:	4944      	ldr	r1, [pc, #272]	@ (80072cc <USB_ActivateEndpoint+0x8b8>)
 80071bc:	430a      	orrs	r2, r1
 80071be:	601a      	str	r2, [r3, #0]
 80071c0:	e079      	b.n	80072b6 <USB_ActivateEndpoint+0x8a2>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	18d3      	adds	r3, r2, r3
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071d0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80071d2:	2380      	movs	r3, #128	@ 0x80
 80071d4:	01db      	lsls	r3, r3, #7
 80071d6:	4013      	ands	r3, r2
 80071d8:	d011      	beq.n	80071fe <USB_ActivateEndpoint+0x7ea>
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	18d3      	adds	r3, r2, r3
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a3b      	ldr	r2, [pc, #236]	@ (80072d4 <USB_ActivateEndpoint+0x8c0>)
 80071e8:	4013      	ands	r3, r2
 80071ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	18d3      	adds	r3, r2, r3
 80071f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071f8:	4937      	ldr	r1, [pc, #220]	@ (80072d8 <USB_ActivateEndpoint+0x8c4>)
 80071fa:	430a      	orrs	r2, r1
 80071fc:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	18d3      	adds	r3, r2, r3
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	657b      	str	r3, [r7, #84]	@ 0x54
 800720c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800720e:	2240      	movs	r2, #64	@ 0x40
 8007210:	4013      	ands	r3, r2
 8007212:	d011      	beq.n	8007238 <USB_ActivateEndpoint+0x824>
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	18d3      	adds	r3, r2, r3
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a2c      	ldr	r2, [pc, #176]	@ (80072d4 <USB_ActivateEndpoint+0x8c0>)
 8007222:	4013      	ands	r3, r2
 8007224:	653b      	str	r3, [r7, #80]	@ 0x50
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	18d3      	adds	r3, r2, r3
 8007230:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007232:	492a      	ldr	r1, [pc, #168]	@ (80072dc <USB_ActivateEndpoint+0x8c8>)
 8007234:	430a      	orrs	r2, r1
 8007236:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	78db      	ldrb	r3, [r3, #3]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d016      	beq.n	800726e <USB_ActivateEndpoint+0x85a>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	18d3      	adds	r3, r2, r3
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a20      	ldr	r2, [pc, #128]	@ (80072d0 <USB_ActivateEndpoint+0x8bc>)
 800724e:	4013      	ands	r3, r2
 8007250:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007252:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007254:	2220      	movs	r2, #32
 8007256:	4053      	eors	r3, r2
 8007258:	64bb      	str	r3, [r7, #72]	@ 0x48
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	18d3      	adds	r3, r2, r3
 8007264:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007266:	4919      	ldr	r1, [pc, #100]	@ (80072cc <USB_ActivateEndpoint+0x8b8>)
 8007268:	430a      	orrs	r2, r1
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	e011      	b.n	8007292 <USB_ActivateEndpoint+0x87e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	18d3      	adds	r3, r2, r3
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a15      	ldr	r2, [pc, #84]	@ (80072d0 <USB_ActivateEndpoint+0x8bc>)
 800727c:	4013      	ands	r3, r2
 800727e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	18d3      	adds	r3, r2, r3
 800728a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800728c:	490f      	ldr	r1, [pc, #60]	@ (80072cc <USB_ActivateEndpoint+0x8b8>)
 800728e:	430a      	orrs	r2, r1
 8007290:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	18d3      	adds	r3, r2, r3
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a0a      	ldr	r2, [pc, #40]	@ (80072c8 <USB_ActivateEndpoint+0x8b4>)
 80072a0:	4013      	ands	r3, r2
 80072a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	18d3      	adds	r3, r2, r3
 80072ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072b0:	4906      	ldr	r1, [pc, #24]	@ (80072cc <USB_ActivateEndpoint+0x8b8>)
 80072b2:	430a      	orrs	r2, r1
 80072b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80072b6:	237f      	movs	r3, #127	@ 0x7f
 80072b8:	18fb      	adds	r3, r7, r3
 80072ba:	781b      	ldrb	r3, [r3, #0]
}
 80072bc:	0018      	movs	r0, r3
 80072be:	46bd      	mov	sp, r7
 80072c0:	b020      	add	sp, #128	@ 0x80
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	40009800 	.word	0x40009800
 80072c8:	07ffbf8f 	.word	0x07ffbf8f
 80072cc:	00008080 	.word	0x00008080
 80072d0:	07ff8fbf 	.word	0x07ff8fbf
 80072d4:	07ff8f8f 	.word	0x07ff8f8f
 80072d8:	0000c080 	.word	0x0000c080
 80072dc:	000080c0 	.word	0x000080c0

080072e0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b096      	sub	sp, #88	@ 0x58
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	7b1b      	ldrb	r3, [r3, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d164      	bne.n	80073bc <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	785b      	ldrb	r3, [r3, #1]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d02f      	beq.n	800735a <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	18d3      	adds	r3, r2, r3
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	613b      	str	r3, [r7, #16]
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	2240      	movs	r2, #64	@ 0x40
 800730c:	4013      	ands	r3, r2
 800730e:	d011      	beq.n	8007334 <USB_DeactivateEndpoint+0x54>
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	18d3      	adds	r3, r2, r3
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a9d      	ldr	r2, [pc, #628]	@ (8007594 <USB_DeactivateEndpoint+0x2b4>)
 800731e:	4013      	ands	r3, r2
 8007320:	60fb      	str	r3, [r7, #12]
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	18d3      	adds	r3, r2, r3
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	499a      	ldr	r1, [pc, #616]	@ (8007598 <USB_DeactivateEndpoint+0x2b8>)
 8007330:	430a      	orrs	r2, r1
 8007332:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	18d3      	adds	r3, r2, r3
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a96      	ldr	r2, [pc, #600]	@ (800759c <USB_DeactivateEndpoint+0x2bc>)
 8007342:	4013      	ands	r3, r2
 8007344:	60bb      	str	r3, [r7, #8]
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	18d3      	adds	r3, r2, r3
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	4993      	ldr	r1, [pc, #588]	@ (80075a0 <USB_DeactivateEndpoint+0x2c0>)
 8007354:	430a      	orrs	r2, r1
 8007356:	601a      	str	r2, [r3, #0]
 8007358:	e117      	b.n	800758a <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	18d3      	adds	r3, r2, r3
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	61fb      	str	r3, [r7, #28]
 8007368:	69fa      	ldr	r2, [r7, #28]
 800736a:	2380      	movs	r3, #128	@ 0x80
 800736c:	01db      	lsls	r3, r3, #7
 800736e:	4013      	ands	r3, r2
 8007370:	d011      	beq.n	8007396 <USB_DeactivateEndpoint+0xb6>
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	18d3      	adds	r3, r2, r3
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a85      	ldr	r2, [pc, #532]	@ (8007594 <USB_DeactivateEndpoint+0x2b4>)
 8007380:	4013      	ands	r3, r2
 8007382:	61bb      	str	r3, [r7, #24]
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	18d3      	adds	r3, r2, r3
 800738e:	69ba      	ldr	r2, [r7, #24]
 8007390:	4984      	ldr	r1, [pc, #528]	@ (80075a4 <USB_DeactivateEndpoint+0x2c4>)
 8007392:	430a      	orrs	r2, r1
 8007394:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	18d3      	adds	r3, r2, r3
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a81      	ldr	r2, [pc, #516]	@ (80075a8 <USB_DeactivateEndpoint+0x2c8>)
 80073a4:	4013      	ands	r3, r2
 80073a6:	617b      	str	r3, [r7, #20]
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	18d3      	adds	r3, r2, r3
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	497a      	ldr	r1, [pc, #488]	@ (80075a0 <USB_DeactivateEndpoint+0x2c0>)
 80073b6:	430a      	orrs	r2, r1
 80073b8:	601a      	str	r2, [r3, #0]
 80073ba:	e0e6      	b.n	800758a <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	785b      	ldrb	r3, [r3, #1]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d171      	bne.n	80074a8 <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	18d3      	adds	r3, r2, r3
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073d4:	2380      	movs	r3, #128	@ 0x80
 80073d6:	01db      	lsls	r3, r3, #7
 80073d8:	4013      	ands	r3, r2
 80073da:	d011      	beq.n	8007400 <USB_DeactivateEndpoint+0x120>
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	18d3      	adds	r3, r2, r3
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a6a      	ldr	r2, [pc, #424]	@ (8007594 <USB_DeactivateEndpoint+0x2b4>)
 80073ea:	4013      	ands	r3, r2
 80073ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	18d3      	adds	r3, r2, r3
 80073f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073fa:	496a      	ldr	r1, [pc, #424]	@ (80075a4 <USB_DeactivateEndpoint+0x2c4>)
 80073fc:	430a      	orrs	r2, r1
 80073fe:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	18d3      	adds	r3, r2, r3
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	633b      	str	r3, [r7, #48]	@ 0x30
 800740e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007410:	2240      	movs	r2, #64	@ 0x40
 8007412:	4013      	ands	r3, r2
 8007414:	d011      	beq.n	800743a <USB_DeactivateEndpoint+0x15a>
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	18d3      	adds	r3, r2, r3
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a5c      	ldr	r2, [pc, #368]	@ (8007594 <USB_DeactivateEndpoint+0x2b4>)
 8007424:	4013      	ands	r3, r2
 8007426:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	18d3      	adds	r3, r2, r3
 8007432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007434:	4958      	ldr	r1, [pc, #352]	@ (8007598 <USB_DeactivateEndpoint+0x2b8>)
 8007436:	430a      	orrs	r2, r1
 8007438:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	18d3      	adds	r3, r2, r3
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a53      	ldr	r2, [pc, #332]	@ (8007594 <USB_DeactivateEndpoint+0x2b4>)
 8007448:	4013      	ands	r3, r2
 800744a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	18d3      	adds	r3, r2, r3
 8007456:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007458:	494f      	ldr	r1, [pc, #316]	@ (8007598 <USB_DeactivateEndpoint+0x2b8>)
 800745a:	430a      	orrs	r2, r1
 800745c:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	18d3      	adds	r3, r2, r3
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a4f      	ldr	r2, [pc, #316]	@ (80075a8 <USB_DeactivateEndpoint+0x2c8>)
 800746c:	4013      	ands	r3, r2
 800746e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	18d3      	adds	r3, r2, r3
 800747a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800747c:	4948      	ldr	r1, [pc, #288]	@ (80075a0 <USB_DeactivateEndpoint+0x2c0>)
 800747e:	430a      	orrs	r2, r1
 8007480:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	18d3      	adds	r3, r2, r3
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a43      	ldr	r2, [pc, #268]	@ (800759c <USB_DeactivateEndpoint+0x2bc>)
 8007490:	4013      	ands	r3, r2
 8007492:	623b      	str	r3, [r7, #32]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	18d3      	adds	r3, r2, r3
 800749e:	6a3a      	ldr	r2, [r7, #32]
 80074a0:	493f      	ldr	r1, [pc, #252]	@ (80075a0 <USB_DeactivateEndpoint+0x2c0>)
 80074a2:	430a      	orrs	r2, r1
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	e070      	b.n	800758a <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	18d3      	adds	r3, r2, r3
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80074b6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80074b8:	2380      	movs	r3, #128	@ 0x80
 80074ba:	01db      	lsls	r3, r3, #7
 80074bc:	4013      	ands	r3, r2
 80074be:	d011      	beq.n	80074e4 <USB_DeactivateEndpoint+0x204>
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	18d3      	adds	r3, r2, r3
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a31      	ldr	r2, [pc, #196]	@ (8007594 <USB_DeactivateEndpoint+0x2b4>)
 80074ce:	4013      	ands	r3, r2
 80074d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	18d3      	adds	r3, r2, r3
 80074dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80074de:	4931      	ldr	r1, [pc, #196]	@ (80075a4 <USB_DeactivateEndpoint+0x2c4>)
 80074e0:	430a      	orrs	r2, r1
 80074e2:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	18d3      	adds	r3, r2, r3
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074f4:	2240      	movs	r2, #64	@ 0x40
 80074f6:	4013      	ands	r3, r2
 80074f8:	d011      	beq.n	800751e <USB_DeactivateEndpoint+0x23e>
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	18d3      	adds	r3, r2, r3
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a23      	ldr	r2, [pc, #140]	@ (8007594 <USB_DeactivateEndpoint+0x2b4>)
 8007508:	4013      	ands	r3, r2
 800750a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	18d3      	adds	r3, r2, r3
 8007516:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007518:	491f      	ldr	r1, [pc, #124]	@ (8007598 <USB_DeactivateEndpoint+0x2b8>)
 800751a:	430a      	orrs	r2, r1
 800751c:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	18d3      	adds	r3, r2, r3
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a1a      	ldr	r2, [pc, #104]	@ (8007594 <USB_DeactivateEndpoint+0x2b4>)
 800752c:	4013      	ands	r3, r2
 800752e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	18d3      	adds	r3, r2, r3
 800753a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800753c:	4919      	ldr	r1, [pc, #100]	@ (80075a4 <USB_DeactivateEndpoint+0x2c4>)
 800753e:	430a      	orrs	r2, r1
 8007540:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	18d3      	adds	r3, r2, r3
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a13      	ldr	r2, [pc, #76]	@ (800759c <USB_DeactivateEndpoint+0x2bc>)
 8007550:	4013      	ands	r3, r2
 8007552:	643b      	str	r3, [r7, #64]	@ 0x40
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	18d3      	adds	r3, r2, r3
 800755e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007560:	490f      	ldr	r1, [pc, #60]	@ (80075a0 <USB_DeactivateEndpoint+0x2c0>)
 8007562:	430a      	orrs	r2, r1
 8007564:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	18d3      	adds	r3, r2, r3
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a0d      	ldr	r2, [pc, #52]	@ (80075a8 <USB_DeactivateEndpoint+0x2c8>)
 8007574:	4013      	ands	r3, r2
 8007576:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	18d3      	adds	r3, r2, r3
 8007582:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007584:	4906      	ldr	r1, [pc, #24]	@ (80075a0 <USB_DeactivateEndpoint+0x2c0>)
 8007586:	430a      	orrs	r2, r1
 8007588:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	0018      	movs	r0, r3
 800758e:	46bd      	mov	sp, r7
 8007590:	b016      	add	sp, #88	@ 0x58
 8007592:	bd80      	pop	{r7, pc}
 8007594:	07ff8f8f 	.word	0x07ff8f8f
 8007598:	000080c0 	.word	0x000080c0
 800759c:	07ff8fbf 	.word	0x07ff8fbf
 80075a0:	00008080 	.word	0x00008080
 80075a4:	0000c080 	.word	0x0000c080
 80075a8:	07ffbf8f 	.word	0x07ffbf8f

080075ac <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80075ac:	b590      	push	{r4, r7, lr}
 80075ae:	b093      	sub	sp, #76	@ 0x4c
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	785b      	ldrb	r3, [r3, #1]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d001      	beq.n	80075c2 <USB_EPStartXfer+0x16>
 80075be:	f000 fcc1 	bl	8007f44 <USB_EPStartXfer+0x998>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	699a      	ldr	r2, [r3, #24]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d903      	bls.n	80075d6 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80075d4:	e002      	b.n	80075dc <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	7b1b      	ldrb	r3, [r3, #12]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d12b      	bne.n	800763c <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	6959      	ldr	r1, [r3, #20]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	88da      	ldrh	r2, [r3, #6]
 80075ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fee9 	bl	80083c8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	00db      	lsls	r3, r3, #3
 80075fc:	4ae3      	ldr	r2, [pc, #908]	@ (800798c <USB_EPStartXfer+0x3e0>)
 80075fe:	4694      	mov	ip, r2
 8007600:	4463      	add	r3, ip
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	00db      	lsls	r3, r3, #3
 800760a:	49e0      	ldr	r1, [pc, #896]	@ (800798c <USB_EPStartXfer+0x3e0>)
 800760c:	468c      	mov	ip, r1
 800760e:	4463      	add	r3, ip
 8007610:	0412      	lsls	r2, r2, #16
 8007612:	0c12      	lsrs	r2, r2, #16
 8007614:	601a      	str	r2, [r3, #0]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	00db      	lsls	r3, r3, #3
 800761c:	4adb      	ldr	r2, [pc, #876]	@ (800798c <USB_EPStartXfer+0x3e0>)
 800761e:	4694      	mov	ip, r2
 8007620:	4463      	add	r3, ip
 8007622:	6819      	ldr	r1, [r3, #0]
 8007624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007626:	041a      	lsls	r2, r3, #16
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	00db      	lsls	r3, r3, #3
 800762e:	48d7      	ldr	r0, [pc, #860]	@ (800798c <USB_EPStartXfer+0x3e0>)
 8007630:	4684      	mov	ip, r0
 8007632:	4463      	add	r3, ip
 8007634:	430a      	orrs	r2, r1
 8007636:	601a      	str	r2, [r3, #0]
 8007638:	f000 fc69 	bl	8007f0e <USB_EPStartXfer+0x962>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	78db      	ldrb	r3, [r3, #3]
 8007640:	2b02      	cmp	r3, #2
 8007642:	d000      	beq.n	8007646 <USB_EPStartXfer+0x9a>
 8007644:	e315      	b.n	8007c72 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	6a1a      	ldr	r2, [r3, #32]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	691b      	ldr	r3, [r3, #16]
 800764e:	429a      	cmp	r2, r3
 8007650:	d800      	bhi.n	8007654 <USB_EPStartXfer+0xa8>
 8007652:	e2c8      	b.n	8007be6 <USB_EPStartXfer+0x63a>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	18d3      	adds	r3, r2, r3
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4acb      	ldr	r2, [pc, #812]	@ (8007990 <USB_EPStartXfer+0x3e4>)
 8007662:	4013      	ands	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	18d3      	adds	r3, r2, r3
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	49c8      	ldr	r1, [pc, #800]	@ (8007994 <USB_EPStartXfer+0x3e8>)
 8007674:	430a      	orrs	r2, r1
 8007676:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	6a1a      	ldr	r2, [r3, #32]
 800767c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800767e:	1ad2      	subs	r2, r2, r3
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	18d3      	adds	r3, r2, r3
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2240      	movs	r2, #64	@ 0x40
 8007692:	4013      	ands	r3, r2
 8007694:	d100      	bne.n	8007698 <USB_EPStartXfer+0xec>
 8007696:	e14f      	b.n	8007938 <USB_EPStartXfer+0x38c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	785b      	ldrb	r3, [r3, #1]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d162      	bne.n	8007766 <USB_EPStartXfer+0x1ba>
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	00db      	lsls	r3, r3, #3
 80076a6:	4ab9      	ldr	r2, [pc, #740]	@ (800798c <USB_EPStartXfer+0x3e0>)
 80076a8:	4694      	mov	ip, r2
 80076aa:	4463      	add	r3, ip
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	00db      	lsls	r3, r3, #3
 80076b4:	49b5      	ldr	r1, [pc, #724]	@ (800798c <USB_EPStartXfer+0x3e0>)
 80076b6:	468c      	mov	ip, r1
 80076b8:	4463      	add	r3, ip
 80076ba:	0192      	lsls	r2, r2, #6
 80076bc:	0992      	lsrs	r2, r2, #6
 80076be:	605a      	str	r2, [r3, #4]
 80076c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d111      	bne.n	80076ea <USB_EPStartXfer+0x13e>
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	00db      	lsls	r3, r3, #3
 80076cc:	4aaf      	ldr	r2, [pc, #700]	@ (800798c <USB_EPStartXfer+0x3e0>)
 80076ce:	4694      	mov	ip, r2
 80076d0:	4463      	add	r3, ip
 80076d2:	685a      	ldr	r2, [r3, #4]
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	00db      	lsls	r3, r3, #3
 80076da:	49ac      	ldr	r1, [pc, #688]	@ (800798c <USB_EPStartXfer+0x3e0>)
 80076dc:	468c      	mov	ip, r1
 80076de:	4463      	add	r3, ip
 80076e0:	2180      	movs	r1, #128	@ 0x80
 80076e2:	0609      	lsls	r1, r1, #24
 80076e4:	430a      	orrs	r2, r1
 80076e6:	605a      	str	r2, [r3, #4]
 80076e8:	e062      	b.n	80077b0 <USB_EPStartXfer+0x204>
 80076ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80076ee:	d81b      	bhi.n	8007728 <USB_EPStartXfer+0x17c>
 80076f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076f2:	085b      	lsrs	r3, r3, #1
 80076f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80076f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076f8:	2201      	movs	r2, #1
 80076fa:	4013      	ands	r3, r2
 80076fc:	d002      	beq.n	8007704 <USB_EPStartXfer+0x158>
 80076fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007700:	3301      	adds	r3, #1
 8007702:	643b      	str	r3, [r7, #64]	@ 0x40
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	00db      	lsls	r3, r3, #3
 800770a:	4aa0      	ldr	r2, [pc, #640]	@ (800798c <USB_EPStartXfer+0x3e0>)
 800770c:	4694      	mov	ip, r2
 800770e:	4463      	add	r3, ip
 8007710:	6859      	ldr	r1, [r3, #4]
 8007712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007714:	069a      	lsls	r2, r3, #26
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	00db      	lsls	r3, r3, #3
 800771c:	489b      	ldr	r0, [pc, #620]	@ (800798c <USB_EPStartXfer+0x3e0>)
 800771e:	4684      	mov	ip, r0
 8007720:	4463      	add	r3, ip
 8007722:	430a      	orrs	r2, r1
 8007724:	605a      	str	r2, [r3, #4]
 8007726:	e043      	b.n	80077b0 <USB_EPStartXfer+0x204>
 8007728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800772a:	095b      	lsrs	r3, r3, #5
 800772c:	643b      	str	r3, [r7, #64]	@ 0x40
 800772e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007730:	221f      	movs	r2, #31
 8007732:	4013      	ands	r3, r2
 8007734:	d102      	bne.n	800773c <USB_EPStartXfer+0x190>
 8007736:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007738:	3b01      	subs	r3, #1
 800773a:	643b      	str	r3, [r7, #64]	@ 0x40
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	00db      	lsls	r3, r3, #3
 8007742:	4a92      	ldr	r2, [pc, #584]	@ (800798c <USB_EPStartXfer+0x3e0>)
 8007744:	4694      	mov	ip, r2
 8007746:	4463      	add	r3, ip
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800774c:	069b      	lsls	r3, r3, #26
 800774e:	431a      	orrs	r2, r3
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	00db      	lsls	r3, r3, #3
 8007756:	498d      	ldr	r1, [pc, #564]	@ (800798c <USB_EPStartXfer+0x3e0>)
 8007758:	468c      	mov	ip, r1
 800775a:	4463      	add	r3, ip
 800775c:	2180      	movs	r1, #128	@ 0x80
 800775e:	0609      	lsls	r1, r1, #24
 8007760:	430a      	orrs	r2, r1
 8007762:	605a      	str	r2, [r3, #4]
 8007764:	e024      	b.n	80077b0 <USB_EPStartXfer+0x204>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	785b      	ldrb	r3, [r3, #1]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d120      	bne.n	80077b0 <USB_EPStartXfer+0x204>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	00db      	lsls	r3, r3, #3
 8007774:	4a85      	ldr	r2, [pc, #532]	@ (800798c <USB_EPStartXfer+0x3e0>)
 8007776:	4694      	mov	ip, r2
 8007778:	4463      	add	r3, ip
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	00db      	lsls	r3, r3, #3
 8007782:	4982      	ldr	r1, [pc, #520]	@ (800798c <USB_EPStartXfer+0x3e0>)
 8007784:	468c      	mov	ip, r1
 8007786:	4463      	add	r3, ip
 8007788:	0412      	lsls	r2, r2, #16
 800778a:	0c12      	lsrs	r2, r2, #16
 800778c:	605a      	str	r2, [r3, #4]
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	00db      	lsls	r3, r3, #3
 8007794:	4a7d      	ldr	r2, [pc, #500]	@ (800798c <USB_EPStartXfer+0x3e0>)
 8007796:	4694      	mov	ip, r2
 8007798:	4463      	add	r3, ip
 800779a:	6859      	ldr	r1, [r3, #4]
 800779c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800779e:	041a      	lsls	r2, r3, #16
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	00db      	lsls	r3, r3, #3
 80077a6:	4879      	ldr	r0, [pc, #484]	@ (800798c <USB_EPStartXfer+0x3e0>)
 80077a8:	4684      	mov	ip, r0
 80077aa:	4463      	add	r3, ip
 80077ac:	430a      	orrs	r2, r1
 80077ae:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 80077b0:	2016      	movs	r0, #22
 80077b2:	183b      	adds	r3, r7, r0
 80077b4:	683a      	ldr	r2, [r7, #0]
 80077b6:	8952      	ldrh	r2, [r2, #10]
 80077b8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	6959      	ldr	r1, [r3, #20]
 80077be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077c0:	b29c      	uxth	r4, r3
 80077c2:	183b      	adds	r3, r7, r0
 80077c4:	881a      	ldrh	r2, [r3, #0]
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	0023      	movs	r3, r4
 80077ca:	f000 fdfd 	bl	80083c8 <USB_WritePMA>
            ep->xfer_buff += len;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	695a      	ldr	r2, [r3, #20]
 80077d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077d4:	18d2      	adds	r2, r2, r3
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	6a1a      	ldr	r2, [r3, #32]
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d906      	bls.n	80077f4 <USB_EPStartXfer+0x248>
            {
              ep->xfer_len_db -= len;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	6a1a      	ldr	r2, [r3, #32]
 80077ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077ec:	1ad2      	subs	r2, r2, r3
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	621a      	str	r2, [r3, #32]
 80077f2:	e005      	b.n	8007800 <USB_EPStartXfer+0x254>
            }
            else
            {
              len = ep->xfer_len_db;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	6a1b      	ldr	r3, [r3, #32]
 80077f8:	647b      	str	r3, [r7, #68]	@ 0x44
              ep->xfer_len_db = 0U;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2200      	movs	r2, #0
 80077fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	785b      	ldrb	r3, [r3, #1]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d162      	bne.n	80078ce <USB_EPStartXfer+0x322>
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	00db      	lsls	r3, r3, #3
 800780e:	4a5f      	ldr	r2, [pc, #380]	@ (800798c <USB_EPStartXfer+0x3e0>)
 8007810:	4694      	mov	ip, r2
 8007812:	4463      	add	r3, ip
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	495b      	ldr	r1, [pc, #364]	@ (800798c <USB_EPStartXfer+0x3e0>)
 800781e:	468c      	mov	ip, r1
 8007820:	4463      	add	r3, ip
 8007822:	0192      	lsls	r2, r2, #6
 8007824:	0992      	lsrs	r2, r2, #6
 8007826:	601a      	str	r2, [r3, #0]
 8007828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800782a:	2b00      	cmp	r3, #0
 800782c:	d111      	bne.n	8007852 <USB_EPStartXfer+0x2a6>
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	4a55      	ldr	r2, [pc, #340]	@ (800798c <USB_EPStartXfer+0x3e0>)
 8007836:	4694      	mov	ip, r2
 8007838:	4463      	add	r3, ip
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	00db      	lsls	r3, r3, #3
 8007842:	4952      	ldr	r1, [pc, #328]	@ (800798c <USB_EPStartXfer+0x3e0>)
 8007844:	468c      	mov	ip, r1
 8007846:	4463      	add	r3, ip
 8007848:	2180      	movs	r1, #128	@ 0x80
 800784a:	0609      	lsls	r1, r1, #24
 800784c:	430a      	orrs	r2, r1
 800784e:	601a      	str	r2, [r3, #0]
 8007850:	e062      	b.n	8007918 <USB_EPStartXfer+0x36c>
 8007852:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007854:	2b3e      	cmp	r3, #62	@ 0x3e
 8007856:	d81b      	bhi.n	8007890 <USB_EPStartXfer+0x2e4>
 8007858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800785a:	085b      	lsrs	r3, r3, #1
 800785c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800785e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007860:	2201      	movs	r2, #1
 8007862:	4013      	ands	r3, r2
 8007864:	d002      	beq.n	800786c <USB_EPStartXfer+0x2c0>
 8007866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007868:	3301      	adds	r3, #1
 800786a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	00db      	lsls	r3, r3, #3
 8007872:	4a46      	ldr	r2, [pc, #280]	@ (800798c <USB_EPStartXfer+0x3e0>)
 8007874:	4694      	mov	ip, r2
 8007876:	4463      	add	r3, ip
 8007878:	6819      	ldr	r1, [r3, #0]
 800787a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800787c:	069a      	lsls	r2, r3, #26
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	00db      	lsls	r3, r3, #3
 8007884:	4841      	ldr	r0, [pc, #260]	@ (800798c <USB_EPStartXfer+0x3e0>)
 8007886:	4684      	mov	ip, r0
 8007888:	4463      	add	r3, ip
 800788a:	430a      	orrs	r2, r1
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	e043      	b.n	8007918 <USB_EPStartXfer+0x36c>
 8007890:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007892:	095b      	lsrs	r3, r3, #5
 8007894:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007896:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007898:	221f      	movs	r2, #31
 800789a:	4013      	ands	r3, r2
 800789c:	d102      	bne.n	80078a4 <USB_EPStartXfer+0x2f8>
 800789e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078a0:	3b01      	subs	r3, #1
 80078a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	00db      	lsls	r3, r3, #3
 80078aa:	4a38      	ldr	r2, [pc, #224]	@ (800798c <USB_EPStartXfer+0x3e0>)
 80078ac:	4694      	mov	ip, r2
 80078ae:	4463      	add	r3, ip
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078b4:	069b      	lsls	r3, r3, #26
 80078b6:	431a      	orrs	r2, r3
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	00db      	lsls	r3, r3, #3
 80078be:	4933      	ldr	r1, [pc, #204]	@ (800798c <USB_EPStartXfer+0x3e0>)
 80078c0:	468c      	mov	ip, r1
 80078c2:	4463      	add	r3, ip
 80078c4:	2180      	movs	r1, #128	@ 0x80
 80078c6:	0609      	lsls	r1, r1, #24
 80078c8:	430a      	orrs	r2, r1
 80078ca:	601a      	str	r2, [r3, #0]
 80078cc:	e024      	b.n	8007918 <USB_EPStartXfer+0x36c>
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	785b      	ldrb	r3, [r3, #1]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d120      	bne.n	8007918 <USB_EPStartXfer+0x36c>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	00db      	lsls	r3, r3, #3
 80078dc:	4a2b      	ldr	r2, [pc, #172]	@ (800798c <USB_EPStartXfer+0x3e0>)
 80078de:	4694      	mov	ip, r2
 80078e0:	4463      	add	r3, ip
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	00db      	lsls	r3, r3, #3
 80078ea:	4928      	ldr	r1, [pc, #160]	@ (800798c <USB_EPStartXfer+0x3e0>)
 80078ec:	468c      	mov	ip, r1
 80078ee:	4463      	add	r3, ip
 80078f0:	0412      	lsls	r2, r2, #16
 80078f2:	0c12      	lsrs	r2, r2, #16
 80078f4:	601a      	str	r2, [r3, #0]
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	4a23      	ldr	r2, [pc, #140]	@ (800798c <USB_EPStartXfer+0x3e0>)
 80078fe:	4694      	mov	ip, r2
 8007900:	4463      	add	r3, ip
 8007902:	6819      	ldr	r1, [r3, #0]
 8007904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007906:	041a      	lsls	r2, r3, #16
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	00db      	lsls	r3, r3, #3
 800790e:	481f      	ldr	r0, [pc, #124]	@ (800798c <USB_EPStartXfer+0x3e0>)
 8007910:	4684      	mov	ip, r0
 8007912:	4463      	add	r3, ip
 8007914:	430a      	orrs	r2, r1
 8007916:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007918:	2016      	movs	r0, #22
 800791a:	183b      	adds	r3, r7, r0
 800791c:	683a      	ldr	r2, [r7, #0]
 800791e:	8912      	ldrh	r2, [r2, #8]
 8007920:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	6959      	ldr	r1, [r3, #20]
 8007926:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007928:	b29c      	uxth	r4, r3
 800792a:	183b      	adds	r3, r7, r0
 800792c:	881a      	ldrh	r2, [r3, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	0023      	movs	r3, r4
 8007932:	f000 fd49 	bl	80083c8 <USB_WritePMA>
 8007936:	e2ea      	b.n	8007f0e <USB_EPStartXfer+0x962>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	785b      	ldrb	r3, [r3, #1]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d169      	bne.n	8007a14 <USB_EPStartXfer+0x468>
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	00db      	lsls	r3, r3, #3
 8007946:	4a11      	ldr	r2, [pc, #68]	@ (800798c <USB_EPStartXfer+0x3e0>)
 8007948:	4694      	mov	ip, r2
 800794a:	4463      	add	r3, ip
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	00db      	lsls	r3, r3, #3
 8007954:	490d      	ldr	r1, [pc, #52]	@ (800798c <USB_EPStartXfer+0x3e0>)
 8007956:	468c      	mov	ip, r1
 8007958:	4463      	add	r3, ip
 800795a:	0192      	lsls	r2, r2, #6
 800795c:	0992      	lsrs	r2, r2, #6
 800795e:	601a      	str	r2, [r3, #0]
 8007960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007962:	2b00      	cmp	r3, #0
 8007964:	d118      	bne.n	8007998 <USB_EPStartXfer+0x3ec>
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	4a07      	ldr	r2, [pc, #28]	@ (800798c <USB_EPStartXfer+0x3e0>)
 800796e:	4694      	mov	ip, r2
 8007970:	4463      	add	r3, ip
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	00db      	lsls	r3, r3, #3
 800797a:	4904      	ldr	r1, [pc, #16]	@ (800798c <USB_EPStartXfer+0x3e0>)
 800797c:	468c      	mov	ip, r1
 800797e:	4463      	add	r3, ip
 8007980:	2180      	movs	r1, #128	@ 0x80
 8007982:	0609      	lsls	r1, r1, #24
 8007984:	430a      	orrs	r2, r1
 8007986:	601a      	str	r2, [r3, #0]
 8007988:	e069      	b.n	8007a5e <USB_EPStartXfer+0x4b2>
 800798a:	46c0      	nop			@ (mov r8, r8)
 800798c:	40009800 	.word	0x40009800
 8007990:	07ff8f8f 	.word	0x07ff8f8f
 8007994:	00008180 	.word	0x00008180
 8007998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800799a:	2b3e      	cmp	r3, #62	@ 0x3e
 800799c:	d81b      	bhi.n	80079d6 <USB_EPStartXfer+0x42a>
 800799e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079a0:	085b      	lsrs	r3, r3, #1
 80079a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079a6:	2201      	movs	r2, #1
 80079a8:	4013      	ands	r3, r2
 80079aa:	d002      	beq.n	80079b2 <USB_EPStartXfer+0x406>
 80079ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ae:	3301      	adds	r3, #1
 80079b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	00db      	lsls	r3, r3, #3
 80079b8:	4ada      	ldr	r2, [pc, #872]	@ (8007d24 <USB_EPStartXfer+0x778>)
 80079ba:	4694      	mov	ip, r2
 80079bc:	4463      	add	r3, ip
 80079be:	6819      	ldr	r1, [r3, #0]
 80079c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c2:	069a      	lsls	r2, r3, #26
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	00db      	lsls	r3, r3, #3
 80079ca:	48d6      	ldr	r0, [pc, #856]	@ (8007d24 <USB_EPStartXfer+0x778>)
 80079cc:	4684      	mov	ip, r0
 80079ce:	4463      	add	r3, ip
 80079d0:	430a      	orrs	r2, r1
 80079d2:	601a      	str	r2, [r3, #0]
 80079d4:	e043      	b.n	8007a5e <USB_EPStartXfer+0x4b2>
 80079d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079d8:	095b      	lsrs	r3, r3, #5
 80079da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079de:	221f      	movs	r2, #31
 80079e0:	4013      	ands	r3, r2
 80079e2:	d102      	bne.n	80079ea <USB_EPStartXfer+0x43e>
 80079e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e6:	3b01      	subs	r3, #1
 80079e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	00db      	lsls	r3, r3, #3
 80079f0:	4acc      	ldr	r2, [pc, #816]	@ (8007d24 <USB_EPStartXfer+0x778>)
 80079f2:	4694      	mov	ip, r2
 80079f4:	4463      	add	r3, ip
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fa:	069b      	lsls	r3, r3, #26
 80079fc:	431a      	orrs	r2, r3
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	00db      	lsls	r3, r3, #3
 8007a04:	49c7      	ldr	r1, [pc, #796]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007a06:	468c      	mov	ip, r1
 8007a08:	4463      	add	r3, ip
 8007a0a:	2180      	movs	r1, #128	@ 0x80
 8007a0c:	0609      	lsls	r1, r1, #24
 8007a0e:	430a      	orrs	r2, r1
 8007a10:	601a      	str	r2, [r3, #0]
 8007a12:	e024      	b.n	8007a5e <USB_EPStartXfer+0x4b2>
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	785b      	ldrb	r3, [r3, #1]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d120      	bne.n	8007a5e <USB_EPStartXfer+0x4b2>
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	00db      	lsls	r3, r3, #3
 8007a22:	4ac0      	ldr	r2, [pc, #768]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007a24:	4694      	mov	ip, r2
 8007a26:	4463      	add	r3, ip
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	00db      	lsls	r3, r3, #3
 8007a30:	49bc      	ldr	r1, [pc, #752]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007a32:	468c      	mov	ip, r1
 8007a34:	4463      	add	r3, ip
 8007a36:	0412      	lsls	r2, r2, #16
 8007a38:	0c12      	lsrs	r2, r2, #16
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	00db      	lsls	r3, r3, #3
 8007a42:	4ab8      	ldr	r2, [pc, #736]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007a44:	4694      	mov	ip, r2
 8007a46:	4463      	add	r3, ip
 8007a48:	6819      	ldr	r1, [r3, #0]
 8007a4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a4c:	041a      	lsls	r2, r3, #16
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	00db      	lsls	r3, r3, #3
 8007a54:	48b3      	ldr	r0, [pc, #716]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007a56:	4684      	mov	ip, r0
 8007a58:	4463      	add	r3, ip
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a5e:	2016      	movs	r0, #22
 8007a60:	183b      	adds	r3, r7, r0
 8007a62:	683a      	ldr	r2, [r7, #0]
 8007a64:	8912      	ldrh	r2, [r2, #8]
 8007a66:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	6959      	ldr	r1, [r3, #20]
 8007a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a6e:	b29c      	uxth	r4, r3
 8007a70:	183b      	adds	r3, r7, r0
 8007a72:	881a      	ldrh	r2, [r3, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	0023      	movs	r3, r4
 8007a78:	f000 fca6 	bl	80083c8 <USB_WritePMA>
            ep->xfer_buff += len;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	695a      	ldr	r2, [r3, #20]
 8007a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a82:	18d2      	adds	r2, r2, r3
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	6a1a      	ldr	r2, [r3, #32]
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d906      	bls.n	8007aa2 <USB_EPStartXfer+0x4f6>
            {
              ep->xfer_len_db -= len;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	6a1a      	ldr	r2, [r3, #32]
 8007a98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a9a:	1ad2      	subs	r2, r2, r3
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	621a      	str	r2, [r3, #32]
 8007aa0:	e005      	b.n	8007aae <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	647b      	str	r3, [r7, #68]	@ 0x44
              ep->xfer_len_db = 0U;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	785b      	ldrb	r3, [r3, #1]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d162      	bne.n	8007b7c <USB_EPStartXfer+0x5d0>
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	00db      	lsls	r3, r3, #3
 8007abc:	4a99      	ldr	r2, [pc, #612]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007abe:	4694      	mov	ip, r2
 8007ac0:	4463      	add	r3, ip
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	00db      	lsls	r3, r3, #3
 8007aca:	4996      	ldr	r1, [pc, #600]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007acc:	468c      	mov	ip, r1
 8007ace:	4463      	add	r3, ip
 8007ad0:	0192      	lsls	r2, r2, #6
 8007ad2:	0992      	lsrs	r2, r2, #6
 8007ad4:	605a      	str	r2, [r3, #4]
 8007ad6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d111      	bne.n	8007b00 <USB_EPStartXfer+0x554>
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	00db      	lsls	r3, r3, #3
 8007ae2:	4a90      	ldr	r2, [pc, #576]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007ae4:	4694      	mov	ip, r2
 8007ae6:	4463      	add	r3, ip
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	498c      	ldr	r1, [pc, #560]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007af2:	468c      	mov	ip, r1
 8007af4:	4463      	add	r3, ip
 8007af6:	2180      	movs	r1, #128	@ 0x80
 8007af8:	0609      	lsls	r1, r1, #24
 8007afa:	430a      	orrs	r2, r1
 8007afc:	605a      	str	r2, [r3, #4]
 8007afe:	e062      	b.n	8007bc6 <USB_EPStartXfer+0x61a>
 8007b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b02:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b04:	d81b      	bhi.n	8007b3e <USB_EPStartXfer+0x592>
 8007b06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b08:	085b      	lsrs	r3, r3, #1
 8007b0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b0e:	2201      	movs	r2, #1
 8007b10:	4013      	ands	r3, r2
 8007b12:	d002      	beq.n	8007b1a <USB_EPStartXfer+0x56e>
 8007b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b16:	3301      	adds	r3, #1
 8007b18:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	00db      	lsls	r3, r3, #3
 8007b20:	4a80      	ldr	r2, [pc, #512]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007b22:	4694      	mov	ip, r2
 8007b24:	4463      	add	r3, ip
 8007b26:	6859      	ldr	r1, [r3, #4]
 8007b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b2a:	069a      	lsls	r2, r3, #26
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	00db      	lsls	r3, r3, #3
 8007b32:	487c      	ldr	r0, [pc, #496]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007b34:	4684      	mov	ip, r0
 8007b36:	4463      	add	r3, ip
 8007b38:	430a      	orrs	r2, r1
 8007b3a:	605a      	str	r2, [r3, #4]
 8007b3c:	e043      	b.n	8007bc6 <USB_EPStartXfer+0x61a>
 8007b3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b40:	095b      	lsrs	r3, r3, #5
 8007b42:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b46:	221f      	movs	r2, #31
 8007b48:	4013      	ands	r3, r2
 8007b4a:	d102      	bne.n	8007b52 <USB_EPStartXfer+0x5a6>
 8007b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	00db      	lsls	r3, r3, #3
 8007b58:	4a72      	ldr	r2, [pc, #456]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007b5a:	4694      	mov	ip, r2
 8007b5c:	4463      	add	r3, ip
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b62:	069b      	lsls	r3, r3, #26
 8007b64:	431a      	orrs	r2, r3
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	00db      	lsls	r3, r3, #3
 8007b6c:	496d      	ldr	r1, [pc, #436]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007b6e:	468c      	mov	ip, r1
 8007b70:	4463      	add	r3, ip
 8007b72:	2180      	movs	r1, #128	@ 0x80
 8007b74:	0609      	lsls	r1, r1, #24
 8007b76:	430a      	orrs	r2, r1
 8007b78:	605a      	str	r2, [r3, #4]
 8007b7a:	e024      	b.n	8007bc6 <USB_EPStartXfer+0x61a>
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	785b      	ldrb	r3, [r3, #1]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d120      	bne.n	8007bc6 <USB_EPStartXfer+0x61a>
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	00db      	lsls	r3, r3, #3
 8007b8a:	4a66      	ldr	r2, [pc, #408]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007b8c:	4694      	mov	ip, r2
 8007b8e:	4463      	add	r3, ip
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	00db      	lsls	r3, r3, #3
 8007b98:	4962      	ldr	r1, [pc, #392]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007b9a:	468c      	mov	ip, r1
 8007b9c:	4463      	add	r3, ip
 8007b9e:	0412      	lsls	r2, r2, #16
 8007ba0:	0c12      	lsrs	r2, r2, #16
 8007ba2:	605a      	str	r2, [r3, #4]
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	00db      	lsls	r3, r3, #3
 8007baa:	4a5e      	ldr	r2, [pc, #376]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007bac:	4694      	mov	ip, r2
 8007bae:	4463      	add	r3, ip
 8007bb0:	6859      	ldr	r1, [r3, #4]
 8007bb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bb4:	041a      	lsls	r2, r3, #16
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	00db      	lsls	r3, r3, #3
 8007bbc:	4859      	ldr	r0, [pc, #356]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007bbe:	4684      	mov	ip, r0
 8007bc0:	4463      	add	r3, ip
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 8007bc6:	2016      	movs	r0, #22
 8007bc8:	183b      	adds	r3, r7, r0
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	8952      	ldrh	r2, [r2, #10]
 8007bce:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	6959      	ldr	r1, [r3, #20]
 8007bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bd6:	b29c      	uxth	r4, r3
 8007bd8:	183b      	adds	r3, r7, r0
 8007bda:	881a      	ldrh	r2, [r3, #0]
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	0023      	movs	r3, r4
 8007be0:	f000 fbf2 	bl	80083c8 <USB_WritePMA>
 8007be4:	e193      	b.n	8007f0e <USB_EPStartXfer+0x962>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	6a1b      	ldr	r3, [r3, #32]
 8007bea:	647b      	str	r3, [r7, #68]	@ 0x44

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	18d3      	adds	r3, r2, r3
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a4b      	ldr	r2, [pc, #300]	@ (8007d28 <USB_EPStartXfer+0x77c>)
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	613b      	str	r3, [r7, #16]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	18d3      	adds	r3, r2, r3
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	4948      	ldr	r1, [pc, #288]	@ (8007d2c <USB_EPStartXfer+0x780>)
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	00db      	lsls	r3, r3, #3
 8007c16:	4a43      	ldr	r2, [pc, #268]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007c18:	4694      	mov	ip, r2
 8007c1a:	4463      	add	r3, ip
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	00db      	lsls	r3, r3, #3
 8007c24:	493f      	ldr	r1, [pc, #252]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007c26:	468c      	mov	ip, r1
 8007c28:	4463      	add	r3, ip
 8007c2a:	0412      	lsls	r2, r2, #16
 8007c2c:	0c12      	lsrs	r2, r2, #16
 8007c2e:	601a      	str	r2, [r3, #0]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	00db      	lsls	r3, r3, #3
 8007c36:	4a3b      	ldr	r2, [pc, #236]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007c38:	4694      	mov	ip, r2
 8007c3a:	4463      	add	r3, ip
 8007c3c:	6819      	ldr	r1, [r3, #0]
 8007c3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c40:	041a      	lsls	r2, r3, #16
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	00db      	lsls	r3, r3, #3
 8007c48:	4836      	ldr	r0, [pc, #216]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007c4a:	4684      	mov	ip, r0
 8007c4c:	4463      	add	r3, ip
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007c52:	2016      	movs	r0, #22
 8007c54:	183b      	adds	r3, r7, r0
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	8912      	ldrh	r2, [r2, #8]
 8007c5a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	6959      	ldr	r1, [r3, #20]
 8007c60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c62:	b29c      	uxth	r4, r3
 8007c64:	183b      	adds	r3, r7, r0
 8007c66:	881a      	ldrh	r2, [r3, #0]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	0023      	movs	r3, r4
 8007c6c:	f000 fbac 	bl	80083c8 <USB_WritePMA>
 8007c70:	e14d      	b.n	8007f0e <USB_EPStartXfer+0x962>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	6a1a      	ldr	r2, [r3, #32]
 8007c76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c78:	1ad2      	subs	r2, r2, r3
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	18d3      	adds	r3, r2, r3
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2240      	movs	r2, #64	@ 0x40
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	d100      	bne.n	8007c92 <USB_EPStartXfer+0x6e6>
 8007c90:	e0a2      	b.n	8007dd8 <USB_EPStartXfer+0x82c>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	785b      	ldrb	r3, [r3, #1]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d169      	bne.n	8007d6e <USB_EPStartXfer+0x7c2>
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	00db      	lsls	r3, r3, #3
 8007ca0:	4a20      	ldr	r2, [pc, #128]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007ca2:	4694      	mov	ip, r2
 8007ca4:	4463      	add	r3, ip
 8007ca6:	685a      	ldr	r2, [r3, #4]
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	00db      	lsls	r3, r3, #3
 8007cae:	491d      	ldr	r1, [pc, #116]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007cb0:	468c      	mov	ip, r1
 8007cb2:	4463      	add	r3, ip
 8007cb4:	0192      	lsls	r2, r2, #6
 8007cb6:	0992      	lsrs	r2, r2, #6
 8007cb8:	605a      	str	r2, [r3, #4]
 8007cba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d111      	bne.n	8007ce4 <USB_EPStartXfer+0x738>
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	00db      	lsls	r3, r3, #3
 8007cc6:	4a17      	ldr	r2, [pc, #92]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007cc8:	4694      	mov	ip, r2
 8007cca:	4463      	add	r3, ip
 8007ccc:	685a      	ldr	r2, [r3, #4]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	00db      	lsls	r3, r3, #3
 8007cd4:	4913      	ldr	r1, [pc, #76]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007cd6:	468c      	mov	ip, r1
 8007cd8:	4463      	add	r3, ip
 8007cda:	2180      	movs	r1, #128	@ 0x80
 8007cdc:	0609      	lsls	r1, r1, #24
 8007cde:	430a      	orrs	r2, r1
 8007ce0:	605a      	str	r2, [r3, #4]
 8007ce2:	e069      	b.n	8007db8 <USB_EPStartXfer+0x80c>
 8007ce4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ce6:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ce8:	d822      	bhi.n	8007d30 <USB_EPStartXfer+0x784>
 8007cea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cec:	085b      	lsrs	r3, r3, #1
 8007cee:	633b      	str	r3, [r7, #48]	@ 0x30
 8007cf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	d002      	beq.n	8007cfe <USB_EPStartXfer+0x752>
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	00db      	lsls	r3, r3, #3
 8007d04:	4a07      	ldr	r2, [pc, #28]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007d06:	4694      	mov	ip, r2
 8007d08:	4463      	add	r3, ip
 8007d0a:	6859      	ldr	r1, [r3, #4]
 8007d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0e:	069a      	lsls	r2, r3, #26
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	00db      	lsls	r3, r3, #3
 8007d16:	4803      	ldr	r0, [pc, #12]	@ (8007d24 <USB_EPStartXfer+0x778>)
 8007d18:	4684      	mov	ip, r0
 8007d1a:	4463      	add	r3, ip
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	605a      	str	r2, [r3, #4]
 8007d20:	e04a      	b.n	8007db8 <USB_EPStartXfer+0x80c>
 8007d22:	46c0      	nop			@ (mov r8, r8)
 8007d24:	40009800 	.word	0x40009800
 8007d28:	07ff8e8f 	.word	0x07ff8e8f
 8007d2c:	00008080 	.word	0x00008080
 8007d30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d32:	095b      	lsrs	r3, r3, #5
 8007d34:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d38:	221f      	movs	r2, #31
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	d102      	bne.n	8007d44 <USB_EPStartXfer+0x798>
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d40:	3b01      	subs	r3, #1
 8007d42:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	00db      	lsls	r3, r3, #3
 8007d4a:	4ad3      	ldr	r2, [pc, #844]	@ (8008098 <USB_EPStartXfer+0xaec>)
 8007d4c:	4694      	mov	ip, r2
 8007d4e:	4463      	add	r3, ip
 8007d50:	685a      	ldr	r2, [r3, #4]
 8007d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d54:	069b      	lsls	r3, r3, #26
 8007d56:	431a      	orrs	r2, r3
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	00db      	lsls	r3, r3, #3
 8007d5e:	49ce      	ldr	r1, [pc, #824]	@ (8008098 <USB_EPStartXfer+0xaec>)
 8007d60:	468c      	mov	ip, r1
 8007d62:	4463      	add	r3, ip
 8007d64:	2180      	movs	r1, #128	@ 0x80
 8007d66:	0609      	lsls	r1, r1, #24
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	605a      	str	r2, [r3, #4]
 8007d6c:	e024      	b.n	8007db8 <USB_EPStartXfer+0x80c>
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	785b      	ldrb	r3, [r3, #1]
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d120      	bne.n	8007db8 <USB_EPStartXfer+0x80c>
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	00db      	lsls	r3, r3, #3
 8007d7c:	4ac6      	ldr	r2, [pc, #792]	@ (8008098 <USB_EPStartXfer+0xaec>)
 8007d7e:	4694      	mov	ip, r2
 8007d80:	4463      	add	r3, ip
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	00db      	lsls	r3, r3, #3
 8007d8a:	49c3      	ldr	r1, [pc, #780]	@ (8008098 <USB_EPStartXfer+0xaec>)
 8007d8c:	468c      	mov	ip, r1
 8007d8e:	4463      	add	r3, ip
 8007d90:	0412      	lsls	r2, r2, #16
 8007d92:	0c12      	lsrs	r2, r2, #16
 8007d94:	605a      	str	r2, [r3, #4]
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	00db      	lsls	r3, r3, #3
 8007d9c:	4abe      	ldr	r2, [pc, #760]	@ (8008098 <USB_EPStartXfer+0xaec>)
 8007d9e:	4694      	mov	ip, r2
 8007da0:	4463      	add	r3, ip
 8007da2:	6859      	ldr	r1, [r3, #4]
 8007da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007da6:	041a      	lsls	r2, r3, #16
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	00db      	lsls	r3, r3, #3
 8007dae:	48ba      	ldr	r0, [pc, #744]	@ (8008098 <USB_EPStartXfer+0xaec>)
 8007db0:	4684      	mov	ip, r0
 8007db2:	4463      	add	r3, ip
 8007db4:	430a      	orrs	r2, r1
 8007db6:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 8007db8:	2016      	movs	r0, #22
 8007dba:	183b      	adds	r3, r7, r0
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	8952      	ldrh	r2, [r2, #10]
 8007dc0:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	6959      	ldr	r1, [r3, #20]
 8007dc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dc8:	b29c      	uxth	r4, r3
 8007dca:	183b      	adds	r3, r7, r0
 8007dcc:	881a      	ldrh	r2, [r3, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	0023      	movs	r3, r4
 8007dd2:	f000 faf9 	bl	80083c8 <USB_WritePMA>
 8007dd6:	e09a      	b.n	8007f0e <USB_EPStartXfer+0x962>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	785b      	ldrb	r3, [r3, #1]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d162      	bne.n	8007ea6 <USB_EPStartXfer+0x8fa>
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	00db      	lsls	r3, r3, #3
 8007de6:	4aac      	ldr	r2, [pc, #688]	@ (8008098 <USB_EPStartXfer+0xaec>)
 8007de8:	4694      	mov	ip, r2
 8007dea:	4463      	add	r3, ip
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	00db      	lsls	r3, r3, #3
 8007df4:	49a8      	ldr	r1, [pc, #672]	@ (8008098 <USB_EPStartXfer+0xaec>)
 8007df6:	468c      	mov	ip, r1
 8007df8:	4463      	add	r3, ip
 8007dfa:	0192      	lsls	r2, r2, #6
 8007dfc:	0992      	lsrs	r2, r2, #6
 8007dfe:	601a      	str	r2, [r3, #0]
 8007e00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d111      	bne.n	8007e2a <USB_EPStartXfer+0x87e>
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	00db      	lsls	r3, r3, #3
 8007e0c:	4aa2      	ldr	r2, [pc, #648]	@ (8008098 <USB_EPStartXfer+0xaec>)
 8007e0e:	4694      	mov	ip, r2
 8007e10:	4463      	add	r3, ip
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	00db      	lsls	r3, r3, #3
 8007e1a:	499f      	ldr	r1, [pc, #636]	@ (8008098 <USB_EPStartXfer+0xaec>)
 8007e1c:	468c      	mov	ip, r1
 8007e1e:	4463      	add	r3, ip
 8007e20:	2180      	movs	r1, #128	@ 0x80
 8007e22:	0609      	lsls	r1, r1, #24
 8007e24:	430a      	orrs	r2, r1
 8007e26:	601a      	str	r2, [r3, #0]
 8007e28:	e062      	b.n	8007ef0 <USB_EPStartXfer+0x944>
 8007e2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e2e:	d81b      	bhi.n	8007e68 <USB_EPStartXfer+0x8bc>
 8007e30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e32:	085b      	lsrs	r3, r3, #1
 8007e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e38:	2201      	movs	r2, #1
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	d002      	beq.n	8007e44 <USB_EPStartXfer+0x898>
 8007e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e40:	3301      	adds	r3, #1
 8007e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	4a93      	ldr	r2, [pc, #588]	@ (8008098 <USB_EPStartXfer+0xaec>)
 8007e4c:	4694      	mov	ip, r2
 8007e4e:	4463      	add	r3, ip
 8007e50:	6819      	ldr	r1, [r3, #0]
 8007e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e54:	069a      	lsls	r2, r3, #26
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	00db      	lsls	r3, r3, #3
 8007e5c:	488e      	ldr	r0, [pc, #568]	@ (8008098 <USB_EPStartXfer+0xaec>)
 8007e5e:	4684      	mov	ip, r0
 8007e60:	4463      	add	r3, ip
 8007e62:	430a      	orrs	r2, r1
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	e043      	b.n	8007ef0 <USB_EPStartXfer+0x944>
 8007e68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e6a:	095b      	lsrs	r3, r3, #5
 8007e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e70:	221f      	movs	r2, #31
 8007e72:	4013      	ands	r3, r2
 8007e74:	d102      	bne.n	8007e7c <USB_EPStartXfer+0x8d0>
 8007e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	00db      	lsls	r3, r3, #3
 8007e82:	4a85      	ldr	r2, [pc, #532]	@ (8008098 <USB_EPStartXfer+0xaec>)
 8007e84:	4694      	mov	ip, r2
 8007e86:	4463      	add	r3, ip
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e8c:	069b      	lsls	r3, r3, #26
 8007e8e:	431a      	orrs	r2, r3
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	00db      	lsls	r3, r3, #3
 8007e96:	4980      	ldr	r1, [pc, #512]	@ (8008098 <USB_EPStartXfer+0xaec>)
 8007e98:	468c      	mov	ip, r1
 8007e9a:	4463      	add	r3, ip
 8007e9c:	2180      	movs	r1, #128	@ 0x80
 8007e9e:	0609      	lsls	r1, r1, #24
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	e024      	b.n	8007ef0 <USB_EPStartXfer+0x944>
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	785b      	ldrb	r3, [r3, #1]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d120      	bne.n	8007ef0 <USB_EPStartXfer+0x944>
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	00db      	lsls	r3, r3, #3
 8007eb4:	4a78      	ldr	r2, [pc, #480]	@ (8008098 <USB_EPStartXfer+0xaec>)
 8007eb6:	4694      	mov	ip, r2
 8007eb8:	4463      	add	r3, ip
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	00db      	lsls	r3, r3, #3
 8007ec2:	4975      	ldr	r1, [pc, #468]	@ (8008098 <USB_EPStartXfer+0xaec>)
 8007ec4:	468c      	mov	ip, r1
 8007ec6:	4463      	add	r3, ip
 8007ec8:	0412      	lsls	r2, r2, #16
 8007eca:	0c12      	lsrs	r2, r2, #16
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	00db      	lsls	r3, r3, #3
 8007ed4:	4a70      	ldr	r2, [pc, #448]	@ (8008098 <USB_EPStartXfer+0xaec>)
 8007ed6:	4694      	mov	ip, r2
 8007ed8:	4463      	add	r3, ip
 8007eda:	6819      	ldr	r1, [r3, #0]
 8007edc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ede:	041a      	lsls	r2, r3, #16
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	00db      	lsls	r3, r3, #3
 8007ee6:	486c      	ldr	r0, [pc, #432]	@ (8008098 <USB_EPStartXfer+0xaec>)
 8007ee8:	4684      	mov	ip, r0
 8007eea:	4463      	add	r3, ip
 8007eec:	430a      	orrs	r2, r1
 8007eee:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ef0:	2016      	movs	r0, #22
 8007ef2:	183b      	adds	r3, r7, r0
 8007ef4:	683a      	ldr	r2, [r7, #0]
 8007ef6:	8912      	ldrh	r2, [r2, #8]
 8007ef8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	6959      	ldr	r1, [r3, #20]
 8007efe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f00:	b29c      	uxth	r4, r3
 8007f02:	183b      	adds	r3, r7, r0
 8007f04:	881a      	ldrh	r2, [r3, #0]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	0023      	movs	r3, r4
 8007f0a:	f000 fa5d 	bl	80083c8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	18d3      	adds	r3, r2, r3
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a60      	ldr	r2, [pc, #384]	@ (800809c <USB_EPStartXfer+0xaf0>)
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	60bb      	str	r3, [r7, #8]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	2210      	movs	r2, #16
 8007f24:	4053      	eors	r3, r2
 8007f26:	60bb      	str	r3, [r7, #8]
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	4053      	eors	r3, r2
 8007f2e:	60bb      	str	r3, [r7, #8]
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	18d3      	adds	r3, r2, r3
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	4958      	ldr	r1, [pc, #352]	@ (80080a0 <USB_EPStartXfer+0xaf4>)
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	601a      	str	r2, [r3, #0]
 8007f42:	e0a3      	b.n	800808c <USB_EPStartXfer+0xae0>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	7b1b      	ldrb	r3, [r3, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d13e      	bne.n	8007fca <USB_EPStartXfer+0xa1e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d116      	bne.n	8007f82 <USB_EPStartXfer+0x9d6>
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	78db      	ldrb	r3, [r3, #3]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d112      	bne.n	8007f82 <USB_EPStartXfer+0x9d6>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	18d3      	adds	r3, r2, r3
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a4e      	ldr	r2, [pc, #312]	@ (80080a4 <USB_EPStartXfer+0xaf8>)
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	623b      	str	r3, [r7, #32]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	18d3      	adds	r3, r2, r3
 8007f78:	6a3a      	ldr	r2, [r7, #32]
 8007f7a:	494b      	ldr	r1, [pc, #300]	@ (80080a8 <USB_EPStartXfer+0xafc>)
 8007f7c:	430a      	orrs	r2, r1
 8007f7e:	601a      	str	r2, [r3, #0]
 8007f80:	e011      	b.n	8007fa6 <USB_EPStartXfer+0x9fa>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	18d3      	adds	r3, r2, r3
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a47      	ldr	r2, [pc, #284]	@ (80080ac <USB_EPStartXfer+0xb00>)
 8007f90:	4013      	ands	r3, r2
 8007f92:	61fb      	str	r3, [r7, #28]
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	18d3      	adds	r3, r2, r3
 8007f9e:	69fa      	ldr	r2, [r7, #28]
 8007fa0:	493f      	ldr	r1, [pc, #252]	@ (80080a0 <USB_EPStartXfer+0xaf4>)
 8007fa2:	430a      	orrs	r2, r1
 8007fa4:	601a      	str	r2, [r3, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	699a      	ldr	r2, [r3, #24]
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d907      	bls.n	8007fc2 <USB_EPStartXfer+0xa16>
      {
        ep->xfer_len -= ep->maxpacket;
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	699a      	ldr	r2, [r3, #24]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	1ad2      	subs	r2, r2, r3
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	619a      	str	r2, [r3, #24]
 8007fc0:	e048      	b.n	8008054 <USB_EPStartXfer+0xaa8>
      }
      else
      {
        ep->xfer_len = 0U;
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	619a      	str	r2, [r3, #24]
 8007fc8:	e044      	b.n	8008054 <USB_EPStartXfer+0xaa8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	78db      	ldrb	r3, [r3, #3]
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d136      	bne.n	8008040 <USB_EPStartXfer+0xa94>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	69db      	ldr	r3, [r3, #28]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d03c      	beq.n	8008054 <USB_EPStartXfer+0xaa8>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	18d3      	adds	r3, r2, r3
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	212a      	movs	r1, #42	@ 0x2a
 8007fe8:	187b      	adds	r3, r7, r1
 8007fea:	801a      	strh	r2, [r3, #0]

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007fec:	187b      	adds	r3, r7, r1
 8007fee:	881a      	ldrh	r2, [r3, #0]
 8007ff0:	2380      	movs	r3, #128	@ 0x80
 8007ff2:	01db      	lsls	r3, r3, #7
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	d004      	beq.n	8008002 <USB_EPStartXfer+0xa56>
 8007ff8:	187b      	adds	r3, r7, r1
 8007ffa:	881b      	ldrh	r3, [r3, #0]
 8007ffc:	2240      	movs	r2, #64	@ 0x40
 8007ffe:	4013      	ands	r3, r2
 8008000:	d10b      	bne.n	800801a <USB_EPStartXfer+0xa6e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008002:	212a      	movs	r1, #42	@ 0x2a
 8008004:	187b      	adds	r3, r7, r1
 8008006:	881a      	ldrh	r2, [r3, #0]
 8008008:	2380      	movs	r3, #128	@ 0x80
 800800a:	01db      	lsls	r3, r3, #7
 800800c:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800800e:	d121      	bne.n	8008054 <USB_EPStartXfer+0xaa8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008010:	187b      	adds	r3, r7, r1
 8008012:	881b      	ldrh	r3, [r3, #0]
 8008014:	2240      	movs	r2, #64	@ 0x40
 8008016:	4013      	ands	r3, r2
 8008018:	d11c      	bne.n	8008054 <USB_EPStartXfer+0xaa8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	18d3      	adds	r3, r2, r3
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a1f      	ldr	r2, [pc, #124]	@ (80080a4 <USB_EPStartXfer+0xaf8>)
 8008028:	4013      	ands	r3, r2
 800802a:	627b      	str	r3, [r7, #36]	@ 0x24
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	18d3      	adds	r3, r2, r3
 8008036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008038:	491d      	ldr	r1, [pc, #116]	@ (80080b0 <USB_EPStartXfer+0xb04>)
 800803a:	430a      	orrs	r2, r1
 800803c:	601a      	str	r2, [r3, #0]
 800803e:	e009      	b.n	8008054 <USB_EPStartXfer+0xaa8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	78db      	ldrb	r3, [r3, #3]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d103      	bne.n	8008050 <USB_EPStartXfer+0xaa4>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	2200      	movs	r2, #0
 800804c:	619a      	str	r2, [r3, #24]
 800804e:	e001      	b.n	8008054 <USB_EPStartXfer+0xaa8>
      }
      else
      {
        return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e01c      	b.n	800808e <USB_EPStartXfer+0xae2>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	18d3      	adds	r3, r2, r3
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a14      	ldr	r2, [pc, #80]	@ (80080b4 <USB_EPStartXfer+0xb08>)
 8008062:	4013      	ands	r3, r2
 8008064:	61bb      	str	r3, [r7, #24]
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	2280      	movs	r2, #128	@ 0x80
 800806a:	0152      	lsls	r2, r2, #5
 800806c:	4053      	eors	r3, r2
 800806e:	61bb      	str	r3, [r7, #24]
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	2280      	movs	r2, #128	@ 0x80
 8008074:	0192      	lsls	r2, r2, #6
 8008076:	4053      	eors	r3, r2
 8008078:	61bb      	str	r3, [r7, #24]
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	18d3      	adds	r3, r2, r3
 8008084:	69ba      	ldr	r2, [r7, #24]
 8008086:	4906      	ldr	r1, [pc, #24]	@ (80080a0 <USB_EPStartXfer+0xaf4>)
 8008088:	430a      	orrs	r2, r1
 800808a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	0018      	movs	r0, r3
 8008090:	46bd      	mov	sp, r7
 8008092:	b013      	add	sp, #76	@ 0x4c
 8008094:	bd90      	pop	{r4, r7, pc}
 8008096:	46c0      	nop			@ (mov r8, r8)
 8008098:	40009800 	.word	0x40009800
 800809c:	07ff8fbf 	.word	0x07ff8fbf
 80080a0:	00008080 	.word	0x00008080
 80080a4:	07ff8f8f 	.word	0x07ff8f8f
 80080a8:	00008180 	.word	0x00008180
 80080ac:	07ff8e8f 	.word	0x07ff8e8f
 80080b0:	000080c0 	.word	0x000080c0
 80080b4:	07ffbf8f 	.word	0x07ffbf8f

080080b8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	785b      	ldrb	r3, [r3, #1]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d016      	beq.n	80080f8 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	18d3      	adds	r3, r2, r3
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a16      	ldr	r2, [pc, #88]	@ (8008130 <USB_EPSetStall+0x78>)
 80080d8:	4013      	ands	r3, r2
 80080da:	60bb      	str	r3, [r7, #8]
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	2210      	movs	r2, #16
 80080e0:	4053      	eors	r3, r2
 80080e2:	60bb      	str	r3, [r7, #8]
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	18d3      	adds	r3, r2, r3
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	4910      	ldr	r1, [pc, #64]	@ (8008134 <USB_EPSetStall+0x7c>)
 80080f2:	430a      	orrs	r2, r1
 80080f4:	601a      	str	r2, [r3, #0]
 80080f6:	e016      	b.n	8008126 <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	18d3      	adds	r3, r2, r3
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a0c      	ldr	r2, [pc, #48]	@ (8008138 <USB_EPSetStall+0x80>)
 8008106:	4013      	ands	r3, r2
 8008108:	60fb      	str	r3, [r7, #12]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2280      	movs	r2, #128	@ 0x80
 800810e:	0152      	lsls	r2, r2, #5
 8008110:	4053      	eors	r3, r2
 8008112:	60fb      	str	r3, [r7, #12]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	18d3      	adds	r3, r2, r3
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	4904      	ldr	r1, [pc, #16]	@ (8008134 <USB_EPSetStall+0x7c>)
 8008122:	430a      	orrs	r2, r1
 8008124:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	0018      	movs	r0, r3
 800812a:	46bd      	mov	sp, r7
 800812c:	b004      	add	sp, #16
 800812e:	bd80      	pop	{r7, pc}
 8008130:	07ff8fbf 	.word	0x07ff8fbf
 8008134:	00008080 	.word	0x00008080
 8008138:	07ffbf8f 	.word	0x07ffbf8f

0800813c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b088      	sub	sp, #32
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	785b      	ldrb	r3, [r3, #1]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d037      	beq.n	80081be <USB_EPClearStall+0x82>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	18d3      	adds	r3, r2, r3
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	613b      	str	r3, [r7, #16]
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	2240      	movs	r2, #64	@ 0x40
 8008160:	4013      	ands	r3, r2
 8008162:	d011      	beq.n	8008188 <USB_EPClearStall+0x4c>
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	18d3      	adds	r3, r2, r3
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a32      	ldr	r2, [pc, #200]	@ (800823c <USB_EPClearStall+0x100>)
 8008172:	4013      	ands	r3, r2
 8008174:	60fb      	str	r3, [r7, #12]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	18d3      	adds	r3, r2, r3
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	492f      	ldr	r1, [pc, #188]	@ (8008240 <USB_EPClearStall+0x104>)
 8008184:	430a      	orrs	r2, r1
 8008186:	601a      	str	r2, [r3, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	78db      	ldrb	r3, [r3, #3]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d050      	beq.n	8008232 <USB_EPClearStall+0xf6>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	18d3      	adds	r3, r2, r3
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a29      	ldr	r2, [pc, #164]	@ (8008244 <USB_EPClearStall+0x108>)
 800819e:	4013      	ands	r3, r2
 80081a0:	60bb      	str	r3, [r7, #8]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	2220      	movs	r2, #32
 80081a6:	4053      	eors	r3, r2
 80081a8:	60bb      	str	r3, [r7, #8]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	18d3      	adds	r3, r2, r3
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	4924      	ldr	r1, [pc, #144]	@ (8008248 <USB_EPClearStall+0x10c>)
 80081b8:	430a      	orrs	r2, r1
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	e039      	b.n	8008232 <USB_EPClearStall+0xf6>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	18d3      	adds	r3, r2, r3
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	61fb      	str	r3, [r7, #28]
 80081cc:	69fa      	ldr	r2, [r7, #28]
 80081ce:	2380      	movs	r3, #128	@ 0x80
 80081d0:	01db      	lsls	r3, r3, #7
 80081d2:	4013      	ands	r3, r2
 80081d4:	d011      	beq.n	80081fa <USB_EPClearStall+0xbe>
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	18d3      	adds	r3, r2, r3
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a16      	ldr	r2, [pc, #88]	@ (800823c <USB_EPClearStall+0x100>)
 80081e4:	4013      	ands	r3, r2
 80081e6:	61bb      	str	r3, [r7, #24]
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	18d3      	adds	r3, r2, r3
 80081f2:	69ba      	ldr	r2, [r7, #24]
 80081f4:	4915      	ldr	r1, [pc, #84]	@ (800824c <USB_EPClearStall+0x110>)
 80081f6:	430a      	orrs	r2, r1
 80081f8:	601a      	str	r2, [r3, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	18d3      	adds	r3, r2, r3
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a12      	ldr	r2, [pc, #72]	@ (8008250 <USB_EPClearStall+0x114>)
 8008208:	4013      	ands	r3, r2
 800820a:	617b      	str	r3, [r7, #20]
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	2280      	movs	r2, #128	@ 0x80
 8008210:	0152      	lsls	r2, r2, #5
 8008212:	4053      	eors	r3, r2
 8008214:	617b      	str	r3, [r7, #20]
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2280      	movs	r2, #128	@ 0x80
 800821a:	0192      	lsls	r2, r2, #6
 800821c:	4053      	eors	r3, r2
 800821e:	617b      	str	r3, [r7, #20]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	18d3      	adds	r3, r2, r3
 800822a:	697a      	ldr	r2, [r7, #20]
 800822c:	4906      	ldr	r1, [pc, #24]	@ (8008248 <USB_EPClearStall+0x10c>)
 800822e:	430a      	orrs	r2, r1
 8008230:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008232:	2300      	movs	r3, #0
}
 8008234:	0018      	movs	r0, r3
 8008236:	46bd      	mov	sp, r7
 8008238:	b008      	add	sp, #32
 800823a:	bd80      	pop	{r7, pc}
 800823c:	07ff8f8f 	.word	0x07ff8f8f
 8008240:	000080c0 	.word	0x000080c0
 8008244:	07ff8fbf 	.word	0x07ff8fbf
 8008248:	00008080 	.word	0x00008080
 800824c:	0000c080 	.word	0x0000c080
 8008250:	07ffbf8f 	.word	0x07ffbf8f

08008254 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  /* IN endpoint */
  if (ep->is_in == 1U)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	785b      	ldrb	r3, [r3, #1]
 8008262:	2b01      	cmp	r3, #1
 8008264:	d131      	bne.n	80082ca <USB_EPStopXfer+0x76>
  {
    if (ep->doublebuffer == 0U)
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	7b1b      	ldrb	r3, [r3, #12]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d15f      	bne.n	800832e <USB_EPStopXfer+0xda>
    {
      if (ep->type != EP_TYPE_ISOC)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	78db      	ldrb	r3, [r3, #3]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d016      	beq.n	80082a4 <USB_EPStopXfer+0x50>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	18d3      	adds	r3, r2, r3
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a2d      	ldr	r2, [pc, #180]	@ (8008338 <USB_EPStopXfer+0xe4>)
 8008284:	4013      	ands	r3, r2
 8008286:	60bb      	str	r3, [r7, #8]
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2220      	movs	r2, #32
 800828c:	4053      	eors	r3, r2
 800828e:	60bb      	str	r3, [r7, #8]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	18d3      	adds	r3, r2, r3
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	4927      	ldr	r1, [pc, #156]	@ (800833c <USB_EPStopXfer+0xe8>)
 800829e:	430a      	orrs	r2, r1
 80082a0:	601a      	str	r2, [r3, #0]
 80082a2:	e044      	b.n	800832e <USB_EPStopXfer+0xda>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	18d3      	adds	r3, r2, r3
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a21      	ldr	r2, [pc, #132]	@ (8008338 <USB_EPStopXfer+0xe4>)
 80082b2:	4013      	ands	r3, r2
 80082b4:	60fb      	str	r3, [r7, #12]
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	18d3      	adds	r3, r2, r3
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	491e      	ldr	r1, [pc, #120]	@ (800833c <USB_EPStopXfer+0xe8>)
 80082c4:	430a      	orrs	r2, r1
 80082c6:	601a      	str	r2, [r3, #0]
 80082c8:	e031      	b.n	800832e <USB_EPStopXfer+0xda>
      }
    }
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	7b1b      	ldrb	r3, [r3, #12]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d12d      	bne.n	800832e <USB_EPStopXfer+0xda>
    {
      if (ep->type != EP_TYPE_ISOC)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	78db      	ldrb	r3, [r3, #3]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d017      	beq.n	800830a <USB_EPStopXfer+0xb6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	18d3      	adds	r3, r2, r3
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a16      	ldr	r2, [pc, #88]	@ (8008340 <USB_EPStopXfer+0xec>)
 80082e8:	4013      	ands	r3, r2
 80082ea:	613b      	str	r3, [r7, #16]
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	2280      	movs	r2, #128	@ 0x80
 80082f0:	0192      	lsls	r2, r2, #6
 80082f2:	4053      	eors	r3, r2
 80082f4:	613b      	str	r3, [r7, #16]
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	18d3      	adds	r3, r2, r3
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	490e      	ldr	r1, [pc, #56]	@ (800833c <USB_EPStopXfer+0xe8>)
 8008304:	430a      	orrs	r2, r1
 8008306:	601a      	str	r2, [r3, #0]
 8008308:	e011      	b.n	800832e <USB_EPStopXfer+0xda>
      }
      else
      {
        /* Configure RX Endpoint to disabled state */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	18d3      	adds	r3, r2, r3
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a0a      	ldr	r2, [pc, #40]	@ (8008340 <USB_EPStopXfer+0xec>)
 8008318:	4013      	ands	r3, r2
 800831a:	617b      	str	r3, [r7, #20]
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	18d3      	adds	r3, r2, r3
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	4904      	ldr	r1, [pc, #16]	@ (800833c <USB_EPStopXfer+0xe8>)
 800832a:	430a      	orrs	r2, r1
 800832c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  return HAL_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	0018      	movs	r0, r3
 8008332:	46bd      	mov	sp, r7
 8008334:	b006      	add	sp, #24
 8008336:	bd80      	pop	{r7, pc}
 8008338:	07ff8fbf 	.word	0x07ff8fbf
 800833c:	00008080 	.word	0x00008080
 8008340:	07ffbf8f 	.word	0x07ffbf8f

08008344 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	000a      	movs	r2, r1
 800834e:	1cfb      	adds	r3, r7, #3
 8008350:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8008352:	1cfb      	adds	r3, r7, #3
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d102      	bne.n	8008360 <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2280      	movs	r2, #128	@ 0x80
 800835e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	0018      	movs	r0, r3
 8008364:	46bd      	mov	sp, r7
 8008366:	b002      	add	sp, #8
 8008368:	bd80      	pop	{r7, pc}

0800836a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b082      	sub	sp, #8
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008376:	2280      	movs	r2, #128	@ 0x80
 8008378:	0212      	lsls	r2, r2, #8
 800837a:	431a      	orrs	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	0018      	movs	r0, r3
 8008384:	46bd      	mov	sp, r7
 8008386:	b002      	add	sp, #8
 8008388:	bd80      	pop	{r7, pc}
	...

0800838c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008398:	4a04      	ldr	r2, [pc, #16]	@ (80083ac <USB_DevDisconnect+0x20>)
 800839a:	401a      	ands	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	0018      	movs	r0, r3
 80083a4:	46bd      	mov	sp, r7
 80083a6:	b002      	add	sp, #8
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	46c0      	nop			@ (mov r8, r8)
 80083ac:	ffff7fff 	.word	0xffff7fff

080083b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083bc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80083be:	68fb      	ldr	r3, [r7, #12]
}
 80083c0:	0018      	movs	r0, r3
 80083c2:	46bd      	mov	sp, r7
 80083c4:	b004      	add	sp, #16
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b08a      	sub	sp, #40	@ 0x28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	0019      	movs	r1, r3
 80083d4:	1dbb      	adds	r3, r7, #6
 80083d6:	801a      	strh	r2, [r3, #0]
 80083d8:	1d3b      	adds	r3, r7, #4
 80083da:	1c0a      	adds	r2, r1, #0
 80083dc:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 80083de:	1d3b      	adds	r3, r7, #4
 80083e0:	881b      	ldrh	r3, [r3, #0]
 80083e2:	3303      	adds	r3, #3
 80083e4:	089b      	lsrs	r3, r3, #2
 80083e6:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 80083e8:	2016      	movs	r0, #22
 80083ea:	183b      	adds	r3, r7, r0
 80083ec:	1d3a      	adds	r2, r7, #4
 80083ee:	8812      	ldrh	r2, [r2, #0]
 80083f0:	2103      	movs	r1, #3
 80083f2:	400a      	ands	r2, r1
 80083f4:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 80083fa:	183b      	adds	r3, r7, r0
 80083fc:	881b      	ldrh	r3, [r3, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d002      	beq.n	8008408 <USB_WritePMA+0x40>
  {
    NbWords--;
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	3b01      	subs	r3, #1
 8008406:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 8008408:	1dbb      	adds	r3, r7, #6
 800840a:	881b      	ldrh	r3, [r3, #0]
 800840c:	4a28      	ldr	r2, [pc, #160]	@ (80084b0 <USB_WritePMA+0xe8>)
 800840e:	4694      	mov	ip, r2
 8008410:	4463      	add	r3, ip
 8008412:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	623b      	str	r3, [r7, #32]
 8008418:	e01f      	b.n	800845a <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	781a      	ldrb	r2, [r3, #0]
 800841e:	7859      	ldrb	r1, [r3, #1]
 8008420:	0209      	lsls	r1, r1, #8
 8008422:	430a      	orrs	r2, r1
 8008424:	7899      	ldrb	r1, [r3, #2]
 8008426:	0409      	lsls	r1, r1, #16
 8008428:	430a      	orrs	r2, r1
 800842a:	78db      	ldrb	r3, [r3, #3]
 800842c:	061b      	lsls	r3, r3, #24
 800842e:	4313      	orrs	r3, r2
 8008430:	001a      	movs	r2, r3
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	601a      	str	r2, [r3, #0]
    pdwVal++;
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	3304      	adds	r3, #4
 800843a:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	3301      	adds	r3, #1
 8008440:	613b      	str	r3, [r7, #16]
    pBuf++;
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	3301      	adds	r3, #1
 8008446:	613b      	str	r3, [r7, #16]
    pBuf++;
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	3301      	adds	r3, #1
 800844c:	613b      	str	r3, [r7, #16]
    pBuf++;
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	3301      	adds	r3, #1
 8008452:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 8008454:	6a3b      	ldr	r3, [r7, #32]
 8008456:	3b01      	subs	r3, #1
 8008458:	623b      	str	r3, [r7, #32]
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1dc      	bne.n	800841a <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 8008460:	2316      	movs	r3, #22
 8008462:	18fb      	adds	r3, r7, r3
 8008464:	881b      	ldrh	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d01e      	beq.n	80084a8 <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 800846a:	2300      	movs	r3, #0
 800846c:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	001a      	movs	r2, r3
 8008474:	6a3b      	ldr	r3, [r7, #32]
 8008476:	00db      	lsls	r3, r3, #3
 8008478:	409a      	lsls	r2, r3
 800847a:	0013      	movs	r3, r2
 800847c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800847e:	4313      	orrs	r3, r2
 8008480:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	3301      	adds	r3, #1
 8008486:	623b      	str	r3, [r7, #32]
      pBuf++;
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	3301      	adds	r3, #1
 800848c:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800848e:	2116      	movs	r1, #22
 8008490:	187b      	adds	r3, r7, r1
 8008492:	881a      	ldrh	r2, [r3, #0]
 8008494:	187b      	adds	r3, r7, r1
 8008496:	3a01      	subs	r2, #1
 8008498:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800849a:	187b      	adds	r3, r7, r1
 800849c:	881b      	ldrh	r3, [r3, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1e5      	bne.n	800846e <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084a6:	601a      	str	r2, [r3, #0]
  }
}
 80084a8:	46c0      	nop			@ (mov r8, r8)
 80084aa:	46bd      	mov	sp, r7
 80084ac:	b00a      	add	sp, #40	@ 0x28
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	40009800 	.word	0x40009800

080084b4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80084b4:	b590      	push	{r4, r7, lr}
 80084b6:	b08b      	sub	sp, #44	@ 0x2c
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	0019      	movs	r1, r3
 80084c0:	1dbb      	adds	r3, r7, #6
 80084c2:	801a      	strh	r2, [r3, #0]
 80084c4:	1d3b      	adds	r3, r7, #4
 80084c6:	1c0a      	adds	r2, r1, #0
 80084c8:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 80084ca:	1d3b      	adds	r3, r7, #4
 80084cc:	881b      	ldrh	r3, [r3, #0]
 80084ce:	3303      	adds	r3, #3
 80084d0:	089b      	lsrs	r3, r3, #2
 80084d2:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 80084d4:	201a      	movs	r0, #26
 80084d6:	183b      	adds	r3, r7, r0
 80084d8:	1d3a      	adds	r2, r7, #4
 80084da:	8812      	ldrh	r2, [r2, #0]
 80084dc:	2103      	movs	r1, #3
 80084de:	400a      	ands	r2, r1
 80084e0:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 80084e6:	1dbb      	adds	r3, r7, #6
 80084e8:	881b      	ldrh	r3, [r3, #0]
 80084ea:	4a39      	ldr	r2, [pc, #228]	@ (80085d0 <USB_ReadPMA+0x11c>)
 80084ec:	4694      	mov	ip, r2
 80084ee:	4463      	add	r3, ip
 80084f0:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 80084f2:	183b      	adds	r3, r7, r0
 80084f4:	881b      	ldrh	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d002      	beq.n	8008500 <USB_ReadPMA+0x4c>
  {
    NbWords--;
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	3b01      	subs	r3, #1
 80084fe:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	627b      	str	r3, [r7, #36]	@ 0x24
 8008504:	e03c      	b.n	8008580 <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 8008506:	6a3b      	ldr	r3, [r7, #32]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	21ff      	movs	r1, #255	@ 0xff
 800850e:	4011      	ands	r1, r2
 8008510:	000c      	movs	r4, r1
 8008512:	7819      	ldrb	r1, [r3, #0]
 8008514:	2000      	movs	r0, #0
 8008516:	4001      	ands	r1, r0
 8008518:	1c08      	adds	r0, r1, #0
 800851a:	1c21      	adds	r1, r4, #0
 800851c:	4301      	orrs	r1, r0
 800851e:	7019      	strb	r1, [r3, #0]
 8008520:	0a11      	lsrs	r1, r2, #8
 8008522:	20ff      	movs	r0, #255	@ 0xff
 8008524:	4001      	ands	r1, r0
 8008526:	000c      	movs	r4, r1
 8008528:	7859      	ldrb	r1, [r3, #1]
 800852a:	2000      	movs	r0, #0
 800852c:	4001      	ands	r1, r0
 800852e:	1c08      	adds	r0, r1, #0
 8008530:	1c21      	adds	r1, r4, #0
 8008532:	4301      	orrs	r1, r0
 8008534:	7059      	strb	r1, [r3, #1]
 8008536:	0c11      	lsrs	r1, r2, #16
 8008538:	20ff      	movs	r0, #255	@ 0xff
 800853a:	4001      	ands	r1, r0
 800853c:	000c      	movs	r4, r1
 800853e:	7899      	ldrb	r1, [r3, #2]
 8008540:	2000      	movs	r0, #0
 8008542:	4001      	ands	r1, r0
 8008544:	1c08      	adds	r0, r1, #0
 8008546:	1c21      	adds	r1, r4, #0
 8008548:	4301      	orrs	r1, r0
 800854a:	7099      	strb	r1, [r3, #2]
 800854c:	0e10      	lsrs	r0, r2, #24
 800854e:	78da      	ldrb	r2, [r3, #3]
 8008550:	2100      	movs	r1, #0
 8008552:	400a      	ands	r2, r1
 8008554:	1c11      	adds	r1, r2, #0
 8008556:	1c02      	adds	r2, r0, #0
 8008558:	430a      	orrs	r2, r1
 800855a:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 800855c:	6a3b      	ldr	r3, [r7, #32]
 800855e:	3304      	adds	r3, #4
 8008560:	623b      	str	r3, [r7, #32]
    pBuf++;
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	3301      	adds	r3, #1
 8008566:	617b      	str	r3, [r7, #20]
    pBuf++;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	3301      	adds	r3, #1
 800856c:	617b      	str	r3, [r7, #20]
    pBuf++;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	3301      	adds	r3, #1
 8008572:	617b      	str	r3, [r7, #20]
    pBuf++;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	3301      	adds	r3, #1
 8008578:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800857a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800857c:	3b01      	subs	r3, #1
 800857e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1bf      	bne.n	8008506 <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 8008586:	231a      	movs	r3, #26
 8008588:	18fb      	adds	r3, r7, r3
 800858a:	881b      	ldrh	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d01b      	beq.n	80085c8 <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 8008590:	6a3b      	ldr	r3, [r7, #32]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 8008596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008598:	b2db      	uxtb	r3, r3
 800859a:	00db      	lsls	r3, r3, #3
 800859c:	693a      	ldr	r2, [r7, #16]
 800859e:	40da      	lsrs	r2, r3
 80085a0:	0013      	movs	r3, r2
 80085a2:	b2da      	uxtb	r2, r3
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	701a      	strb	r2, [r3, #0]
      count++;
 80085a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085aa:	3301      	adds	r3, #1
 80085ac:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	3301      	adds	r3, #1
 80085b2:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 80085b4:	211a      	movs	r1, #26
 80085b6:	187b      	adds	r3, r7, r1
 80085b8:	881a      	ldrh	r2, [r3, #0]
 80085ba:	187b      	adds	r3, r7, r1
 80085bc:	3a01      	subs	r2, #1
 80085be:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 80085c0:	187b      	adds	r3, r7, r1
 80085c2:	881b      	ldrh	r3, [r3, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1e6      	bne.n	8008596 <USB_ReadPMA+0xe2>
  }
}
 80085c8:	46c0      	nop			@ (mov r8, r8)
 80085ca:	46bd      	mov	sp, r7
 80085cc:	b00b      	add	sp, #44	@ 0x2c
 80085ce:	bd90      	pop	{r4, r7, pc}
 80085d0:	40009800 	.word	0x40009800

080085d4 <_ux_system_error_handler>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 80085e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008614 <_ux_system_error_handler+0x40>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	60da      	str	r2, [r3, #12]
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 80085e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008614 <_ux_system_error_handler+0x40>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	691a      	ldr	r2, [r3, #16]
 80085ee:	3201      	adds	r2, #1
 80085f0:	611a      	str	r2, [r3, #16]

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 80085f2:	4b08      	ldr	r3, [pc, #32]	@ (8008614 <_ux_system_error_handler+0x40>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d006      	beq.n	800860a <_ux_system_error_handler+0x36>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 80085fc:	4b05      	ldr	r3, [pc, #20]	@ (8008614 <_ux_system_error_handler+0x40>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	68b9      	ldr	r1, [r7, #8]
 8008606:	68f8      	ldr	r0, [r7, #12]
 8008608:	4798      	blx	r3
    }
}
 800860a:	46c0      	nop			@ (mov r8, r8)
 800860c:	46bd      	mov	sp, r7
 800860e:	b004      	add	sp, #16
 8008610:	bd80      	pop	{r7, pc}
 8008612:	46c0      	nop			@ (mov r8, r8)
 8008614:	2000159c 	.word	0x2000159c

08008618 <_ux_system_initialize>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b08a      	sub	sp, #40	@ 0x28
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
 8008624:	603b      	str	r3, [r7, #0]
UINT                status;
#endif
ULONG               pool_size;

    /* Check if the regular memory pool is valid.  */
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d002      	beq.n	8008632 <_ux_system_initialize+0x1a>
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d101      	bne.n	8008636 <_ux_system_initialize+0x1e>
        return(UX_INVALID_PARAMETER);
 8008632:	23fa      	movs	r3, #250	@ 0xfa
 8008634:	e07f      	b.n	8008736 <_ux_system_initialize+0x11e>

    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 8008636:	68ba      	ldr	r2, [r7, #8]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2100      	movs	r1, #0
 800863c:	0018      	movs	r0, r3
 800863e:	f000 fba7 	bl	8008d90 <_ux_utility_memory_set>

    /* Set the _ux_system structure at the start of our regular memory */
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 8008642:	4b3f      	ldr	r3, [pc, #252]	@ (8008740 <_ux_system_initialize+0x128>)
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	601a      	str	r2, [r3, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset = sizeof(UX_SYSTEM);
 8008648:	2318      	movs	r3, #24
 800864a:	627b      	str	r3, [r7, #36]	@ 0x24
#endif

#ifndef UX_HOST_SIDE_ONLY

    /* Set the _ux_system_slave structure.  */
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008650:	18d2      	adds	r2, r2, r3
 8008652:	4b3c      	ldr	r3, [pc, #240]	@ (8008744 <_ux_system_initialize+0x12c>)
 8008654:	601a      	str	r2, [r3, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_SLAVE);
 8008656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008658:	3371      	adds	r3, #113	@ 0x71
 800865a:	33ff      	adds	r3, #255	@ 0xff
 800865c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif

    /* Set the regular memory pool structure.  */
    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800865e:	4b38      	ldr	r3, [pc, #224]	@ (8008740 <_ux_system_initialize+0x128>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68f9      	ldr	r1, [r7, #12]
 8008664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008666:	188a      	adds	r2, r1, r2
 8008668:	601a      	str	r2, [r3, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 800866a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866c:	3314      	adds	r3, #20
 800866e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check if the cache save memory pool is valid.  */
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00c      	beq.n	8008690 <_ux_system_initialize+0x78>
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d009      	beq.n	8008690 <_ux_system_initialize+0x78>
    {

        /* Set the cache safe memory pool structure.  */
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800867c:	4b30      	ldr	r3, [pc, #192]	@ (8008740 <_ux_system_initialize+0x128>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68f9      	ldr	r1, [r7, #12]
 8008682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008684:	188a      	adds	r2, r1, r2
 8008686:	605a      	str	r2, [r3, #4]

        /* Add to the memory offset the size of the allocated block.  */
        memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);
 8008688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868a:	3314      	adds	r3, #20
 800868c:	627b      	str	r3, [r7, #36]	@ 0x24
 800868e:	e005      	b.n	800869c <_ux_system_initialize+0x84>
    }
    else
    {

        /* Set the cache safe memory pool structure to regular pool. */
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 8008690:	4b2b      	ldr	r3, [pc, #172]	@ (8008740 <_ux_system_initialize+0x128>)
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	4b2a      	ldr	r3, [pc, #168]	@ (8008740 <_ux_system_initialize+0x128>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6812      	ldr	r2, [r2, #0]
 800869a:	605a      	str	r2, [r3, #4]
    }

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start = (ALIGN_TYPE) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a0:	18d3      	adds	r3, r2, r3
 80086a2:	623b      	str	r3, [r7, #32]
    int_memory_pool_start += UX_ALIGN_MIN;
 80086a4:	6a3b      	ldr	r3, [r7, #32]
 80086a6:	3307      	adds	r3, #7
 80086a8:	623b      	str	r3, [r7, #32]
    int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);
 80086aa:	6a3b      	ldr	r3, [r7, #32]
 80086ac:	2207      	movs	r2, #7
 80086ae:	4393      	bics	r3, r2
 80086b0:	623b      	str	r3, [r7, #32]

    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	18d3      	adds	r3, r2, r3
 80086b8:	61fb      	str	r3, [r7, #28]

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 80086ba:	69fb      	ldr	r3, [r7, #28]
 80086bc:	6a3a      	ldr	r2, [r7, #32]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d301      	bcc.n	80086c6 <_ux_system_initialize+0xae>
    {

        /* No memory available.  */
        return(UX_MEMORY_INSUFFICIENT);
 80086c2:	2312      	movs	r3, #18
 80086c4:	e037      	b.n	8008736 <_ux_system_initialize+0x11e>
    }

    /* get the regular memory pool size.  */
    pool_size = (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);
 80086c6:	69fa      	ldr	r2, [r7, #28]
 80086c8:	6a3b      	ldr	r3, [r7, #32]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	61bb      	str	r3, [r7, #24]

    /* Create the regular memory pool.  */
    _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR],
 80086ce:	4b1c      	ldr	r3, [pc, #112]	@ (8008740 <_ux_system_initialize+0x128>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6a39      	ldr	r1, [r7, #32]
 80086d6:	69ba      	ldr	r2, [r7, #24]
 80086d8:	0018      	movs	r0, r3
 80086da:	f000 f9eb 	bl	8008ab4 <_ux_utility_memory_byte_pool_create>
                                        (UX_MEMORY_BYTE_POOL *)int_memory_pool_start,
                                        pool_size);

    /* Check the definition of the cache safe pool. If the application or controller do not require any cache safe memory,
       define the cached safe memory region as the regular memory region.  */
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d027      	beq.n	8008734 <_ux_system_initialize+0x11c>
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d024      	beq.n	8008734 <_ux_system_initialize+0x11c>
    {

        /* Reset this memory block */
        _ux_utility_memory_set(cache_safe_memory_pool_start, 0, cache_safe_memory_size); /* Use case of memset is verified. */
 80086ea:	683a      	ldr	r2, [r7, #0]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2100      	movs	r1, #0
 80086f0:	0018      	movs	r0, r3
 80086f2:	f000 fb4d 	bl	8008d90 <_ux_utility_memory_set>

        /* Make sure the cache safe memory pool is aligned properly */
        int_memory_pool_start =   (ALIGN_TYPE) cache_safe_memory_pool_start;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	623b      	str	r3, [r7, #32]
        int_memory_pool_start +=  UX_ALIGN_MIN;
 80086fa:	6a3b      	ldr	r3, [r7, #32]
 80086fc:	3307      	adds	r3, #7
 80086fe:	623b      	str	r3, [r7, #32]
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8008700:	6a3b      	ldr	r3, [r7, #32]
 8008702:	2207      	movs	r2, #7
 8008704:	4393      	bics	r3, r2
 8008706:	623b      	str	r3, [r7, #32]

        cache_safe_memory_pool_end =  (void *) (((UCHAR *) cache_safe_memory_pool_start) + cache_safe_memory_size);
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	18d3      	adds	r3, r2, r3
 800870e:	617b      	str	r3, [r7, #20]

        /* Check if we have memory available.  */
        if (int_memory_pool_start >= (ALIGN_TYPE) cache_safe_memory_pool_end)
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	6a3a      	ldr	r2, [r7, #32]
 8008714:	429a      	cmp	r2, r3
 8008716:	d301      	bcc.n	800871c <_ux_system_initialize+0x104>
        {

            /* No memory available.  */
            return(UX_MEMORY_INSUFFICIENT);
 8008718:	2312      	movs	r3, #18
 800871a:	e00c      	b.n	8008736 <_ux_system_initialize+0x11e>
        }

        pool_size = (ULONG) (((ALIGN_TYPE) cache_safe_memory_pool_end) - int_memory_pool_start);
 800871c:	697a      	ldr	r2, [r7, #20]
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	61bb      	str	r3, [r7, #24]

        _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE],
 8008724:	4b06      	ldr	r3, [pc, #24]	@ (8008740 <_ux_system_initialize+0x128>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	6a39      	ldr	r1, [r7, #32]
 800872c:	69ba      	ldr	r2, [r7, #24]
 800872e:	0018      	movs	r0, r3
 8008730:	f000 f9c0 	bl	8008ab4 <_ux_utility_memory_byte_pool_create>
    status =  _ux_system_mutex_create(&_ux_system -> ux_system_mutex, "ux_system_mutex");
    if(status != UX_SUCCESS)
        return(UX_MUTEX_ERROR);
#endif

    return(UX_SUCCESS);
 8008734:	2300      	movs	r3, #0
}
 8008736:	0018      	movs	r0, r3
 8008738:	46bd      	mov	sp, r7
 800873a:	b00a      	add	sp, #40	@ 0x28
 800873c:	bd80      	pop	{r7, pc}
 800873e:	46c0      	nop			@ (mov r8, r8)
 8008740:	2000159c 	.word	0x2000159c
 8008744:	200015a0 	.word	0x200015a0

08008748 <_uxe_system_initialize>:
/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _uxe_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size,
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
 8008754:	603b      	str	r3, [r7, #0]
    UX_ASSERT((_ux_utility_descriptor_parse_size(_ux_system_usb_2_0_extension_descriptor_structure, UX_USB_2_0_EXTENSION_DESCRIPTOR_ENTRIES, 0x3u)) == sizeof(UX_USB_2_0_EXTENSION_DESCRIPTOR));
    UX_ASSERT((_ux_utility_descriptor_parse_size(_ux_system_container_id_descriptor_structure, UX_CONTAINER_ID_DESCRIPTOR_ENTRIES, 0x3u)) == sizeof(UX_CONTAINER_ID_DESCRIPTOR));


    /* Sanity check.  */
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d002      	beq.n	8008762 <_uxe_system_initialize+0x1a>
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d101      	bne.n	8008766 <_uxe_system_initialize+0x1e>
            return(UX_INVALID_PARAMETER);
 8008762:	23fa      	movs	r3, #250	@ 0xfa
 8008764:	e006      	b.n	8008774 <_uxe_system_initialize+0x2c>

    /* Invoke system initialization function.  */
    return(_ux_system_initialize(regular_memory_pool_start, regular_memory_size,
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	68b9      	ldr	r1, [r7, #8]
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f7ff ff53 	bl	8008618 <_ux_system_initialize>
 8008772:	0003      	movs	r3, r0
                                 cache_safe_memory_pool_start, cache_safe_memory_size));
}
 8008774:	0018      	movs	r0, r3
 8008776:	46bd      	mov	sp, r7
 8008778:	b004      	add	sp, #16
 800877a:	bd80      	pop	{r7, pc}

0800877c <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	607a      	str	r2, [r7, #4]
 8008788:	603b      	str	r3, [r7, #0]

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 800878a:	e041      	b.n	8008810 <_ux_utility_descriptor_parse+0x94>
    {

        /* Get the length of that component.  */
        switch(*descriptor_structure++)
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	1c5a      	adds	r2, r3, #1
 8008790:	60ba      	str	r2, [r7, #8]
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	2b02      	cmp	r3, #2
 8008796:	d01e      	beq.n	80087d6 <_ux_utility_descriptor_parse+0x5a>
 8008798:	2b04      	cmp	r3, #4
 800879a:	d12f      	bne.n	80087fc <_ux_utility_descriptor_parse+0x80>
        /* Check the size then build the component from the source and
           insert it into the target descriptor.  */
        case 4:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 3u)
 800879c:	e004      	b.n	80087a8 <_ux_utility_descriptor_parse+0x2c>
                *descriptor++ =  0;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	1c5a      	adds	r2, r3, #1
 80087a2:	603a      	str	r2, [r7, #0]
 80087a4:	2200      	movs	r2, #0
 80087a6:	701a      	strb	r2, [r3, #0]
            while((ALIGN_TYPE) descriptor & 3u)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	2203      	movs	r2, #3
 80087ac:	4013      	ands	r3, r2
 80087ae:	d1f6      	bne.n	800879e <_ux_utility_descriptor_parse+0x22>

            /* Save the DW.  */
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	0018      	movs	r0, r3
 80087b4:	f000 f835 	bl	8008822 <_ux_utility_long_get>
 80087b8:	0002      	movs	r2, r0
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	601a      	str	r2, [r3, #0]
            raw_descriptor +=  4;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	3304      	adds	r3, #4
 80087c2:	60fb      	str	r3, [r7, #12]
            descriptor += 4;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	3304      	adds	r3, #4
 80087c8:	603b      	str	r3, [r7, #0]
            break;
 80087ca:	e021      	b.n	8008810 <_ux_utility_descriptor_parse+0x94>

        case 2:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 1u)
                *descriptor++ =  0;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	1c5a      	adds	r2, r3, #1
 80087d0:	603a      	str	r2, [r7, #0]
 80087d2:	2200      	movs	r2, #0
 80087d4:	701a      	strb	r2, [r3, #0]
            while((ALIGN_TYPE) descriptor & 1u)
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	2201      	movs	r2, #1
 80087da:	4013      	ands	r3, r2
 80087dc:	d1f6      	bne.n	80087cc <_ux_utility_descriptor_parse+0x50>

            /* Save the word.  */
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	0018      	movs	r0, r3
 80087e2:	f000 faf1 	bl	8008dc8 <_ux_utility_short_get>
 80087e6:	0003      	movs	r3, r0
 80087e8:	b29a      	uxth	r2, r3
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	801a      	strh	r2, [r3, #0]
            raw_descriptor += 2;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	3302      	adds	r3, #2
 80087f2:	60fb      	str	r3, [r7, #12]
            descriptor += 2;
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	3302      	adds	r3, #2
 80087f8:	603b      	str	r3, [r7, #0]
            break;
 80087fa:	e009      	b.n	8008810 <_ux_utility_descriptor_parse+0x94>

        default:

            /* Save the byte.  */
            *((UCHAR *) descriptor) =  (UCHAR) *raw_descriptor;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	781a      	ldrb	r2, [r3, #0]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	701a      	strb	r2, [r3, #0]
            raw_descriptor++;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	3301      	adds	r3, #1
 8008808:	60fb      	str	r3, [r7, #12]
            descriptor ++;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	3301      	adds	r3, #1
 800880e:	603b      	str	r3, [r7, #0]
    while(descriptor_entries--)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	1e5a      	subs	r2, r3, #1
 8008814:	607a      	str	r2, [r7, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1b8      	bne.n	800878c <_ux_utility_descriptor_parse+0x10>
        }
    }

    /* Return to caller.  */
    return;
 800881a:	46c0      	nop			@ (mov r8, r8)
}
 800881c:	46bd      	mov	sp, r7
 800881e:	b004      	add	sp, #16
 8008820:	bd80      	pop	{r7, pc}

08008822 <_ux_utility_long_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_long_get(UCHAR * address)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b084      	sub	sp, #16
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	1c5a      	adds	r2, r3, #1
 800882e:	607a      	str	r2, [r7, #4]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 8;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	1c5a      	adds	r2, r3, #1
 8008838:	607a      	str	r2, [r7, #4]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	021b      	lsls	r3, r3, #8
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	4313      	orrs	r3, r2
 8008842:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 16;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	1c5a      	adds	r2, r3, #1
 8008848:	607a      	str	r2, [r7, #4]
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	041b      	lsls	r3, r3, #16
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	4313      	orrs	r3, r2
 8008852:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address << 24;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	061b      	lsls	r3, r3, #24
 800885a:	68fa      	ldr	r2, [r7, #12]
 800885c:	4313      	orrs	r3, r2
 800885e:	60fb      	str	r3, [r7, #12]

    /* Return 32-bit value.  */
    return(value);
 8008860:	68fb      	ldr	r3, [r7, #12]
}
 8008862:	0018      	movs	r0, r3
 8008864:	46bd      	mov	sp, r7
 8008866:	b004      	add	sp, #16
 8008868:	bd80      	pop	{r7, pc}
	...

0800886c <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b08e      	sub	sp, #56	@ 0x38
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
#ifdef UX_ENABLE_MEMORY_STATISTICS
UINT                index;
#endif

    /* Get the pool ptr */
    if (memory_cache_flag == UX_REGULAR_MEMORY)
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d104      	bne.n	8008888 <_ux_utility_memory_allocate+0x1c>
    {
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 800887e:	4b6c      	ldr	r3, [pc, #432]	@ (8008a30 <_ux_utility_memory_allocate+0x1c4>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	637b      	str	r3, [r7, #52]	@ 0x34
 8008886:	e009      	b.n	800889c <_ux_utility_memory_allocate+0x30>
    }
    else if (memory_cache_flag == UX_CACHE_SAFE_MEMORY)
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d104      	bne.n	8008898 <_ux_utility_memory_allocate+0x2c>
    {
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE];
 800888e:	4b68      	ldr	r3, [pc, #416]	@ (8008a30 <_ux_utility_memory_allocate+0x1c4>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	637b      	str	r3, [r7, #52]	@ 0x34
 8008896:	e001      	b.n	800889c <_ux_utility_memory_allocate+0x30>
    }
    else
    {
        return(UX_NULL);
 8008898:	2300      	movs	r3, #0
 800889a:	e0c4      	b.n	8008a26 <_ux_utility_memory_allocate+0x1ba>
    }

    /* Check if pool_ptr is NX_NULL */
    if (pool_ptr == UX_NULL)
 800889c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d101      	bne.n	80088a6 <_ux_utility_memory_allocate+0x3a>
    {
        return(UX_NULL);
 80088a2:	2300      	movs	r3, #0
 80088a4:	e0bf      	b.n	8008a26 <_ux_utility_memory_allocate+0x1ba>
    }

    /* Check if the memory size requested is 0.  */
    if (memory_size_requested == 0)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d101      	bne.n	80088b0 <_ux_utility_memory_allocate+0x44>
    {
        return(UX_NULL);
 80088ac:	2300      	movs	r3, #0
 80088ae:	e0ba      	b.n	8008a26 <_ux_utility_memory_allocate+0x1ba>
    }

#else

    /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */
    if (memory_alignment == UX_SAFE_ALIGN)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	3301      	adds	r3, #1
 80088b4:	d101      	bne.n	80088ba <_ux_utility_memory_allocate+0x4e>
        memory_alignment = UX_NO_ALIGN;
 80088b6:	2300      	movs	r3, #0
 80088b8:	60fb      	str	r3, [r7, #12]

#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2b06      	cmp	r3, #6
 80088be:	d801      	bhi.n	80088c4 <_ux_utility_memory_allocate+0x58>
        memory_alignment =  UX_ALIGN_MIN;
 80088c0:	2307      	movs	r3, #7
 80088c2:	60fb      	str	r3, [r7, #12]
       now is that the memory block might not be a size that is a multiple of 8, so we need
       to add the amount of memory required such that the memory buffer after the block has
       the correct alignment. For example, if the memory block has a size of 12, then we need
       to make sure it is placed on an 8-byte alignment that is after a 8-byte alignment so
       that the memory right after the memory block is 8-byte aligned (16).  */
    memory_size_requested =  (memory_size_requested + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	3307      	adds	r3, #7
 80088c8:	2207      	movs	r2, #7
 80088ca:	4393      	bics	r3, r2
 80088cc:	607b      	str	r3, [r7, #4]
    memory_size_requested += (((ULONG)(UX_MEMORY_BLOCK_HEADER_SIZE + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN)) - (ULONG)UX_MEMORY_BLOCK_HEADER_SIZE);

    if (memory_alignment <= UX_ALIGN_MIN)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2b07      	cmp	r3, #7
 80088d2:	d808      	bhi.n	80088e6 <_ux_utility_memory_allocate+0x7a>
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested);
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088d8:	0011      	movs	r1, r2
 80088da:	0018      	movs	r0, r3
 80088dc:	f000 f93c 	bl	8008b58 <_ux_utility_memory_byte_pool_search>
 80088e0:	0003      	movs	r3, r0
 80088e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80088e4:	e009      	b.n	80088fa <_ux_utility_memory_allocate+0x8e>
    else
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested + memory_alignment);
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	18d2      	adds	r2, r2, r3
 80088ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ee:	0011      	movs	r1, r2
 80088f0:	0018      	movs	r0, r3
 80088f2:	f000 f931 	bl	8008b58 <_ux_utility_memory_byte_pool_search>
 80088f6:	0003      	movs	r3, r0
 80088f8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if we found a memory block.  */
    if (current_ptr == UX_NULL)
 80088fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d106      	bne.n	800890e <_ux_utility_memory_allocate+0xa2>
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, memory_size_requested, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 8008900:	2212      	movs	r2, #18
 8008902:	2108      	movs	r1, #8
 8008904:	2002      	movs	r0, #2
 8008906:	f7ff fe65 	bl	80085d4 <_ux_system_error_handler>

        return(UX_NULL);
 800890a:	2300      	movs	r3, #0
 800890c:	e08b      	b.n	8008a26 <_ux_utility_memory_allocate+0x1ba>
    }

    /* Pickup the next block's pointer.  */
    this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800890e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008910:	62bb      	str	r3, [r7, #40]	@ 0x28
    next_ptr =             *this_block_link_ptr;
 8008912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Calculate the number of bytes available in this block.  */
    available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8008918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800891a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 8008920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008922:	3b08      	subs	r3, #8
 8008924:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) (UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE));
 8008926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008928:	3308      	adds	r3, #8
 800892a:	623b      	str	r3, [r7, #32]

    /* In case we are not aligned  */
    if ((int_memory_buffer & memory_alignment) != 0)
 800892c:	6a3b      	ldr	r3, [r7, #32]
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	4013      	ands	r3, r2
 8008932:	d02f      	beq.n	8008994 <_ux_utility_memory_allocate+0x128>
    {

        /* No, we need to align the memory buffer.  */
        int_memory_buffer += (ALIGN_TYPE)UX_MEMORY_BLOCK_HEADER_SIZE;
 8008934:	6a3b      	ldr	r3, [r7, #32]
 8008936:	3308      	adds	r3, #8
 8008938:	623b      	str	r3, [r7, #32]
        int_memory_buffer += memory_alignment;
 800893a:	6a3a      	ldr	r2, [r7, #32]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	18d3      	adds	r3, r2, r3
 8008940:	623b      	str	r3, [r7, #32]
        int_memory_buffer &=  ~((ALIGN_TYPE) memory_alignment);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	43da      	mvns	r2, r3
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	4013      	ands	r3, r2
 800894a:	623b      	str	r3, [r7, #32]
        int_memory_buffer -= (ALIGN_TYPE)UX_MEMORY_BLOCK_HEADER_SIZE;
 800894c:	6a3b      	ldr	r3, [r7, #32]
 800894e:	3b08      	subs	r3, #8
 8008950:	623b      	str	r3, [r7, #32]

        /* Setup the new free block.  */
        next_ptr = (UCHAR *)int_memory_buffer;
 8008952:	6a3b      	ldr	r3, [r7, #32]
 8008954:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Setup the new free block.  */
        next_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8008956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008958:	61fb      	str	r3, [r7, #28]
        *next_block_link_ptr =  *this_block_link_ptr;
 800895a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	601a      	str	r2, [r3, #0]
        work_ptr =              UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8008962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008964:	3304      	adds	r3, #4
 8008966:	61bb      	str	r3, [r7, #24]
        free_ptr =              UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	617b      	str	r3, [r7, #20]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	4a31      	ldr	r2, [pc, #196]	@ (8008a34 <_ux_utility_memory_allocate+0x1c8>)
 8008970:	601a      	str	r2, [r3, #0]

        /* Increase the total fragment counter.  */
        pool_ptr -> ux_byte_pool_fragments++;
 8008972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	1c5a      	adds	r2, r3, #1
 8008978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800897a:	605a      	str	r2, [r3, #4]

        /* Update the current pointer to point at the newly created block.  */
        *this_block_link_ptr =  next_ptr;
 800897c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800897e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008980:	601a      	str	r2, [r3, #0]

        /* Calculate the available bytes.  */
        available_bytes -=  UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8008982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	001a      	movs	r2, r3
 800898a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898c:	1a9b      	subs	r3, r3, r2
 800898e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Set Current pointer to the aligned memory buffer.  */
        current_ptr = next_ptr;
 8008990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008992:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Now we are aligned, determine if we need to split this block.  */
    if ((available_bytes - memory_size_requested) >= ((ULONG) UX_BYTE_BLOCK_MIN))
 8008994:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	2b13      	cmp	r3, #19
 800899c:	d91e      	bls.n	80089dc <_ux_utility_memory_allocate+0x170>
    {

        /* Split the block.  */
        next_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (memory_size_requested + UX_MEMORY_BLOCK_HEADER_SIZE));
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	3308      	adds	r3, #8
 80089a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089a4:	18d3      	adds	r3, r2, r3
 80089a6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Setup the new free block.  */
        next_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80089a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089aa:	61fb      	str	r3, [r7, #28]
        this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80089ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ae:	62bb      	str	r3, [r7, #40]	@ 0x28
        *next_block_link_ptr =  *this_block_link_ptr;
 80089b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	601a      	str	r2, [r3, #0]
        work_ptr =              UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80089b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ba:	3304      	adds	r3, #4
 80089bc:	61bb      	str	r3, [r7, #24]
        free_ptr =              UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	617b      	str	r3, [r7, #20]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	4a1b      	ldr	r2, [pc, #108]	@ (8008a34 <_ux_utility_memory_allocate+0x1c8>)
 80089c6:	601a      	str	r2, [r3, #0]

        /* Increase the total fragment counter.  */
        pool_ptr -> ux_byte_pool_fragments++;
 80089c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	1c5a      	adds	r2, r3, #1
 80089ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089d0:	605a      	str	r2, [r3, #4]

        /* Update the current pointer to point at the newly created block.  */
        *this_block_link_ptr =  next_ptr;
 80089d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089d6:	601a      	str	r2, [r3, #0]

        /* Set available equal to memory size for subsequent calculation.  */
        available_bytes =  memory_size_requested;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    /* In any case, mark the current block as allocated.  */
    work_ptr =              UX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 80089dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089de:	3304      	adds	r3, #4
 80089e0:	61bb      	str	r3, [r7, #24]
    this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    *this_block_link_ptr =  UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80089e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089ea:	601a      	str	r2, [r3, #0]

    /* Reduce the number of available bytes in the pool.  */
    pool_ptr -> ux_byte_pool_available =  pool_ptr -> ux_byte_pool_available - (available_bytes + UX_MEMORY_BLOCK_HEADER_SIZE);
 80089ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	3b08      	subs	r3, #8
 80089f6:	001a      	movs	r2, r3
 80089f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089fa:	601a      	str	r2, [r3, #0]

    /* Determine if the search pointer needs to be updated. This is only done
        if the search pointer matches the block to be returned.  */
    if (current_ptr == pool_ptr -> ux_byte_pool_search)
 80089fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d105      	bne.n	8008a12 <_ux_utility_memory_allocate+0x1a6>
    {

        /* Yes, update the search pointer to the next block.  */
        this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8008a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a08:	62bb      	str	r3, [r7, #40]	@ 0x28
        pool_ptr -> ux_byte_pool_search =  *this_block_link_ptr;
 8008a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a10:	609a      	str	r2, [r3, #8]
    }

    /* Adjust the pointer for the application.  */
    work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 8008a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a14:	3308      	adds	r3, #8
 8008a16:	61bb      	str	r3, [r7, #24]

    /* Clear the memory block.  */
    _ux_utility_memory_set(work_ptr, 0, available_bytes); /* Use case of memset is verified. */
 8008a18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	0018      	movs	r0, r3
 8008a20:	f000 f9b6 	bl	8008d90 <_ux_utility_memory_set>
#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

    return(work_ptr);
 8008a24:	69bb      	ldr	r3, [r7, #24]
}
 8008a26:	0018      	movs	r0, r3
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	b00e      	add	sp, #56	@ 0x38
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	46c0      	nop			@ (mov r8, r8)
 8008a30:	2000159c 	.word	0x2000159c
 8008a34:	ffffeeee 	.word	0xffffeeee

08008a38 <_ux_utility_memory_allocate_mulc_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align,ULONG cache,ULONG size_mul_v,ULONG size_mul_c)
{
 8008a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	607a      	str	r2, [r7, #4]
 8008a44:	603b      	str	r3, [r7, #0]
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d024      	beq.n	8008a96 <_ux_utility_memory_allocate_mulc_safe+0x5e>
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	0c19      	lsrs	r1, r3, #16
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	1c1e      	adds	r6, r3, #0
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	0c1b      	lsrs	r3, r3, #16
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	1c15      	adds	r5, r2, #0
 8008a5e:	b28a      	uxth	r2, r1
 8008a60:	2a00      	cmp	r2, #0
 8008a62:	d105      	bne.n	8008a70 <_ux_utility_memory_allocate_mulc_safe+0x38>
 8008a64:	b29a      	uxth	r2, r3
 8008a66:	2a00      	cmp	r2, #0
 8008a68:	d013      	beq.n	8008a92 <_ux_utility_memory_allocate_mulc_safe+0x5a>
 8008a6a:	1c19      	adds	r1, r3, #0
 8008a6c:	1c34      	adds	r4, r6, #0
 8008a6e:	e003      	b.n	8008a78 <_ux_utility_memory_allocate_mulc_safe+0x40>
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d10c      	bne.n	8008a90 <_ux_utility_memory_allocate_mulc_safe+0x58>
 8008a76:	1c2c      	adds	r4, r5, #0
 8008a78:	b2b3      	uxth	r3, r6
 8008a7a:	b2aa      	uxth	r2, r5
 8008a7c:	435a      	muls	r2, r3
 8008a7e:	b2a3      	uxth	r3, r4
 8008a80:	b289      	uxth	r1, r1
 8008a82:	434b      	muls	r3, r1
 8008a84:	0c12      	lsrs	r2, r2, #16
 8008a86:	189b      	adds	r3, r3, r2
 8008a88:	141b      	asrs	r3, r3, #16
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d000      	beq.n	8008a92 <_ux_utility_memory_allocate_mulc_safe+0x5a>
 8008a90:	2001      	movs	r0, #1
 8008a92:	1e03      	subs	r3, r0, #0
 8008a94:	d109      	bne.n	8008aaa <_ux_utility_memory_allocate_mulc_safe+0x72>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	683a      	ldr	r2, [r7, #0]
 8008a9a:	435a      	muls	r2, r3
 8008a9c:	68b9      	ldr	r1, [r7, #8]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	0018      	movs	r0, r3
 8008aa2:	f7ff fee3 	bl	800886c <_ux_utility_memory_allocate>
 8008aa6:	0003      	movs	r3, r0
 8008aa8:	e000      	b.n	8008aac <_ux_utility_memory_allocate_mulc_safe+0x74>
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	0018      	movs	r0, r3
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	b005      	add	sp, #20
 8008ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ab4 <_ux_utility_memory_byte_pool_create>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_memory_byte_pool_create(UX_MEMORY_BYTE_POOL *pool_ptr, VOID *pool_start, ULONG pool_size)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b088      	sub	sp, #32
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
UCHAR               *temp_ptr;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    _ux_utility_memory_set((UCHAR *)pool_ptr, 0, sizeof(UX_MEMORY_BYTE_POOL)); /* Use case of memset is verified. */
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2214      	movs	r2, #20
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	0018      	movs	r0, r3
 8008ac8:	f000 f962 	bl	8008d90 <_ux_utility_memory_set>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2203      	movs	r2, #3
 8008ad0:	4393      	bics	r3, r2
 8008ad2:	607b      	str	r3, [r7, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> ux_byte_pool_start =   UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	60da      	str	r2, [r3, #12]
    pool_ptr -> ux_byte_pool_size =    pool_size;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	611a      	str	r2, [r3, #16]
    pool_ptr -> ux_byte_pool_search =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	609a      	str	r2, [r3, #8]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> ux_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	3b08      	subs	r3, #8
 8008aea:	001a      	movs	r2, r3
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	601a      	str	r2, [r3, #0]
    pool_ptr -> ux_byte_pool_fragments =   ((UINT) 2);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2202      	movs	r2, #2
 8008af4:	605a      	str	r2, [r3, #4]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant UX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	61fb      	str	r3, [r7, #28]
    block_ptr =  UX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8008afa:	69fa      	ldr	r2, [r7, #28]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	18d3      	adds	r3, r2, r3
 8008b00:	61fb      	str	r3, [r7, #28]

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  UX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	3b04      	subs	r3, #4
 8008b06:	61fb      	str	r3, [r7, #28]

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	61bb      	str	r3, [r7, #24]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  temp_ptr;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	69ba      	ldr	r2, [r7, #24]
 8008b14:	601a      	str	r2, [r3, #0]

    block_ptr =            UX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	3b04      	subs	r3, #4
 8008b1a:	61fb      	str	r3, [r7, #28]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	61bb      	str	r3, [r7, #24]
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	617b      	str	r3, [r7, #20]
    *block_indirect_ptr =  block_ptr;
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	69fa      	ldr	r2, [r7, #28]
 8008b32:	601a      	str	r2, [r3, #0]
    block_ptr =            UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	61fb      	str	r3, [r7, #28]
    block_ptr =            UX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	3304      	adds	r3, #4
 8008b3c:	61fb      	str	r3, [r7, #28]
    free_ptr =             UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	613b      	str	r3, [r7, #16]
    *free_ptr =            UX_BYTE_BLOCK_FREE;
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	4a03      	ldr	r2, [pc, #12]	@ (8008b54 <_ux_utility_memory_byte_pool_create+0xa0>)
 8008b46:	601a      	str	r2, [r3, #0]

    /* Return UX_SUCCESS.  */
    return(UX_SUCCESS);
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	0018      	movs	r0, r3
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	b008      	add	sp, #32
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	46c0      	nop			@ (mov r8, r8)
 8008b54:	ffffeeee 	.word	0xffffeeee

08008b58 <_ux_utility_memory_byte_pool_search>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UCHAR  *_ux_utility_memory_byte_pool_search(UX_MEMORY_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b08c      	sub	sp, #48	@ 0x30
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
UCHAR               *next_ptr;
UCHAR               **this_block_link_ptr;
UCHAR               **next_block_link_ptr;
ULONG               available_bytes;
UINT                examine_blocks;
UINT                first_free_block_found =  UX_FALSE;
 8008b62:	2300      	movs	r3, #0
 8008b64:	623b      	str	r3, [r7, #32]
UCHAR               *work_ptr;
ULONG               total_theoretical_available;

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> ux_byte_pool_available + ((pool_ptr -> ux_byte_pool_fragments - 2) * UX_MEMORY_BLOCK_HEADER_SIZE);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	3b02      	subs	r3, #2
 8008b70:	00db      	lsls	r3, r3, #3
 8008b72:	18d3      	adds	r3, r2, r3
 8008b74:	61fb      	str	r3, [r7, #28]
    if (memory_size >= total_theoretical_available)
 8008b76:	683a      	ldr	r2, [r7, #0]
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d301      	bcc.n	8008b82 <_ux_utility_memory_byte_pool_search+0x2a>
    {

        /* Not enough memory, return a NULL pointer.  */
        return(UX_NULL);
 8008b7e:	2300      	movs	r3, #0
 8008b80:	e07d      	b.n	8008c7e <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Check if the search pointer is valid.  */
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	689a      	ldr	r2, [r3, #8]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d308      	bcc.n	8008ba0 <_ux_utility_memory_byte_pool_search+0x48>
        (pool_ptr -> ux_byte_pool_search > pool_ptr -> ux_byte_pool_start + pool_ptr -> ux_byte_pool_size))
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	689a      	ldr	r2, [r3, #8]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	68d9      	ldr	r1, [r3, #12]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	18cb      	adds	r3, r1, r3
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d901      	bls.n	8008ba4 <_ux_utility_memory_byte_pool_search+0x4c>
    {

        /* Return a NULL pointer.  */
        return(UX_NULL);
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	e06c      	b.n	8008c7e <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Walk through the memory pool in search for a large enough block.  */
    current_ptr =      pool_ptr -> ux_byte_pool_search;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    examine_blocks =   pool_ptr -> ux_byte_pool_fragments + ((UINT) 1);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    available_bytes =  ((ULONG) 0);
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    do
    {
        /* Check to see if this block is free.  */
        work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8008bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb8:	3304      	adds	r3, #4
 8008bba:	61bb      	str	r3, [r7, #24]
        free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	617b      	str	r3, [r7, #20]
        if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a30      	ldr	r2, [pc, #192]	@ (8008c88 <_ux_utility_memory_byte_pool_search+0x130>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d143      	bne.n	8008c52 <_ux_utility_memory_byte_pool_search+0xfa>
        {

            /* Determine if this is the first free block.  */
            if (first_free_block_found == UX_FALSE)
 8008bca:	6a3b      	ldr	r3, [r7, #32]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d104      	bne.n	8008bda <_ux_utility_memory_byte_pool_search+0x82>
            {
                /* This is the first free block.  */
                pool_ptr->ux_byte_pool_search =  current_ptr;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008bd4:	609a      	str	r2, [r3, #8]

                /* Set the flag to indicate we have found the first free
                    block.  */
                first_free_block_found =  UX_TRUE;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	623b      	str	r3, [r7, #32]
            }

            /* Block is free, see if it is large enough.  */

            /* Pickup the next block's pointer.  */
            this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8008bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bdc:	613b      	str	r3, [r7, #16]
            next_ptr =             *this_block_link_ptr;
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	60fb      	str	r3, [r7, #12]

            /* Calculate the number of bytes available in this block.  */
            available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	62bb      	str	r3, [r7, #40]	@ 0x28
            available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 8008bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bee:	3b08      	subs	r3, #8
 8008bf0:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* If this is large enough, we are done because our first-fit algorithm
                has been satisfied!  */
            if (available_bytes >= memory_size)
 8008bf2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d23a      	bcs.n	8008c70 <_ux_utility_memory_byte_pool_search+0x118>
            }
            else
            {

                /* Clear the available bytes variable.  */
                available_bytes =  ((ULONG) 0);
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Not enough memory, check to see if the neighbor is
                    free and can be merged.  */
                work_ptr =  UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	3304      	adds	r3, #4
 8008c02:	61bb      	str	r3, [r7, #24]
                free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	617b      	str	r3, [r7, #20]
                if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a1e      	ldr	r2, [pc, #120]	@ (8008c88 <_ux_utility_memory_byte_pool_search+0x130>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d113      	bne.n	8008c3a <_ux_utility_memory_byte_pool_search+0xe2>
                {

                    /* Yes, neighbor block can be merged!  This is quickly accomplished
                        by updating the current block with the next blocks pointer.  */
                    next_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	60bb      	str	r3, [r7, #8]
                    *this_block_link_ptr =  *next_block_link_ptr;
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	601a      	str	r2, [r3, #0]

                    /* Reduce the fragment total.  We don't need to increase the bytes
                        available because all free headers are also included in the available
                        count.  */
                    pool_ptr -> ux_byte_pool_fragments--;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	1e5a      	subs	r2, r3, #1
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	605a      	str	r2, [r3, #4]

                    /* See if the search pointer is affected.  */
                    if (pool_ptr -> ux_byte_pool_search ==  next_ptr)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d114      	bne.n	8008c5c <_ux_utility_memory_byte_pool_search+0x104>
                    {
                        /* Yes, update the search pointer.   */
                        pool_ptr -> ux_byte_pool_search =  current_ptr;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c36:	609a      	str	r2, [r3, #8]
 8008c38:	e010      	b.n	8008c5c <_ux_utility_memory_byte_pool_search+0x104>
                    }
                }
                else
                {
                    /* Neighbor is not free so we can skip over it!  */
                    next_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	60bb      	str	r3, [r7, #8]
                    current_ptr =  *next_block_link_ptr;
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* Decrement the examined block count to account for this one.  */
                    if (examine_blocks != ((UINT) 0))
 8008c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d008      	beq.n	8008c5c <_ux_utility_memory_byte_pool_search+0x104>
                    {
                        examine_blocks--;
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c50:	e004      	b.n	8008c5c <_ux_utility_memory_byte_pool_search+0x104>
        }
        else
        {

            /* Block is not free, move to next block.  */
            this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8008c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c54:	613b      	str	r3, [r7, #16]
            current_ptr =  *this_block_link_ptr;
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        /* Another block has been searched... decrement counter.  */
        if (examine_blocks != ((UINT) 0))
 8008c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d002      	beq.n	8008c68 <_ux_utility_memory_byte_pool_search+0x110>
        {

            examine_blocks--;
 8008c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c64:	3b01      	subs	r3, #1
 8008c66:	627b      	str	r3, [r7, #36]	@ 0x24
        }

    } while(examine_blocks != ((UINT) 0));
 8008c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1a3      	bne.n	8008bb6 <_ux_utility_memory_byte_pool_search+0x5e>
 8008c6e:	e000      	b.n	8008c72 <_ux_utility_memory_byte_pool_search+0x11a>
                break;
 8008c70:	46c0      	nop			@ (mov r8, r8)

    /* If a block was found, just return. */
    if (available_bytes == ((ULONG) 0))
 8008c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d101      	bne.n	8008c7c <_ux_utility_memory_byte_pool_search+0x124>
    {
        return(UX_NULL);
 8008c78:	2300      	movs	r3, #0
 8008c7a:	e000      	b.n	8008c7e <_ux_utility_memory_byte_pool_search+0x126>
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8008c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008c7e:	0018      	movs	r0, r3
 8008c80:	46bd      	mov	sp, r7
 8008c82:	b00c      	add	sp, #48	@ 0x30
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	46c0      	nop			@ (mov r8, r8)
 8008c88:	ffffeeee 	.word	0xffffeeee

08008c8c <_ux_utility_memory_copy>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_copy(VOID *memory_destination, VOID *memory_source, ULONG length)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b086      	sub	sp, #24
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]

UCHAR *   source;
UCHAR *   destination;

    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	617b      	str	r3, [r7, #20]
    destination =  (UCHAR *) memory_destination;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	613b      	str	r3, [r7, #16]

    /* Loop to perform the copy.  */
    while(length--)
 8008ca0:	e007      	b.n	8008cb2 <_ux_utility_memory_copy+0x26>
    {

        /* Copy one byte.  */
        *destination++ =  *source++;
 8008ca2:	697a      	ldr	r2, [r7, #20]
 8008ca4:	1c53      	adds	r3, r2, #1
 8008ca6:	617b      	str	r3, [r7, #20]
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	1c59      	adds	r1, r3, #1
 8008cac:	6139      	str	r1, [r7, #16]
 8008cae:	7812      	ldrb	r2, [r2, #0]
 8008cb0:	701a      	strb	r2, [r3, #0]
    while(length--)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	1e5a      	subs	r2, r3, #1
 8008cb6:	607a      	str	r2, [r7, #4]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1f2      	bne.n	8008ca2 <_ux_utility_memory_copy+0x16>
    }

    /* Return to caller.  */
    return; 
 8008cbc:	46c0      	nop			@ (mov r8, r8)
}
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	b006      	add	sp, #24
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <_ux_utility_memory_free>:
/*                                            refined memory management,  */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b08a      	sub	sp, #40	@ 0x28
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
        return;
    }
#endif

    /* Set the pool pointer to NULL.  */
    pool_ptr =  UX_NULL;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Determine if the memory pointer is valid.  */
    work_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(memory);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	623b      	str	r3, [r7, #32]
    if (work_ptr != UX_NULL)
 8008cd4:	6a3b      	ldr	r3, [r7, #32]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d02f      	beq.n	8008d3a <_ux_utility_memory_free+0x76>
    {

        /* Back off the memory pointer to pickup its header.  */
        work_ptr =  UX_UCHAR_POINTER_SUB(work_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 8008cda:	6a3b      	ldr	r3, [r7, #32]
 8008cdc:	3b08      	subs	r3, #8
 8008cde:	623b      	str	r3, [r7, #32]

        /* There is a pointer, pickup the pool pointer address.  */
        temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 8008ce0:	6a3b      	ldr	r3, [r7, #32]
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	61fb      	str	r3, [r7, #28]
        free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	61bb      	str	r3, [r7, #24]
        if ((*free_ptr) != UX_BYTE_BLOCK_FREE)
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a26      	ldr	r2, [pc, #152]	@ (8008d88 <_ux_utility_memory_free+0xc4>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d01c      	beq.n	8008d2e <_ux_utility_memory_free+0x6a>
        {

            /* Pickup the pool pointer.  */
            temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 8008cf4:	6a3b      	ldr	r3, [r7, #32]
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	61fb      	str	r3, [r7, #28]
            byte_pool_ptr = UX_UCHAR_TO_INDIRECT_BYTE_POOL_POINTER(temp_ptr);
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	617b      	str	r3, [r7, #20]
            pool_ptr = *byte_pool_ptr;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	627b      	str	r3, [r7, #36]	@ 0x24

            /* See if we have a valid pool pointer.  */
            if ((pool_ptr == UX_NULL) ||
 8008d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00b      	beq.n	8008d22 <_ux_utility_memory_free+0x5e>
                ((pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR]) &&
 8008d0a:	4b20      	ldr	r3, [pc, #128]	@ (8008d8c <_ux_utility_memory_free+0xc8>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
            if ((pool_ptr == UX_NULL) ||
 8008d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d017      	beq.n	8008d46 <_ux_utility_memory_free+0x82>
                (pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE])))
 8008d16:	4b1d      	ldr	r3, [pc, #116]	@ (8008d8c <_ux_utility_memory_free+0xc8>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	685b      	ldr	r3, [r3, #4]
                ((pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR]) &&
 8008d1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d011      	beq.n	8008d46 <_ux_utility_memory_free+0x82>

                /* Release the protection.  */
                _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

                /* Error trap: maybe double free/memory issue here!  */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 8008d22:	2219      	movs	r2, #25
 8008d24:	2108      	movs	r1, #8
 8008d26:	2002      	movs	r0, #2
 8008d28:	f7ff fc54 	bl	80085d4 <_ux_system_error_handler>
                                         UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);

                /* Return to caller.  */
                return;
 8008d2c:	e029      	b.n	8008d82 <_ux_utility_memory_free+0xbe>
        {
            /* Release the protection.  */
            _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

            /* Error trap: maybe double free/memory issue here!  */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 8008d2e:	2219      	movs	r2, #25
 8008d30:	2108      	movs	r1, #8
 8008d32:	2002      	movs	r0, #2
 8008d34:	f7ff fc4e 	bl	80085d4 <_ux_system_error_handler>
                                     UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);

            /* Return to caller.  */
            return;
 8008d38:	e023      	b.n	8008d82 <_ux_utility_memory_free+0xbe>

        /* Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

        /* Error trap: maybe double free/bad flow here!  */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 8008d3a:	2219      	movs	r2, #25
 8008d3c:	2108      	movs	r1, #8
 8008d3e:	2002      	movs	r0, #2
 8008d40:	f7ff fc48 	bl	80085d4 <_ux_system_error_handler>
                                    UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);

        /* Return to caller.  */
        return;
 8008d44:	e01d      	b.n	8008d82 <_ux_utility_memory_free+0xbe>
    }

    /* At this point, we know that the pool pointer is valid.  */

    /* Release the memory.  */
    temp_ptr =   UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
 8008d46:	6a3b      	ldr	r3, [r7, #32]
 8008d48:	3304      	adds	r3, #4
 8008d4a:	61fb      	str	r3, [r7, #28]
    free_ptr =   UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	61bb      	str	r3, [r7, #24]
    *free_ptr =  UX_BYTE_BLOCK_FREE;
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	4a0d      	ldr	r2, [pc, #52]	@ (8008d88 <_ux_utility_memory_free+0xc4>)
 8008d54:	601a      	str	r2, [r3, #0]

    /* Update the number of available bytes in the pool.  */
    block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8008d56:	6a3b      	ldr	r3, [r7, #32]
 8008d58:	613b      	str	r3, [r7, #16]
    next_block_ptr =  *block_link_ptr;
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	60fb      	str	r3, [r7, #12]
    pool_ptr -> ux_byte_pool_available =
        pool_ptr -> ux_byte_pool_available + UX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 8008d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68f9      	ldr	r1, [r7, #12]
 8008d66:	6a3a      	ldr	r2, [r7, #32]
 8008d68:	1a8a      	subs	r2, r1, r2
 8008d6a:	189a      	adds	r2, r3, r2
    pool_ptr -> ux_byte_pool_available =
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6e:	601a      	str	r2, [r3, #0]

    /* Determine if the free block is prior to current search pointer.  */
    if (work_ptr < (pool_ptr -> ux_byte_pool_search))
 8008d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	6a3a      	ldr	r2, [r7, #32]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d202      	bcs.n	8008d80 <_ux_utility_memory_free+0xbc>
    {

        /* Yes, update the search pointer to the released block.  */
        pool_ptr -> ux_byte_pool_search =  work_ptr;
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7c:	6a3a      	ldr	r2, [r7, #32]
 8008d7e:	609a      	str	r2, [r3, #8]

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

    /* Return to caller.  */
    return;
 8008d80:	46c0      	nop			@ (mov r8, r8)
}
 8008d82:	46bd      	mov	sp, r7
 8008d84:	b00a      	add	sp, #40	@ 0x28
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	ffffeeee 	.word	0xffffeeee
 8008d8c:	2000159c 	.word	0x2000159c

08008d90 <_ux_utility_memory_set>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_set(VOID *destination, UCHAR value, ULONG length)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b086      	sub	sp, #24
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	607a      	str	r2, [r7, #4]
 8008d9a:	230b      	movs	r3, #11
 8008d9c:	18fb      	adds	r3, r7, r3
 8008d9e:	1c0a      	adds	r2, r1, #0
 8008da0:	701a      	strb	r2, [r3, #0]

UCHAR *    work_ptr;


    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	617b      	str	r3, [r7, #20]

    /* Loop to set the memory.  */
    while(length--)
 8008da6:	e006      	b.n	8008db6 <_ux_utility_memory_set+0x26>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	1c5a      	adds	r2, r3, #1
 8008dac:	617a      	str	r2, [r7, #20]
 8008dae:	220b      	movs	r2, #11
 8008db0:	18ba      	adds	r2, r7, r2
 8008db2:	7812      	ldrb	r2, [r2, #0]
 8008db4:	701a      	strb	r2, [r3, #0]
    while(length--)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	1e5a      	subs	r2, r3, #1
 8008dba:	607a      	str	r2, [r7, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1f3      	bne.n	8008da8 <_ux_utility_memory_set+0x18>
    }

    /* Return to caller.  */
    return; 
 8008dc0:	46c0      	nop			@ (mov r8, r8)
}
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	b006      	add	sp, #24
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <_ux_utility_short_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_short_get(UCHAR * address)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
USHORT   value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	1c5a      	adds	r2, r3, #1
 8008dd4:	607a      	str	r2, [r7, #4]
 8008dd6:	781a      	ldrb	r2, [r3, #0]
 8008dd8:	200e      	movs	r0, #14
 8008dda:	183b      	adds	r3, r7, r0
 8008ddc:	801a      	strh	r2, [r3, #0]
    value |=  (USHORT)(*address << 8);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	021b      	lsls	r3, r3, #8
 8008de4:	b299      	uxth	r1, r3
 8008de6:	183b      	adds	r3, r7, r0
 8008de8:	183a      	adds	r2, r7, r0
 8008dea:	8812      	ldrh	r2, [r2, #0]
 8008dec:	430a      	orrs	r2, r1
 8008dee:	801a      	strh	r2, [r3, #0]

    /* Return to caller.  */
    return((ULONG) value);
 8008df0:	183b      	adds	r3, r7, r0
 8008df2:	881b      	ldrh	r3, [r3, #0]
}
 8008df4:	0018      	movs	r0, r3
 8008df6:	46bd      	mov	sp, r7
 8008df8:	b004      	add	sp, #16
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <_ux_utility_string_length_check>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_string_length_check(UCHAR *string, UINT *string_length_ptr, UINT max_string_length)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]

UINT    string_length;


    if (string == UX_NULL)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d101      	bne.n	8008e12 <_ux_utility_string_length_check+0x16>
        return(UX_ERROR);
 8008e0e:	23ff      	movs	r3, #255	@ 0xff
 8008e10:	e01d      	b.n	8008e4e <_ux_utility_string_length_check+0x52>

    string_length = 0;
 8008e12:	2300      	movs	r3, #0
 8008e14:	617b      	str	r3, [r7, #20]

    while (1)
    {

        if (string[string_length] == '\0')
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	18d3      	adds	r3, r2, r3
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00d      	beq.n	8008e3e <_ux_utility_string_length_check+0x42>
            break;

        string_length++;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	3301      	adds	r3, #1
 8008e26:	617b      	str	r3, [r7, #20]
        if (string_length > max_string_length)
 8008e28:	697a      	ldr	r2, [r7, #20]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d9f2      	bls.n	8008e16 <_ux_utility_string_length_check+0x1a>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 8008e30:	22ff      	movs	r2, #255	@ 0xff
 8008e32:	2108      	movs	r1, #8
 8008e34:	2002      	movs	r0, #2
 8008e36:	f7ff fbcd 	bl	80085d4 <_ux_system_error_handler>

            return(UX_ERROR);
 8008e3a:	23ff      	movs	r3, #255	@ 0xff
 8008e3c:	e007      	b.n	8008e4e <_ux_utility_string_length_check+0x52>
            break;
 8008e3e:	46c0      	nop			@ (mov r8, r8)
        }
    }

    if (string_length_ptr)
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d002      	beq.n	8008e4c <_ux_utility_string_length_check+0x50>
        *string_length_ptr = string_length;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	697a      	ldr	r2, [r7, #20]
 8008e4a:	601a      	str	r2, [r3, #0]

    return(UX_SUCCESS); 
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	0018      	movs	r0, r3
 8008e50:	46bd      	mov	sp, r7
 8008e52:	b006      	add	sp, #24
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <_ux_device_class_hid_activate>:
/*                                            endpoint buffer in classes, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b088      	sub	sp, #32
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]

UX_SLAVE_INTERFACE                      *interface_ptr;
UX_SLAVE_CLASS                          *class_ptr;
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_ENDPOINT                       *endpoint_interrupt;
UX_SLAVE_ENDPOINT                       *endpoint_in = UX_NULL;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	61bb      	str	r3, [r7, #24]
UX_SLAVE_ENDPOINT                       *endpoint_out = UX_NULL;
UCHAR                                   *pos;
#endif

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a1b      	ldr	r3, [r3, #32]
 8008e66:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e6c:	613b      	str	r3, [r7, #16]

    /* Get the interface that owns this instance.  */
    interface_ptr =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	60fb      	str	r3, [r7, #12]

    /* Store the class instance into the interface.  */
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)hid;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	693a      	ldr	r2, [r7, #16]
 8008e78:	609a      	str	r2, [r3, #8]

    /* Now the opposite, store the interface in the class instance.  */
    hid -> ux_slave_class_hid_interface =  interface_ptr;
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	601a      	str	r2, [r3, #0]

    /* Locate the endpoints.  */
    endpoint_interrupt =  interface_ptr -> ux_slave_interface_first_endpoint;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	69db      	ldr	r3, [r3, #28]
 8008e84:	61fb      	str	r3, [r7, #28]

    /* Check if interrupt IN endpoint exists.  */
    while (endpoint_interrupt != UX_NULL)
 8008e86:	e011      	b.n	8008eac <_ux_device_class_hid_activate+0x56>
    {
        if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bmAttributes &
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	7bdb      	ldrb	r3, [r3, #15]
 8008e8c:	001a      	movs	r2, r3
 8008e8e:	2303      	movs	r3, #3
 8008e90:	4013      	ands	r3, r2
 8008e92:	2b03      	cmp	r3, #3
 8008e94:	d107      	bne.n	8008ea6 <_ux_device_class_hid_activate+0x50>
             UX_MASK_ENDPOINT_TYPE) == UX_INTERRUPT_ENDPOINT)
        {
            if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bEndpointAddress &
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	7b9b      	ldrb	r3, [r3, #14]
                 UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 8008e9a:	b25b      	sxtb	r3, r3
            if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bEndpointAddress &
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	da02      	bge.n	8008ea6 <_ux_device_class_hid_activate+0x50>
            {

                /* It's interrupt IN endpoint we need.  */
                endpoint_in = endpoint_interrupt;
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	61bb      	str	r3, [r7, #24]
#endif

#if defined(UX_DEVICE_CLASS_HID_INTERRUPT_OUT_SUPPORT)
                if (endpoint_out != UX_NULL)
#endif
                    break;
 8008ea4:	e005      	b.n	8008eb2 <_ux_device_class_hid_activate+0x5c>
            }
#endif
        }

        /* Try next endpoint.  */
        endpoint_interrupt =  endpoint_interrupt -> ux_slave_endpoint_next_endpoint;
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	695b      	ldr	r3, [r3, #20]
 8008eaa:	61fb      	str	r3, [r7, #28]
    while (endpoint_interrupt != UX_NULL)
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1ea      	bne.n	8008e88 <_ux_device_class_hid_activate+0x32>
    }

    /* Check if we found right endpoint.  */
    if (endpoint_in == UX_NULL)
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d101      	bne.n	8008ebc <_ux_device_class_hid_activate+0x66>
        return (UX_ERROR);
 8008eb8:	23ff      	movs	r3, #255	@ 0xff
 8008eba:	e01d      	b.n	8008ef8 <_ux_device_class_hid_activate+0xa2>
    UX_ASSERT(UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH >=
              endpoint_in -> ux_slave_endpoint_transfer_request.
                            ux_slave_transfer_request_transfer_length);

    /* Default HID protocol is report protocol.  */
    hid -> ux_device_class_hid_protocol = UX_DEVICE_CLASS_HID_PROTOCOL_REPORT;
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Save the endpoints in the hid instance.  */
    hid -> ux_device_class_hid_interrupt_endpoint         = endpoint_in;
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	69ba      	ldr	r2, [r7, #24]
 8008ec6:	605a      	str	r2, [r3, #4]
    /* Resume thread.  */
    _ux_device_thread_resume(&class_ptr -> ux_slave_class_thread);
#else

    /* Reset event buffered for background transfer.  */
    _ux_utility_memory_set((VOID *)&hid -> ux_device_class_hid_event, 0,
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	3330      	adds	r3, #48	@ 0x30
 8008ecc:	2210      	movs	r2, #16
 8008ece:	2100      	movs	r1, #0
 8008ed0:	0018      	movs	r0, r3
 8008ed2:	f7ff ff5d 	bl	8008d90 <_ux_utility_memory_set>
                                            sizeof(UX_DEVICE_CLASS_HID_EVENT)); /* Use case of memset is verified. */
    hid -> ux_device_class_hid_event.ux_device_class_hid_event_length =
                    endpoint_in -> ux_slave_endpoint_transfer_request.
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    hid -> ux_device_class_hid_event.ux_device_class_hid_event_length =
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	639a      	str	r2, [r3, #56]	@ 0x38
                                    ux_slave_transfer_request_transfer_length;

    /* Reset event sending state.  */
    hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif


    /* If there is a activate function call it.  */
    if (hid -> ux_slave_class_hid_instance_activate != UX_NULL)
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d004      	beq.n	8008ef6 <_ux_device_class_hid_activate+0xa0>
    {

        /* Invoke the application.  */
        hid -> ux_slave_class_hid_instance_activate(hid);
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	695b      	ldr	r3, [r3, #20]
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	0010      	movs	r0, r2
 8008ef4:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, hid, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	0018      	movs	r0, r3
 8008efa:	46bd      	mov	sp, r7
 8008efc:	b008      	add	sp, #32
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <_ux_device_class_hid_control_request>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b08c      	sub	sp, #48	@ 0x30
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
ULONG                       descriptor_type;
UCHAR                       duration;
UX_SLAVE_CLASS_HID          *hid;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8008f08:	4b5a      	ldr	r3, [pc, #360]	@ (8009074 <_ux_device_class_hid_control_request+0x174>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	3324      	adds	r3, #36	@ 0x24
 8008f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 8008f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f12:	3338      	adds	r3, #56	@ 0x38
 8008f14:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8008f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f18:	223d      	movs	r2, #61	@ 0x3d
 8008f1a:	5c9b      	ldrb	r3, [r3, r2]
 8008f1c:	627b      	str	r3, [r7, #36]	@ 0x24
    request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8008f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f20:	333c      	adds	r3, #60	@ 0x3c
 8008f22:	3302      	adds	r3, #2
 8008f24:	0018      	movs	r0, r3
 8008f26:	f7ff ff4f 	bl	8008dc8 <_ux_utility_short_get>
 8008f2a:	0003      	movs	r3, r0
 8008f2c:	623b      	str	r3, [r7, #32]
    request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 8008f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f30:	333c      	adds	r3, #60	@ 0x3c
 8008f32:	3304      	adds	r3, #4
 8008f34:	0018      	movs	r0, r3
 8008f36:	f7ff ff47 	bl	8008dc8 <_ux_utility_short_get>
 8008f3a:	0003      	movs	r3, r0
 8008f3c:	61fb      	str	r3, [r7, #28]
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 8008f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f40:	333c      	adds	r3, #60	@ 0x3c
 8008f42:	3306      	adds	r3, #6
 8008f44:	0018      	movs	r0, r3
 8008f46:	f7ff ff3f 	bl	8008dc8 <_ux_utility_short_get>
 8008f4a:	0003      	movs	r3, r0
 8008f4c:	61bb      	str	r3, [r7, #24]

    /* Duration - upper byte of wValue.  */
    duration       =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 8008f4e:	2317      	movs	r3, #23
 8008f50:	18fb      	adds	r3, r7, r3
 8008f52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f54:	213f      	movs	r1, #63	@ 0x3f
 8008f56:	5c52      	ldrb	r2, [r2, r1]
 8008f58:	701a      	strb	r2, [r3, #0]
    
     /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a1b      	ldr	r3, [r3, #32]
 8008f5e:	613b      	str	r3, [r7, #16]
    
    /* Get the storage instance from this class container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f64:	60fb      	str	r3, [r7, #12]

    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 8008f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f68:	2b0b      	cmp	r3, #11
 8008f6a:	d900      	bls.n	8008f6e <_ux_device_class_hid_control_request+0x6e>
 8008f6c:	e079      	b.n	8009062 <_ux_device_class_hid_control_request+0x162>
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f70:	009a      	lsls	r2, r3, #2
 8008f72:	4b41      	ldr	r3, [pc, #260]	@ (8009078 <_ux_device_class_hid_control_request+0x178>)
 8008f74:	18d3      	adds	r3, r2, r3
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	469f      	mov	pc, r3
    {

        case UX_DEVICE_CLASS_HID_COMMAND_GET_REPORT:

            /* Send the requested report to the host.  */
            _ux_device_class_hid_report_get(hid, request_value, request_index, request_length);
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	69fa      	ldr	r2, [r7, #28]
 8008f7e:	6a39      	ldr	r1, [r7, #32]
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f000 fa8f 	bl	80094a4 <_ux_device_class_hid_report_get>
            break;
 8008f86:	e06f      	b.n	8009068 <_ux_device_class_hid_control_request+0x168>

        case UX_DEVICE_CLASS_HID_COMMAND_SET_REPORT:

            /* Extract the descriptor type.  */
            descriptor_type =  (request_value & 0xff00) >> 8;
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	0a1b      	lsrs	r3, r3, #8
 8008f8c:	22ff      	movs	r2, #255	@ 0xff
 8008f8e:	4013      	ands	r3, r2
 8008f90:	60bb      	str	r3, [r7, #8]

            /* Get the requested report from the host.  */
            _ux_device_class_hid_report_set(hid, descriptor_type, request_index, request_length);
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	69fa      	ldr	r2, [r7, #28]
 8008f96:	68b9      	ldr	r1, [r7, #8]
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	f000 fb19 	bl	80095d0 <_ux_device_class_hid_report_set>
            break;
 8008f9e:	e063      	b.n	8009068 <_ux_device_class_hid_control_request+0x168>

        case UX_GET_DESCRIPTOR:

            /* Send the requested descriptor to the host.  */
            _ux_device_class_hid_descriptor_send(hid, request_value, request_index, request_length);
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	69fa      	ldr	r2, [r7, #28]
 8008fa4:	6a39      	ldr	r1, [r7, #32]
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f000 f886 	bl	80090b8 <_ux_device_class_hid_descriptor_send>
            break;            
 8008fac:	e05c      	b.n	8009068 <_ux_device_class_hid_control_request+0x168>
        case UX_DEVICE_CLASS_HID_COMMAND_GET_IDLE:
        case UX_DEVICE_CLASS_HID_COMMAND_SET_IDLE:

            /* Ignore Report ID for now.  */

            if (request == UX_DEVICE_CLASS_HID_COMMAND_GET_IDLE)
 8008fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d10c      	bne.n	8008fce <_ux_device_class_hid_control_request+0xce>
            {

                /* Send the idle rate.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_event_idle_rate;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	b2d2      	uxtb	r2, r2
 8008fbe:	701a      	strb	r2, [r3, #0]
                _ux_device_stack_transfer_request(transfer_request, 1, request_length);
 8008fc0:	69ba      	ldr	r2, [r7, #24]
 8008fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc4:	2101      	movs	r1, #1
 8008fc6:	0018      	movs	r0, r3
 8008fc8:	f003 f805 	bl	800bfd6 <_ux_device_stack_transfer_request>
                        _ux_device_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_IDLE_RATE, UX_OR);
#endif
                    }
                }
            }
            break;
 8008fcc:	e04b      	b.n	8009066 <_ux_device_class_hid_control_request+0x166>
                if ((UCHAR)hid -> ux_device_class_hid_event_idle_rate != duration)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	2117      	movs	r1, #23
 8008fd6:	187a      	adds	r2, r7, r1
 8008fd8:	7812      	ldrb	r2, [r2, #0]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d043      	beq.n	8009066 <_ux_device_class_hid_control_request+0x166>
                    hid -> ux_device_class_hid_event_idle_rate = duration;
 8008fde:	187b      	adds	r3, r7, r1
 8008fe0:	781a      	ldrb	r2, [r3, #0]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	641a      	str	r2, [r3, #64]	@ 0x40
                    if (duration == 0)
 8008fe6:	187b      	adds	r3, r7, r1
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d104      	bne.n	8008ff8 <_ux_device_class_hid_control_request+0xf8>
                        hid -> ux_device_class_hid_event_wait_timeout = UX_WAIT_FOREVER;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	4252      	negs	r2, r2
 8008ff4:	645a      	str	r2, [r3, #68]	@ 0x44
            break;
 8008ff6:	e036      	b.n	8009066 <_ux_device_class_hid_control_request+0x166>
                        hid -> ux_device_class_hid_event_wait_timeout = (ULONG)UX_MS_TO_TICK((ULONG)duration << 2u);
 8008ff8:	2317      	movs	r3, #23
 8008ffa:	18fb      	adds	r3, r7, r3
 8008ffc:	781a      	ldrb	r2, [r3, #0]
 8008ffe:	0013      	movs	r3, r2
 8009000:	015b      	lsls	r3, r3, #5
 8009002:	1a9b      	subs	r3, r3, r2
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	189b      	adds	r3, r3, r2
 8009008:	015b      	lsls	r3, r3, #5
 800900a:	001a      	movs	r2, r3
 800900c:	23fa      	movs	r3, #250	@ 0xfa
 800900e:	0099      	lsls	r1, r3, #2
 8009010:	0010      	movs	r0, r2
 8009012:	f7f7 f88b 	bl	800012c <__udivsi3>
 8009016:	0003      	movs	r3, r0
 8009018:	001a      	movs	r2, r3
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	645a      	str	r2, [r3, #68]	@ 0x44
                        if (hid -> ux_device_class_hid_event_wait_timeout == 0)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009022:	2b00      	cmp	r3, #0
 8009024:	d104      	bne.n	8009030 <_ux_device_class_hid_control_request+0x130>
                            hid -> ux_device_class_hid_event_wait_timeout ++;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800902a:	1c5a      	adds	r2, r3, #1
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	645a      	str	r2, [r3, #68]	@ 0x44
                        if (hid -> ux_device_class_hid_event_state != UX_STATE_WAIT)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009034:	2b05      	cmp	r3, #5
 8009036:	d016      	beq.n	8009066 <_ux_device_class_hid_control_request+0x166>
                            hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 800903e:	e012      	b.n	8009066 <_ux_device_class_hid_control_request+0x166>

        case UX_DEVICE_CLASS_HID_COMMAND_GET_PROTOCOL:

            /* Send the protocol.  */
            *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_protocol;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	b2d2      	uxtb	r2, r2
 800904a:	701a      	strb	r2, [r3, #0]
            _ux_device_stack_transfer_request(transfer_request, 1, request_length);
 800904c:	69ba      	ldr	r2, [r7, #24]
 800904e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009050:	2101      	movs	r1, #1
 8009052:	0018      	movs	r0, r3
 8009054:	f002 ffbf 	bl	800bfd6 <_ux_device_stack_transfer_request>
            break;
 8009058:	e006      	b.n	8009068 <_ux_device_class_hid_control_request+0x168>

        case UX_DEVICE_CLASS_HID_COMMAND_SET_PROTOCOL:

            /* Accept the protocol.  */
            hid -> ux_device_class_hid_protocol = request_value;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6a3a      	ldr	r2, [r7, #32]
 800905e:	649a      	str	r2, [r3, #72]	@ 0x48
            break;
 8009060:	e002      	b.n	8009068 <_ux_device_class_hid_control_request+0x168>

        default:

            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
 8009062:	23ff      	movs	r3, #255	@ 0xff
 8009064:	e001      	b.n	800906a <_ux_device_class_hid_control_request+0x16a>
            break;
 8009066:	46c0      	nop			@ (mov r8, r8)
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 8009068:	2300      	movs	r3, #0
}
 800906a:	0018      	movs	r0, r3
 800906c:	46bd      	mov	sp, r7
 800906e:	b00c      	add	sp, #48	@ 0x30
 8009070:	bd80      	pop	{r7, pc}
 8009072:	46c0      	nop			@ (mov r8, r8)
 8009074:	200015a0 	.word	0x200015a0
 8009078:	0800d188 	.word	0x0800d188

0800907c <_ux_device_class_hid_deactivate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_HID         *hid;
UX_SLAVE_CLASS             *class_ptr;

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a1b      	ldr	r3, [r3, #32]
 8009088:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    hid = (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800908e:	60bb      	str	r3, [r7, #8]

    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(hid -> ux_device_class_hid_interrupt_endpoint, UX_TRANSFER_BUS_RESET);
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	2126      	movs	r1, #38	@ 0x26
 8009096:	0018      	movs	r0, r3
 8009098:	f002 ff8a 	bl	800bfb0 <_ux_device_stack_transfer_all_request_abort>

    /* If there is a deactivate function call it.  */
    if (hid -> ux_slave_class_hid_instance_deactivate != UX_NULL)
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	699b      	ldr	r3, [r3, #24]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d004      	beq.n	80090ae <_ux_device_class_hid_deactivate+0x32>
    {
        /* Invoke the application.  */
        hid -> ux_slave_class_hid_instance_deactivate(hid);
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	0010      	movs	r0, r2
 80090ac:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(hid);

    /* Return completion status.  */
    return(UX_SUCCESS);
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	0018      	movs	r0, r3
 80090b2:	46bd      	mov	sp, r7
 80090b4:	b004      	add	sp, #16
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <_ux_device_class_hid_descriptor_send>:
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_descriptor_send(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b08e      	sub	sp, #56	@ 0x38
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
 80090c4:	603b      	str	r3, [r7, #0]
UX_SLAVE_TRANSFER               *transfer_request;
UX_SLAVE_ENDPOINT               *endpoint;
UCHAR *                         device_framework;
UCHAR *                         device_framework_end;
ULONG                           descriptor_length;
UINT                            status =  UX_ERROR;
 80090c6:	23ff      	movs	r3, #255	@ 0xff
 80090c8:	633b      	str	r3, [r7, #48]	@ 0x30
ULONG                           length;
UCHAR                           interface_number = 0xFF;
 80090ca:	232b      	movs	r3, #43	@ 0x2b
 80090cc:	18fb      	adds	r3, r7, r3
 80090ce:	22ff      	movs	r2, #255	@ 0xff
 80090d0:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_DESCRIPTOR_SEND, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80090d2:	4b60      	ldr	r3, [pc, #384]	@ (8009254 <_ux_device_class_hid_descriptor_send+0x19c>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80090d8:	4b5e      	ldr	r3, [pc, #376]	@ (8009254 <_ux_device_class_hid_descriptor_send+0x19c>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	3324      	adds	r3, #36	@ 0x24
 80090de:	623b      	str	r3, [r7, #32]
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 80090e0:	6a3b      	ldr	r3, [r7, #32]
 80090e2:	3318      	adds	r3, #24
 80090e4:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	3320      	adds	r3, #32
 80090ea:	61bb      	str	r3, [r7, #24]

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	2203      	movs	r2, #3
 80090f0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	0a1b      	lsrs	r3, r3, #8
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	60bb      	str	r3, [r7, #8]

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	2b21      	cmp	r3, #33	@ 0x21
 80090fe:	d003      	beq.n	8009108 <_ux_device_class_hid_descriptor_send+0x50>
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	2b22      	cmp	r3, #34	@ 0x22
 8009104:	d067      	beq.n	80091d6 <_ux_device_class_hid_descriptor_send+0x11e>
 8009106:	e096      	b.n	8009236 <_ux_device_class_hid_descriptor_send+0x17e>
    {

    case UX_DEVICE_CLASS_HID_DESCRIPTOR_HID:
    
        /* We should have a HID descriptor as part of the config descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8009108:	4b52      	ldr	r3, [pc, #328]	@ (8009254 <_ux_device_class_hid_descriptor_send+0x19c>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	22cc      	movs	r2, #204	@ 0xcc
 800910e:	589b      	ldr	r3, [r3, r2]
 8009110:	637b      	str	r3, [r7, #52]	@ 0x34
        device_framework_end = device_framework + _ux_system_slave -> ux_system_slave_device_framework_length;
 8009112:	4b50      	ldr	r3, [pc, #320]	@ (8009254 <_ux_device_class_hid_descriptor_send+0x19c>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	22d0      	movs	r2, #208	@ 0xd0
 8009118:	589b      	ldr	r3, [r3, r2]
 800911a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800911c:	18d3      	adds	r3, r2, r3
 800911e:	613b      	str	r3, [r7, #16]

        /* Parse the device framework and locate the HID descriptor.  
           There is only one HID descriptor.  */
        while (device_framework < device_framework_end)
 8009120:	e048      	b.n	80091b4 <_ux_device_class_hid_descriptor_send+0xfc>
        {

            /* Get the type of the current descriptor.  */
            descriptor_type =  *(device_framework + 1);
 8009122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009124:	3301      	adds	r3, #1
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	60bb      	str	r3, [r7, #8]

            /* And its length.  */
            descriptor_length =  (ULONG) *device_framework;
 800912a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	617b      	str	r3, [r7, #20]

            /* Save interface number for later check.  */
            if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	2b04      	cmp	r3, #4
 8009134:	d104      	bne.n	8009140 <_ux_device_class_hid_descriptor_send+0x88>
                interface_number = *(device_framework + 2);
 8009136:	232b      	movs	r3, #43	@ 0x2b
 8009138:	18fb      	adds	r3, r7, r3
 800913a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800913c:	7892      	ldrb	r2, [r2, #2]
 800913e:	701a      	strb	r2, [r3, #0]

            /* Check if this is a HID report descriptor.  */
            if ((descriptor_type == UX_DEVICE_CLASS_HID_DESCRIPTOR_HID) &&
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	2b21      	cmp	r3, #33	@ 0x21
 8009144:	d132      	bne.n	80091ac <_ux_device_class_hid_descriptor_send+0xf4>
                (interface_number == (UCHAR)request_index))
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	b2db      	uxtb	r3, r3
            if ((descriptor_type == UX_DEVICE_CLASS_HID_DESCRIPTOR_HID) &&
 800914a:	222b      	movs	r2, #43	@ 0x2b
 800914c:	18ba      	adds	r2, r7, r2
 800914e:	7812      	ldrb	r2, [r2, #0]
 8009150:	429a      	cmp	r2, r3
 8009152:	d12b      	bne.n	80091ac <_ux_device_class_hid_descriptor_send+0xf4>
            {

                /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                   and do not return more than what is allowed.  */
                if (descriptor_length < host_length)
 8009154:	697a      	ldr	r2, [r7, #20]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	429a      	cmp	r2, r3
 800915a:	d202      	bcs.n	8009162 <_ux_device_class_hid_descriptor_send+0xaa>
                    length =  descriptor_length;
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009160:	e001      	b.n	8009166 <_ux_device_class_hid_descriptor_send+0xae>
                else                            
                    length =  host_length;                
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Check buffer length, since descriptor length may exceed buffer...  */
                if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8009166:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009168:	2380      	movs	r3, #128	@ 0x80
 800916a:	005b      	lsls	r3, r3, #1
 800916c:	429a      	cmp	r2, r3
 800916e:	d90d      	bls.n	800918c <_ux_device_class_hid_descriptor_send+0xd4>
                {

                    /* Error trap. */
                    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 8009170:	2212      	movs	r2, #18
 8009172:	2107      	movs	r1, #7
 8009174:	2002      	movs	r0, #2
 8009176:	f7ff fa2d 	bl	80085d4 <_ux_system_error_handler>

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, hid, 0, 0, UX_TRACE_ERRORS, 0, 0)

                    /* Stall the endpoint.  */
                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800917a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800917c:	699b      	ldr	r3, [r3, #24]
 800917e:	69fa      	ldr	r2, [r7, #28]
 8009180:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009182:	2114      	movs	r1, #20
 8009184:	4798      	blx	r3
 8009186:	0003      	movs	r3, r0
 8009188:	633b      	str	r3, [r7, #48]	@ 0x30
                    break;
 800918a:	e017      	b.n	80091bc <_ux_device_class_hid_descriptor_send+0x104>
                }

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009192:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009194:	0018      	movs	r0, r3
 8009196:	f7ff fd79 	bl	8008c8c <_ux_utility_memory_copy>
                                            device_framework, length); /* Use case of memcpy is verified. */

                /* We can return the configuration descriptor.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800919a:	683a      	ldr	r2, [r7, #0]
 800919c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	0018      	movs	r0, r3
 80091a2:	f002 ff18 	bl	800bfd6 <_ux_device_stack_transfer_request>
 80091a6:	0003      	movs	r3, r0
 80091a8:	633b      	str	r3, [r7, #48]	@ 0x30
                break;
 80091aa:	e007      	b.n	80091bc <_ux_device_class_hid_descriptor_send+0x104>
                
            }

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 80091ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	18d3      	adds	r3, r2, r3
 80091b2:	637b      	str	r3, [r7, #52]	@ 0x34
        while (device_framework < device_framework_end)
 80091b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d3b2      	bcc.n	8009122 <_ux_device_class_hid_descriptor_send+0x6a>
        }

        /* Stall the endpoint if not found or corrupt.  */
        if (device_framework >= device_framework_end)
 80091bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d340      	bcc.n	8009246 <_ux_device_class_hid_descriptor_send+0x18e>
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 80091c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	69fa      	ldr	r2, [r7, #28]
 80091ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80091cc:	2114      	movs	r1, #20
 80091ce:	4798      	blx	r3
 80091d0:	0003      	movs	r3, r0
 80091d2:	633b      	str	r3, [r7, #48]	@ 0x30

        break;
 80091d4:	e037      	b.n	8009246 <_ux_device_class_hid_descriptor_send+0x18e>

    case UX_DEVICE_CLASS_HID_DESCRIPTOR_REPORT:
        
        /* Get the length of entire configuration descriptor.  */
        descriptor_length =  hid -> ux_device_class_hid_report_length;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091da:	617b      	str	r3, [r7, #20]

        /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
           and do not return more than what is allowed.  */
        if (descriptor_length < host_length)
 80091dc:	697a      	ldr	r2, [r7, #20]
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d202      	bcs.n	80091ea <_ux_device_class_hid_descriptor_send+0x132>
            length =  descriptor_length;
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091e8:	e001      	b.n	80091ee <_ux_device_class_hid_descriptor_send+0x136>
        else                            
            length =  host_length;                
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Check buffer length, since total descriptors length may exceed buffer...  */
        if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80091ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091f0:	2380      	movs	r3, #128	@ 0x80
 80091f2:	005b      	lsls	r3, r3, #1
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d90d      	bls.n	8009214 <_ux_device_class_hid_descriptor_send+0x15c>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 80091f8:	2212      	movs	r2, #18
 80091fa:	2107      	movs	r1, #7
 80091fc:	2002      	movs	r0, #2
 80091fe:	f7ff f9e9 	bl	80085d4 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, hid, 0, 0, UX_TRACE_ERRORS, 0, 0)

            /* Stall the endpoint.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8009202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009204:	699b      	ldr	r3, [r3, #24]
 8009206:	69fa      	ldr	r2, [r7, #28]
 8009208:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800920a:	2114      	movs	r1, #20
 800920c:	4798      	blx	r3
 800920e:	0003      	movs	r3, r0
 8009210:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 8009212:	e019      	b.n	8009248 <_ux_device_class_hid_descriptor_send+0x190>
        }

        /* Copy the device descriptor into the transfer request memory.  */
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	68d8      	ldr	r0, [r3, #12]
                                    hid -> ux_device_class_hid_report_address, length); /* Use case of memcpy is verified. */
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	69db      	ldr	r3, [r3, #28]
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 800921c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800921e:	0019      	movs	r1, r3
 8009220:	f7ff fd34 	bl	8008c8c <_ux_utility_memory_copy>

        /* We can return the report descriptor.  */
        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8009224:	683a      	ldr	r2, [r7, #0]
 8009226:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	0018      	movs	r0, r3
 800922c:	f002 fed3 	bl	800bfd6 <_ux_device_stack_transfer_request>
 8009230:	0003      	movs	r3, r0
 8009232:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 8009234:	e008      	b.n	8009248 <_ux_device_class_hid_descriptor_send+0x190>
        /* Not treated for now.  Fall through and Stall endpoint.  */
        
    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8009236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009238:	699b      	ldr	r3, [r3, #24]
 800923a:	69fa      	ldr	r2, [r7, #28]
 800923c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800923e:	2114      	movs	r1, #20
 8009240:	4798      	blx	r3
        return(UX_ERROR);
 8009242:	23ff      	movs	r3, #255	@ 0xff
 8009244:	e001      	b.n	800924a <_ux_device_class_hid_descriptor_send+0x192>
        break;
 8009246:	46c0      	nop			@ (mov r8, r8)
    }

    /* Return the status to the caller.  */
    return(status);
 8009248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800924a:	0018      	movs	r0, r3
 800924c:	46bd      	mov	sp, r7
 800924e:	b00e      	add	sp, #56	@ 0x38
 8009250:	bd80      	pop	{r7, pc}
 8009252:	46c0      	nop			@ (mov r8, r8)
 8009254:	200015a0 	.word	0x200015a0

08009258 <_ux_device_class_hid_entry>:
/*                                            added error checks support, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2b07      	cmp	r3, #7
 8009266:	d834      	bhi.n	80092d2 <_ux_device_class_hid_entry+0x7a>
 8009268:	009a      	lsls	r2, r3, #2
 800926a:	4b1c      	ldr	r3, [pc, #112]	@ (80092dc <_ux_device_class_hid_entry+0x84>)
 800926c:	18d3      	adds	r3, r2, r3
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	469f      	mov	pc, r3

        /* Call the init function of the HID class.  */
#if defined(UX_DEVICE_CLASS_HID_ENABLE_ERROR_CHECKING)
        status =  _uxe_device_class_hid_initialize(command);
#else
        status =  _ux_device_class_hid_initialize(command);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	0018      	movs	r0, r3
 8009276:	f000 f8a1 	bl	80093bc <_ux_device_class_hid_initialize>
 800927a:	0003      	movs	r3, r0
 800927c:	60fb      	str	r3, [r7, #12]
#endif

        /* Return the completion status.  */
        return(status);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	e028      	b.n	80092d4 <_ux_device_class_hid_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_UNINITIALIZE:

        /* Call the init function of the HID class.  */
        status =  _ux_device_class_hid_uninitialize(command);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	0018      	movs	r0, r3
 8009286:	f000 fa8f 	bl	80097a8 <_ux_device_class_hid_uninitialize>
 800928a:	0003      	movs	r3, r0
 800928c:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	e020      	b.n	80092d4 <_ux_device_class_hid_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_QUERY:

        /* Check the CLASS definition in the interface descriptor. */
        if (command -> ux_slave_class_command_class == UX_DEVICE_CLASS_HID_CLASS)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	2b03      	cmp	r3, #3
 8009298:	d101      	bne.n	800929e <_ux_device_class_hid_entry+0x46>
            return(UX_SUCCESS);
 800929a:	2300      	movs	r3, #0
 800929c:	e01a      	b.n	80092d4 <_ux_device_class_hid_entry+0x7c>
        else
            return(UX_NO_CLASS_MATCH);
 800929e:	2357      	movs	r3, #87	@ 0x57
 80092a0:	e018      	b.n	80092d4 <_ux_device_class_hid_entry+0x7c>
    case UX_SLAVE_CLASS_COMMAND_ACTIVATE:

        /* The activate command is used when the host has sent a SET_CONFIGURATION command
           and this interface has to be mounted. Both Bulk endpoints have to be mounted
           and the hid thread needs to be activated.  */
        status =  _ux_device_class_hid_activate(command);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	0018      	movs	r0, r3
 80092a6:	f7ff fdd6 	bl	8008e56 <_ux_device_class_hid_activate>
 80092aa:	0003      	movs	r3, r0
 80092ac:	60fb      	str	r3, [r7, #12]

        /* Return the completion status.  */
        return(status);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	e010      	b.n	80092d4 <_ux_device_class_hid_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_DEACTIVATE:

        /* The deactivate command is used when the device has been extracted.
           The device endpoints have to be dismounted and the hid thread canceled.  */
        status =  _ux_device_class_hid_deactivate(command);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	0018      	movs	r0, r3
 80092b6:	f7ff fee1 	bl	800907c <_ux_device_class_hid_deactivate>
 80092ba:	0003      	movs	r3, r0
 80092bc:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	e008      	b.n	80092d4 <_ux_device_class_hid_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_REQUEST:

        /* The request command is used when the host sends a command on the control endpoint.  */
        status = _ux_device_class_hid_control_request(command);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	0018      	movs	r0, r3
 80092c6:	f7ff fe1b 	bl	8008f00 <_ux_device_class_hid_control_request>
 80092ca:	0003      	movs	r3, r0
 80092cc:	60fb      	str	r3, [r7, #12]

        /* Return the completion status.  */
        return(status);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	e000      	b.n	80092d4 <_ux_device_class_hid_entry+0x7c>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 80092d2:	2354      	movs	r3, #84	@ 0x54
    }   
}
 80092d4:	0018      	movs	r0, r3
 80092d6:	46bd      	mov	sp, r7
 80092d8:	b004      	add	sp, #16
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	0800d1b8 	.word	0x0800d1b8

080092e0 <_ux_device_class_hid_event_check>:
/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_check(UX_SLAVE_CLASS_HID *hid,
                                       UX_DEVICE_CLASS_HID_EVENT **hid_event)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
UX_SLAVE_DEVICE                 *device;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80092ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009320 <_ux_device_class_hid_event_check+0x40>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	3324      	adds	r3, #36	@ 0x24
 80092f0:	60fb      	str	r3, [r7, #12]

    /* Check the device state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2b03      	cmp	r3, #3
 80092f8:	d001      	beq.n	80092fe <_ux_device_class_hid_event_check+0x1e>
        return(UX_DEVICE_HANDLE_UNKNOWN);
 80092fa:	2350      	movs	r3, #80	@ 0x50
 80092fc:	e00c      	b.n	8009318 <_ux_device_class_hid_event_check+0x38>

    /* Check if the head and the tail of the event array is the same.  */
    if (hid -> ux_device_class_hid_event_array_head ==
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
        hid -> ux_device_class_hid_event_array_tail)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
    if (hid -> ux_device_class_hid_event_array_head ==
 8009306:	429a      	cmp	r2, r3
 8009308:	d101      	bne.n	800930e <_ux_device_class_hid_event_check+0x2e>

        /* No event to report.  */
        return(UX_ERROR);
 800930a:	23ff      	movs	r3, #255	@ 0xff
 800930c:	e004      	b.n	8009318 <_ux_device_class_hid_event_check+0x38>

    /* There is an event to report, get the current pointer to the event.  */
    *hid_event =  hid -> ux_device_class_hid_event_array_tail;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	601a      	str	r2, [r3, #0]
    return(UX_SUCCESS);
 8009316:	2300      	movs	r3, #0
}
 8009318:	0018      	movs	r0, r3
 800931a:	46bd      	mov	sp, r7
 800931c:	b004      	add	sp, #16
 800931e:	bd80      	pop	{r7, pc}
 8009320:	200015a0 	.word	0x200015a0

08009324 <_ux_device_class_hid_event_free>:
/*                                                                        */
/*  10-31-2023     Chaoqiong Xiao           Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
VOID  _ux_device_class_hid_event_free(UX_SLAVE_CLASS_HID *hid)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
UCHAR                           *pos;

    pos = (UCHAR *) hid -> ux_device_class_hid_event_array_tail;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009330:	60fb      	str	r3, [r7, #12]
    pos += UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	332c      	adds	r3, #44	@ 0x2c
 8009336:	60fb      	str	r3, [r7, #12]
    if (pos >= (UCHAR *) hid -> ux_device_class_hid_event_array_end)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	429a      	cmp	r2, r3
 8009340:	d302      	bcc.n	8009348 <_ux_device_class_hid_event_free+0x24>
        pos = (UCHAR *) hid -> ux_device_class_hid_event_array;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009346:	60fb      	str	r3, [r7, #12]
    hid -> ux_device_class_hid_event_array_tail = (UX_DEVICE_CLASS_HID_EVENT *) pos;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	655a      	str	r2, [r3, #84]	@ 0x54
}
 800934e:	46c0      	nop			@ (mov r8, r8)
 8009350:	46bd      	mov	sp, r7
 8009352:	b004      	add	sp, #16
 8009354:	bd80      	pop	{r7, pc}

08009356 <_ux_device_class_hid_event_get>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_get(UX_SLAVE_CLASS_HID *hid,
                                     UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b084      	sub	sp, #16
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
 800935e:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_EVENT_GET, hid, hid_event, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Check and get event pointer.  */
    status = _ux_device_class_hid_event_check(hid, &current_hid_event);
 8009360:	2308      	movs	r3, #8
 8009362:	18fa      	adds	r2, r7, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	0011      	movs	r1, r2
 8009368:	0018      	movs	r0, r3
 800936a:	f7ff ffb9 	bl	80092e0 <_ux_device_class_hid_event_check>
 800936e:	0003      	movs	r3, r0
 8009370:	60fb      	str	r3, [r7, #12]
    if (status != UX_SUCCESS)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d001      	beq.n	800937c <_ux_device_class_hid_event_get+0x26>
        return(status);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	e01a      	b.n	80093b2 <_ux_device_class_hid_event_get+0x5c>

    /* Keep the event data length inside buffer area.  */
    if (current_hid_event -> ux_device_class_hid_event_length > UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid))
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	2b20      	cmp	r3, #32
 8009382:	d902      	bls.n	800938a <_ux_device_class_hid_event_get+0x34>
        current_hid_event -> ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_MAX_LENGTH(hid);
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	2220      	movs	r2, #32
 8009388:	609a      	str	r2, [r3, #8]

    /* fill in the event structure from the user.  */
    hid_event -> ux_device_class_hid_event_length =  current_hid_event -> ux_device_class_hid_event_length;
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	689a      	ldr	r2, [r3, #8]
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	609a      	str	r2, [r3, #8]

    /* Copy the event data into the user buffer.  */
    _ux_utility_memory_copy(hid_event -> ux_device_class_hid_event_buffer,
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	330c      	adds	r3, #12
 8009396:	0018      	movs	r0, r3
                            UX_DEVICE_CLASS_HID_EVENT_BUFFER(current_hid_event),
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	330c      	adds	r3, #12
 800939c:	0019      	movs	r1, r3
                            current_hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */
 800939e:	68bb      	ldr	r3, [r7, #8]
    _ux_utility_memory_copy(hid_event -> ux_device_class_hid_event_buffer,
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	001a      	movs	r2, r3
 80093a4:	f7ff fc72 	bl	8008c8c <_ux_utility_memory_copy>

    /* Free the tail event.  */
    _ux_device_class_hid_event_free(hid);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	0018      	movs	r0, r3
 80093ac:	f7ff ffba 	bl	8009324 <_ux_device_class_hid_event_free>

    /* Return event status to the user.  */
    return(UX_SUCCESS);
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	0018      	movs	r0, r3
 80093b4:	46bd      	mov	sp, r7
 80093b6:	b004      	add	sp, #16
 80093b8:	bd80      	pop	{r7, pc}
	...

080093bc <_ux_device_class_hid_initialize>:
/*                                            checked compile options,    */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b088      	sub	sp, #32
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_CLASS_HID_PARAMETER            *hid_parameter;
UX_SLAVE_CLASS                          *class_ptr;
UINT                                    status = UX_SUCCESS;
 80093c4:	2300      	movs	r3, #0
 80093c6:	61fb      	str	r3, [r7, #28]
    UX_ASSERT(UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH <= UX_SLAVE_REQUEST_DATA_MAX_LENGTH);
#endif


    /* Get the pointer to the application parameters for the hid class.  */
    hid_parameter =  command -> ux_slave_class_command_parameter;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093cc:	61bb      	str	r3, [r7, #24]

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6a1b      	ldr	r3, [r3, #32]
 80093d2:	617b      	str	r3, [r7, #20]

    /* Create an instance of the device hid class.  */
    hid =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_HID));
 80093d4:	225c      	movs	r2, #92	@ 0x5c
 80093d6:	2100      	movs	r1, #0
 80093d8:	2000      	movs	r0, #0
 80093da:	f7ff fa47 	bl	800886c <_ux_utility_memory_allocate>
 80093de:	0003      	movs	r3, r0
 80093e0:	613b      	str	r3, [r7, #16]

    /* Check for successful allocation.  */
    if (hid == UX_NULL)
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d101      	bne.n	80093ec <_ux_device_class_hid_initialize+0x30>
        return(UX_MEMORY_INSUFFICIENT);
 80093e8:	2312      	movs	r3, #18
 80093ea:	e055      	b.n	8009498 <_ux_device_class_hid_initialize+0xdc>

    /* Save the address of the HID instance inside the HID container.  */
    class_ptr -> ux_slave_class_instance = (VOID *) hid;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	693a      	ldr	r2, [r7, #16]
 80093f0:	649a      	str	r2, [r3, #72]	@ 0x48
    hid -> ux_device_class_hid_event.ux_device_class_hid_event_buffer =
                                    UX_DEVICE_CLASS_HID_INTERRUPTIN_BUFFER(hid);
#endif

    /* Set task function.  */
    class_ptr -> ux_slave_class_task_function = _ux_device_class_hid_tasks_run;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	4a2a      	ldr	r2, [pc, #168]	@ (80094a0 <_ux_device_class_hid_initialize+0xe4>)
 80093f6:	651a      	str	r2, [r3, #80]	@ 0x50
#endif

    /* Check the creation of this thread.  */
    if (status == UX_SUCCESS)
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d142      	bne.n	8009484 <_ux_device_class_hid_initialize+0xc8>
        UX_THREAD_EXTENSION_PTR_SET(&(class_ptr -> ux_slave_class_thread), class_ptr)
#endif


        /* Store all the application parameter information about the report.  */
        hid -> ux_device_class_hid_report_address             = hid_parameter -> ux_device_class_hid_parameter_report_address;
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	689a      	ldr	r2, [r3, #8]
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	61da      	str	r2, [r3, #28]
        hid -> ux_device_class_hid_report_length              = hid_parameter -> ux_device_class_hid_parameter_report_length;
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	691a      	ldr	r2, [r3, #16]
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	625a      	str	r2, [r3, #36]	@ 0x24
        hid -> ux_device_class_hid_report_id                  = hid_parameter -> ux_device_class_hid_parameter_report_id;
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	68da      	ldr	r2, [r3, #12]
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	621a      	str	r2, [r3, #32]

        /* Store the callback function.  */
        hid -> ux_device_class_hid_callback                   = hid_parameter -> ux_device_class_hid_parameter_callback;
 8009416:	69bb      	ldr	r3, [r7, #24]
 8009418:	695a      	ldr	r2, [r3, #20]
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	60da      	str	r2, [r3, #12]
        hid -> ux_device_class_hid_get_callback               = hid_parameter -> ux_device_class_hid_parameter_get_callback;
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	699a      	ldr	r2, [r3, #24]
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	611a      	str	r2, [r3, #16]

        /* Create the event array.  */
        UX_ASSERT(!UX_OVERFLOW_CHECK_MULC_ULONG(
                    UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid),
                    UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter)));
        array_memory_size = UX_DEVICE_CLASS_HID_EVENT_QUEUE_ITEM_SIZE(hid) * UX_DEVICE_CLASS_HID_PARAM_EVENT_QUEUE_SIZE(hid_parameter);
 8009426:	23b0      	movs	r3, #176	@ 0xb0
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	60fb      	str	r3, [r7, #12]
        hid -> ux_device_class_hid_event_array =  _ux_utility_memory_allocate(UX_NO_ALIGN,
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	001a      	movs	r2, r3
 8009430:	2100      	movs	r1, #0
 8009432:	2000      	movs	r0, #0
 8009434:	f7ff fa1a 	bl	800886c <_ux_utility_memory_allocate>
 8009438:	0002      	movs	r2, r0
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	64da      	str	r2, [r3, #76]	@ 0x4c
            /* Regular event place data following id,type and length.  */
#endif
        }

        /* Check for successful allocation.  */
        if (hid -> ux_device_class_hid_event_array != UX_NULL)
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009442:	2b00      	cmp	r3, #0
 8009444:	d01b      	beq.n	800947e <_ux_device_class_hid_initialize+0xc2>
        {

            /* Initialize the head and tail of the notification round robin buffers. 
               At first, the head and tail are pointing to the beginning of the array.  */
            hid -> ux_device_class_hid_event_array_head =  hid -> ux_device_class_hid_event_array;
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	651a      	str	r2, [r3, #80]	@ 0x50
            hid -> ux_device_class_hid_event_array_tail =  hid -> ux_device_class_hid_event_array;
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	655a      	str	r2, [r3, #84]	@ 0x54
            hid -> ux_device_class_hid_event_array_end  =  (UX_DEVICE_CLASS_HID_EVENT*)((UCHAR*)hid -> ux_device_class_hid_event_array + array_memory_size);
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	18d2      	adds	r2, r2, r3
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Store the start and stop signals if needed by the application.  */
            hid -> ux_slave_class_hid_instance_activate = hid_parameter -> ux_slave_class_hid_instance_activate;
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	615a      	str	r2, [r3, #20]
            hid -> ux_slave_class_hid_instance_deactivate = hid_parameter -> ux_slave_class_hid_instance_deactivate;
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	619a      	str	r2, [r3, #24]

            /* By default no event wait timeout.  */
            hid -> ux_device_class_hid_event_wait_timeout = UX_WAIT_FOREVER;
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	2201      	movs	r2, #1
 8009476:	4252      	negs	r2, r2
 8009478:	645a      	str	r2, [r3, #68]	@ 0x44

                /* There is error, delete event flags.  */
                _ux_utility_event_flags_delete(&hid -> ux_device_class_hid_event_flags_group);
#endif
#else
                return(status);
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	e00c      	b.n	8009498 <_ux_device_class_hid_initialize+0xdc>
            _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
#endif

        }
        else
            status =  UX_MEMORY_INSUFFICIENT;
 800947e:	2312      	movs	r3, #18
 8009480:	61fb      	str	r3, [r7, #28]
 8009482:	e001      	b.n	8009488 <_ux_device_class_hid_initialize+0xcc>
        /* Delete thread.  */
        _ux_device_thread_delete(&class_ptr -> ux_slave_class_thread);
#endif
    }
    else
        status = (UX_THREAD_ERROR);
 8009484:	2316      	movs	r3, #22
 8009486:	61fb      	str	r3, [r7, #28]
#if defined(UX_DEVICE_CLASS_HID_OWN_ENDPOINT_BUFFER)
    _ux_utility_memory_free(hid -> ux_device_class_hid_endpoint_buffer);
#endif

    /* Unmount instance. */
    class_ptr -> ux_slave_class_instance =  UX_NULL;
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	2200      	movs	r2, #0
 800948c:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Free HID instance. */
    _ux_utility_memory_free(hid);
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	0018      	movs	r0, r3
 8009492:	f7ff fc17 	bl	8008cc4 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 8009496:	69fb      	ldr	r3, [r7, #28]
}
 8009498:	0018      	movs	r0, r3
 800949a:	46bd      	mov	sp, r7
 800949c:	b008      	add	sp, #32
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	08009679 	.word	0x08009679

080094a4 <_ux_device_class_hid_report_get>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_report_get(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 80094a4:	b590      	push	{r4, r7, lr}
 80094a6:	b097      	sub	sp, #92	@ 0x5c
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	607a      	str	r2, [r7, #4]
 80094b0:	603b      	str	r3, [r7, #0]
UCHAR                           report_id;
UCHAR                           report_type;
UX_SLAVE_CLASS_HID_EVENT        hid_event;
ULONG                           hid_event_length;
UCHAR                           *buffer;
UINT                            status =  UX_ERROR;
 80094b2:	23ff      	movs	r3, #255	@ 0xff
 80094b4:	653b      	str	r3, [r7, #80]	@ 0x50

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_REPORT_GET, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80094b6:	4b45      	ldr	r3, [pc, #276]	@ (80095cc <_ux_device_class_hid_report_get+0x128>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3324      	adds	r3, #36	@ 0x24
 80094bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 80094be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094c0:	3318      	adds	r3, #24
 80094c2:	64bb      	str	r3, [r7, #72]	@ 0x48

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80094c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094c6:	3320      	adds	r3, #32
 80094c8:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Get report ID (wValue.lower) and report type (wValue.higher).  */
    report_id   = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 0);
 80094ca:	2443      	movs	r4, #67	@ 0x43
 80094cc:	193b      	adds	r3, r7, r4
 80094ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094d0:	213e      	movs	r1, #62	@ 0x3e
 80094d2:	5c52      	ldrb	r2, [r2, r1]
 80094d4:	701a      	strb	r2, [r3, #0]
    report_type = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 80094d6:	2042      	movs	r0, #66	@ 0x42
 80094d8:	183b      	adds	r3, r7, r0
 80094da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094dc:	213f      	movs	r1, #63	@ 0x3f
 80094de:	5c52      	ldrb	r2, [r2, r1]
 80094e0:	701a      	strb	r2, [r3, #0]

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 80094e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094e4:	2203      	movs	r2, #3
 80094e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Prepare the event data payload from the hid event structure.  Get a pointer to the buffer area.  */
    buffer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 80094e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Initialize event fields.  */
    hid_event.ux_device_class_hid_event_report_id   = report_id;
 80094ee:	193b      	adds	r3, r7, r4
 80094f0:	781a      	ldrb	r2, [r3, #0]
 80094f2:	2110      	movs	r1, #16
 80094f4:	187b      	adds	r3, r7, r1
 80094f6:	601a      	str	r2, [r3, #0]
    hid_event.ux_device_class_hid_event_report_type = report_type;
 80094f8:	183b      	adds	r3, r7, r0
 80094fa:	781a      	ldrb	r2, [r3, #0]
 80094fc:	187b      	adds	r3, r7, r1
 80094fe:	605a      	str	r2, [r3, #4]
    hid_event.ux_device_class_hid_event_length      = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 8009500:	187b      	adds	r3, r7, r1
 8009502:	2220      	movs	r2, #32
 8009504:	609a      	str	r2, [r3, #8]

    /* If it's input report without ID try to get it from event queue head.  */
    if (report_type == UX_DEVICE_CLASS_HID_REPORT_TYPE_INPUT &&
 8009506:	183b      	adds	r3, r7, r0
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	2b01      	cmp	r3, #1
 800950c:	d10c      	bne.n	8009528 <_ux_device_class_hid_report_get+0x84>
        hid -> ux_device_class_hid_report_id != UX_TRUE)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6a1b      	ldr	r3, [r3, #32]
    if (report_type == UX_DEVICE_CLASS_HID_REPORT_TYPE_INPUT &&
 8009512:	2b01      	cmp	r3, #1
 8009514:	d008      	beq.n	8009528 <_ux_device_class_hid_report_get+0x84>

        /* Check if we have an event to report.  */
        status = _ux_device_class_hid_event_get(hid, &hid_event);
 8009516:	187a      	adds	r2, r7, r1
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	0011      	movs	r1, r2
 800951c:	0018      	movs	r0, r3
 800951e:	f7ff ff1a 	bl	8009356 <_ux_device_class_hid_event_get>
 8009522:	0003      	movs	r3, r0
 8009524:	653b      	str	r3, [r7, #80]	@ 0x50
 8009526:	e00c      	b.n	8009542 <_ux_device_class_hid_report_get+0x9e>
    /* Try to get event from application callback.  */
    else
    {
        
        /* Let application fill event.  */
        if (hid -> ux_device_class_hid_get_callback != UX_NULL)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	691b      	ldr	r3, [r3, #16]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d008      	beq.n	8009542 <_ux_device_class_hid_report_get+0x9e>
            status = hid -> ux_device_class_hid_get_callback(hid, &hid_event);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	2210      	movs	r2, #16
 8009536:	18b9      	adds	r1, r7, r2
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	0010      	movs	r0, r2
 800953c:	4798      	blx	r3
 800953e:	0003      	movs	r3, r0
 8009540:	653b      	str	r3, [r7, #80]	@ 0x50
    }

    if (status == UX_SUCCESS)
 8009542:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009544:	2b00      	cmp	r3, #0
 8009546:	d124      	bne.n	8009592 <_ux_device_class_hid_report_get+0xee>
    {

        /* Get the length to send back to the host.  */
        if (host_length < hid_event.ux_device_class_hid_event_length)
 8009548:	2310      	movs	r3, #16
 800954a:	18fb      	adds	r3, r7, r3
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	683a      	ldr	r2, [r7, #0]
 8009550:	429a      	cmp	r2, r3
 8009552:	d202      	bcs.n	800955a <_ux_device_class_hid_report_get+0xb6>
            hid_event_length =  host_length;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	657b      	str	r3, [r7, #84]	@ 0x54
 8009558:	e003      	b.n	8009562 <_ux_device_class_hid_report_get+0xbe>
        else
            hid_event_length =  hid_event.ux_device_class_hid_event_length;
 800955a:	2310      	movs	r3, #16
 800955c:	18fb      	adds	r3, r7, r3
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	657b      	str	r3, [r7, #84]	@ 0x54
        if (hid_event_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8009562:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009564:	2380      	movs	r3, #128	@ 0x80
 8009566:	005b      	lsls	r3, r3, #1
 8009568:	429a      	cmp	r2, r3
 800956a:	d902      	bls.n	8009572 <_ux_device_class_hid_report_get+0xce>
            hid_event_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 800956c:	2380      	movs	r3, #128	@ 0x80
 800956e:	005b      	lsls	r3, r3, #1
 8009570:	657b      	str	r3, [r7, #84]	@ 0x54

        /* First reset it.  */
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
 8009572:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009576:	2100      	movs	r1, #0
 8009578:	0018      	movs	r0, r3
 800957a:	f7ff fc09 	bl	8008d90 <_ux_utility_memory_set>

        /* Copy the event buffer into the target buffer.  */
        _ux_utility_memory_copy(buffer, hid_event.ux_device_class_hid_event_buffer, hid_event_length); /* Use case of memcpy is verified. */
 800957e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009580:	2310      	movs	r3, #16
 8009582:	18fb      	adds	r3, r7, r3
 8009584:	330c      	adds	r3, #12
 8009586:	0019      	movs	r1, r3
 8009588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800958a:	0018      	movs	r0, r3
 800958c:	f7ff fb7e 	bl	8008c8c <_ux_utility_memory_copy>
 8009590:	e00e      	b.n	80095b0 <_ux_device_class_hid_report_get+0x10c>
    {

        /* There's no event, so send back zero'd memory.  */

        /* Get the length to send back to the host.  */
        if (host_length < UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	2bff      	cmp	r3, #255	@ 0xff
 8009596:	d802      	bhi.n	800959e <_ux_device_class_hid_report_get+0xfa>
            hid_event_length =  host_length;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	657b      	str	r3, [r7, #84]	@ 0x54
 800959c:	e002      	b.n	80095a4 <_ux_device_class_hid_report_get+0x100>
        else
            hid_event_length =  UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 800959e:	2380      	movs	r3, #128	@ 0x80
 80095a0:	005b      	lsls	r3, r3, #1
 80095a2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Reset it.  */
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
 80095a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80095a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095a8:	2100      	movs	r1, #0
 80095aa:	0018      	movs	r0, r3
 80095ac:	f7ff fbf0 	bl	8008d90 <_ux_utility_memory_set>
    }

    /* We can send the report.  */
    status =  _ux_device_stack_transfer_request(transfer_request, hid_event_length, host_length);
 80095b0:	683a      	ldr	r2, [r7, #0]
 80095b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80095b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095b6:	0018      	movs	r0, r3
 80095b8:	f002 fd0d 	bl	800bfd6 <_ux_device_stack_transfer_request>
 80095bc:	0003      	movs	r3, r0
 80095be:	653b      	str	r3, [r7, #80]	@ 0x50

    /* Return the status to the caller.  */
    return(status);
 80095c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 80095c2:	0018      	movs	r0, r3
 80095c4:	46bd      	mov	sp, r7
 80095c6:	b017      	add	sp, #92	@ 0x5c
 80095c8:	bd90      	pop	{r4, r7, pc}
 80095ca:	46c0      	nop			@ (mov r8, r8)
 80095cc:	200015a0 	.word	0x200015a0

080095d0 <_ux_device_class_hid_report_set>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_report_set(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 80095d0:	b590      	push	{r4, r7, lr}
 80095d2:	b095      	sub	sp, #84	@ 0x54
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	607a      	str	r2, [r7, #4]
 80095dc:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_REPORT_SET, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80095de:	4b25      	ldr	r3, [pc, #148]	@ (8009674 <_ux_device_class_hid_report_set+0xa4>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	3324      	adds	r3, #36	@ 0x24
 80095e4:	64bb      	str	r3, [r7, #72]	@ 0x48
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 80095e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095e8:	3318      	adds	r3, #24
 80095ea:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 80095ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095ee:	3320      	adds	r3, #32
 80095f0:	643b      	str	r3, [r7, #64]	@ 0x40
    
    /* Set the event type to OUTPUT.  */
    hid_event.ux_device_class_hid_event_report_type =  descriptor_type;
 80095f2:	2114      	movs	r1, #20
 80095f4:	187b      	adds	r3, r7, r1
 80095f6:	68ba      	ldr	r2, [r7, #8]
 80095f8:	605a      	str	r2, [r3, #4]
    
    /* Get HID data address.  */
    hid_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 80095fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for report ID in this HID descriptor.  */
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6a1b      	ldr	r3, [r3, #32]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d10d      	bne.n	8009624 <_ux_device_class_hid_report_set+0x54>
    {
        /* Set the report ID, First byte of data payload.  */
        hid_event.ux_device_class_hid_event_report_id = (ULONG) *hid_buffer;
 8009608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	001a      	movs	r2, r3
 800960e:	187b      	adds	r3, r7, r1
 8009610:	601a      	str	r2, [r3, #0]

        /* Set the length = total length - report ID. */
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length -1;
 8009612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	1e5a      	subs	r2, r3, #1
 8009618:	187b      	adds	r3, r7, r1
 800961a:	609a      	str	r2, [r3, #8]
    
        /* Set HID data after report ID.  */
        hid_buffer++;
 800961c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800961e:	3301      	adds	r3, #1
 8009620:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009622:	e007      	b.n	8009634 <_ux_device_class_hid_report_set+0x64>
    }
        
    else
    {    
        /* Set the report ID, not used here.  */
        hid_event.ux_device_class_hid_event_report_id = 0;
 8009624:	2114      	movs	r1, #20
 8009626:	187b      	adds	r3, r7, r1
 8009628:	2200      	movs	r2, #0
 800962a:	601a      	str	r2, [r3, #0]

        /* Set the length.  */
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length;
 800962c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800962e:	699a      	ldr	r2, [r3, #24]
 8009630:	187b      	adds	r3, r7, r1
 8009632:	609a      	str	r2, [r3, #8]
    }
        
    /* Copy the buffer received from the host.  Check for overflow. */
    if (hid_event.ux_device_class_hid_event_length > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 8009634:	2214      	movs	r2, #20
 8009636:	18bb      	adds	r3, r7, r2
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	2b20      	cmp	r3, #32
 800963c:	d902      	bls.n	8009644 <_ux_device_class_hid_report_set+0x74>
    
        /* Overflow detected.  */
        hid_event.ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;        
 800963e:	18bb      	adds	r3, r7, r2
 8009640:	2220      	movs	r2, #32
 8009642:	609a      	str	r2, [r3, #8]
        
    /* Now we can safely copy the payload.  */
    _ux_utility_memory_copy(hid_event.ux_device_class_hid_event_buffer, hid_buffer, 
 8009644:	2414      	movs	r4, #20
 8009646:	193b      	adds	r3, r7, r4
 8009648:	689a      	ldr	r2, [r3, #8]
 800964a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800964c:	193b      	adds	r3, r7, r4
 800964e:	330c      	adds	r3, #12
 8009650:	0018      	movs	r0, r3
 8009652:	f7ff fb1b 	bl	8008c8c <_ux_utility_memory_copy>
                                hid_event.ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

    /* If there is a callback defined by the application, send the hid event to it.  */
    if (hid -> ux_device_class_hid_callback != UX_NULL)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d005      	beq.n	800966a <_ux_device_class_hid_report_set+0x9a>
    
        /* Callback exists. */
        hid -> ux_device_class_hid_callback(hid, &hid_event);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	68db      	ldr	r3, [r3, #12]
 8009662:	1939      	adds	r1, r7, r4
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	0010      	movs	r0, r2
 8009668:	4798      	blx	r3
        
    /* Return the status to the caller.  */
    return(UX_SUCCESS);
 800966a:	2300      	movs	r3, #0
}
 800966c:	0018      	movs	r0, r3
 800966e:	46bd      	mov	sp, r7
 8009670:	b015      	add	sp, #84	@ 0x54
 8009672:	bd90      	pop	{r4, r7, pc}
 8009674:	200015a0 	.word	0x200015a0

08009678 <_ux_device_class_hid_tasks_run>:
/*                                            added zero copy support,    */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT _ux_device_class_hid_tasks_run(VOID *instance)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b08a      	sub	sp, #40	@ 0x28
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
ULONG                       tick, elapsed;
UINT                        status;


    /* Get HID instance.  */
    hid = (UX_SLAVE_CLASS_HID *) instance;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8009684:	4b47      	ldr	r3, [pc, #284]	@ (80097a4 <_ux_device_class_hid_tasks_run+0x12c>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3324      	adds	r3, #36	@ 0x24
 800968a:	623b      	str	r3, [r7, #32]

    /* Check if the device is configured.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800968c:	6a3b      	ldr	r3, [r7, #32]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b03      	cmp	r3, #3
 8009692:	d004      	beq.n	800969e <_ux_device_class_hid_tasks_run+0x26>
    {
        hid -> ux_device_class_hid_event_state = UX_STATE_EXIT;
 8009694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009696:	2201      	movs	r2, #1
 8009698:	629a      	str	r2, [r3, #40]	@ 0x28
        return(UX_STATE_EXIT);
 800969a:	2301      	movs	r3, #1
 800969c:	e07e      	b.n	800979c <_ux_device_class_hid_tasks_run+0x124>
    if (hid -> ux_device_class_hid_receiver)
        hid -> ux_device_class_hid_receiver -> ux_device_class_hid_receiver_tasks_run(hid);
#endif

    /* Get access to current event instance.  */
    hid_event = &hid -> ux_device_class_hid_event;
 800969e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a0:	3330      	adds	r3, #48	@ 0x30
 80096a2:	60fb      	str	r3, [r7, #12]

    /* Run HID state machine.  */
    switch(hid -> ux_device_class_hid_event_state)
 80096a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096a8:	2b05      	cmp	r3, #5
 80096aa:	d057      	beq.n	800975c <_ux_device_class_hid_tasks_run+0xe4>
 80096ac:	d900      	bls.n	80096b0 <_ux_device_class_hid_tasks_run+0x38>
 80096ae:	e071      	b.n	8009794 <_ux_device_class_hid_tasks_run+0x11c>
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d00f      	beq.n	80096d4 <_ux_device_class_hid_tasks_run+0x5c>
 80096b4:	d900      	bls.n	80096b8 <_ux_device_class_hid_tasks_run+0x40>
 80096b6:	e06d      	b.n	8009794 <_ux_device_class_hid_tasks_run+0x11c>
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d003      	beq.n	80096c4 <_ux_device_class_hid_tasks_run+0x4c>
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d169      	bne.n	8009794 <_ux_device_class_hid_tasks_run+0x11c>
    {
    case UX_STATE_EXIT:

        /* There is nothing to do in this state.  */
        return (UX_STATE_EXIT);
 80096c0:	2301      	movs	r3, #1
 80096c2:	e06b      	b.n	800979c <_ux_device_class_hid_tasks_run+0x124>

    case UX_STATE_RESET:

        /* Start timeout waiting.  */
        hid -> ux_device_class_hid_event_wait_start = _ux_utility_time_get();
 80096c4:	f7f7 fc0b 	bl	8000ede <_ux_utility_time_get>
 80096c8:	0002      	movs	r2, r0
 80096ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096cc:	62da      	str	r2, [r3, #44]	@ 0x2c
        hid -> ux_device_class_hid_event_state = UX_STATE_IDLE;
 80096ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d0:	2202      	movs	r2, #2
 80096d2:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Fall through.  */
    case UX_STATE_IDLE:

        /* Check if there is event ready.  */
        status = _ux_device_class_hid_event_check(hid, &hid_event);
 80096d4:	230c      	movs	r3, #12
 80096d6:	18fa      	adds	r2, r7, r3
 80096d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096da:	0011      	movs	r1, r2
 80096dc:	0018      	movs	r0, r3
 80096de:	f7ff fdff 	bl	80092e0 <_ux_device_class_hid_event_check>
 80096e2:	0003      	movs	r3, r0
 80096e4:	61fb      	str	r3, [r7, #28]

        /* If there is no event, check idle rate.  */
        if (status != UX_SUCCESS)
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d01f      	beq.n	800972c <_ux_device_class_hid_tasks_run+0xb4>
        {

            /* Check idle rate setting.  */
            if (hid -> ux_device_class_hid_event_wait_timeout == UX_WAIT_FOREVER)
 80096ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096f0:	3301      	adds	r3, #1
 80096f2:	d101      	bne.n	80096f8 <_ux_device_class_hid_tasks_run+0x80>
            {

                /* There is no background idle report, keep waiting.  */
                return(UX_STATE_IDLE);
 80096f4:	2302      	movs	r3, #2
 80096f6:	e051      	b.n	800979c <_ux_device_class_hid_tasks_run+0x124>
            }

            /* Check wait timeout.  */
            tick = _ux_utility_time_get();
 80096f8:	f7f7 fbf1 	bl	8000ede <_ux_utility_time_get>
 80096fc:	0003      	movs	r3, r0
 80096fe:	61bb      	str	r3, [r7, #24]
            elapsed = _ux_utility_time_elapsed(hid -> ux_device_class_hid_event_wait_start, tick);
 8009700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009704:	69ba      	ldr	r2, [r7, #24]
 8009706:	429a      	cmp	r2, r3
 8009708:	d304      	bcc.n	8009714 <_ux_device_class_hid_tasks_run+0x9c>
 800970a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800970e:	69ba      	ldr	r2, [r7, #24]
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	e003      	b.n	800971c <_ux_device_class_hid_tasks_run+0xa4>
 8009714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	617b      	str	r3, [r7, #20]
            if (elapsed < hid -> ux_device_class_hid_event_wait_timeout)
 800971e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009722:	697a      	ldr	r2, [r7, #20]
 8009724:	429a      	cmp	r2, r3
 8009726:	d201      	bcs.n	800972c <_ux_device_class_hid_tasks_run+0xb4>
            {

                /* Keep waiting.  */
                return(UX_STATE_IDLE);
 8009728:	2302      	movs	r3, #2
 800972a:	e037      	b.n	800979c <_ux_device_class_hid_tasks_run+0x124>

            /* Send the last event in buffer.  */
        }

        /* Prepare the request to send event.  */
        trans = &hid -> ux_device_class_hid_interrupt_endpoint ->
 800972c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	3320      	adds	r3, #32
 8009732:	613b      	str	r3, [r7, #16]
        trans -> ux_slave_transfer_request_data_pointer =
                                hid_event -> ux_device_class_hid_event_buffer;
#else

        /* Copy event data to endpoint buffer.  */
        _ux_utility_memory_copy(trans -> ux_slave_transfer_request_data_pointer,
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	68d8      	ldr	r0, [r3, #12]
                                UX_DEVICE_CLASS_HID_EVENT_BUFFER(hid_event),
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	330c      	adds	r3, #12
 800973c:	0019      	movs	r1, r3
                                hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */
 800973e:	68fb      	ldr	r3, [r7, #12]
        _ux_utility_memory_copy(trans -> ux_slave_transfer_request_data_pointer,
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	001a      	movs	r2, r3
 8009744:	f7ff faa2 	bl	8008c8c <_ux_utility_memory_copy>
#endif

        trans -> ux_slave_transfer_request_requested_length =
                                hid_event -> ux_device_class_hid_event_length;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	689a      	ldr	r2, [r3, #8]
        trans -> ux_slave_transfer_request_requested_length =
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	615a      	str	r2, [r3, #20]
        UX_SLAVE_TRANSFER_STATE_RESET(trans);
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	2200      	movs	r2, #0
 8009754:	631a      	str	r2, [r3, #48]	@ 0x30
        hid -> ux_device_class_hid_event_state = UX_STATE_WAIT;
 8009756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009758:	2205      	movs	r2, #5
 800975a:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Fall through.  */
    case UX_STATE_WAIT:

        /* Run transfer state machine.  */
        trans = &hid -> ux_device_class_hid_interrupt_endpoint ->
 800975c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	3320      	adds	r3, #32
 8009762:	613b      	str	r3, [r7, #16]
                                            ux_slave_endpoint_transfer_request;
        status = _ux_device_stack_transfer_run(trans,
                                hid_event -> ux_device_class_hid_event_length,
 8009764:	68fb      	ldr	r3, [r7, #12]
        status = _ux_device_stack_transfer_run(trans,
 8009766:	6899      	ldr	r1, [r3, #8]
                                hid_event -> ux_device_class_hid_event_length);
 8009768:	68fb      	ldr	r3, [r7, #12]
        status = _ux_device_stack_transfer_run(trans,
 800976a:	689a      	ldr	r2, [r3, #8]
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	0018      	movs	r0, r3
 8009770:	f002 fc52 	bl	800c018 <_ux_device_stack_transfer_run>
 8009774:	0003      	movs	r3, r0
 8009776:	61fb      	str	r3, [r7, #28]

        /* Any error or success case.  */
        if (status <= UX_STATE_NEXT)
 8009778:	69fb      	ldr	r3, [r7, #28]
 800977a:	2b04      	cmp	r3, #4
 800977c:	d808      	bhi.n	8009790 <_ux_device_class_hid_tasks_run+0x118>
        {

            /* Event handled and the tail should be freed.  */
            _ux_device_class_hid_event_free(hid);
 800977e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009780:	0018      	movs	r0, r3
 8009782:	f7ff fdcf 	bl	8009324 <_ux_device_class_hid_event_free>

            /* Next round.  */
            hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 8009786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009788:	2200      	movs	r2, #0
 800978a:	629a      	str	r2, [r3, #40]	@ 0x28
            return(UX_STATE_IDLE);
 800978c:	2302      	movs	r3, #2
 800978e:	e005      	b.n	800979c <_ux_device_class_hid_tasks_run+0x124>
        }

        /* Wait.  */
        return(UX_STATE_WAIT);
 8009790:	2305      	movs	r3, #5
 8009792:	e003      	b.n	800979c <_ux_device_class_hid_tasks_run+0x124>

    default:

        /* Just go back to normal state.  */
        hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
 8009794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009796:	2200      	movs	r2, #0
 8009798:	629a      	str	r2, [r3, #40]	@ 0x28
        return(UX_STATE_IDLE);
 800979a:	2302      	movs	r3, #2
    }
}
 800979c:	0018      	movs	r0, r3
 800979e:	46bd      	mov	sp, r7
 80097a0:	b00a      	add	sp, #40	@ 0x28
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	200015a0 	.word	0x200015a0

080097a8 <_ux_device_class_hid_uninitialize>:
/*                                            endpoint buffer in classes, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_CLASS                          *class_ptr;


    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6a1b      	ldr	r3, [r3, #32]
 80097b4:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    hid = (UX_SLAVE_CLASS_HID *) class_ptr -> ux_slave_class_instance;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097ba:	60bb      	str	r3, [r7, #8]

    /* Free memory for the array. */
#if (UX_DEVICE_ENDPOINT_BUFFER_OWNER == 1) && defined(UX_DEVICE_CLASS_HID_ZERO_COPY)
    _ux_utility_memory_free(hid -> ux_device_class_hid_event_array -> ux_device_class_hid_event_buffer);
#endif
    _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097c0:	0018      	movs	r0, r3
 80097c2:	f7ff fa7f 	bl	8008cc4 <_ux_utility_memory_free>
#if defined(UX_DEVICE_CLASS_HID_OWN_ENDPOINT_BUFFER)
    _ux_utility_memory_free(hid -> ux_device_class_hid_endpoint_buffer);
#endif

    /* Free the resources.  */
    _ux_utility_memory_free(hid);
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	0018      	movs	r0, r3
 80097ca:	f7ff fa7b 	bl	8008cc4 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(UX_SUCCESS);
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	0018      	movs	r0, r3
 80097d2:	46bd      	mov	sp, r7
 80097d4:	b004      	add	sp, #16
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <_ux_dcd_stm32_setup_in>:
#include "ux_device_stack.h"
#include "ux_utility.h"


static inline void _ux_dcd_stm32_setup_in(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2280      	movs	r2, #128	@ 0x80
 80097e6:	729a      	strb	r2, [r3, #10]

    /* Set the state to TX.  */
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	721a      	strb	r2, [r3, #8]

    /* Call the Control Transfer dispatcher.  */
    _ux_device_stack_control_request_process(transfer_request);
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	0018      	movs	r0, r3
 80097f2:	f001 fb35 	bl	800ae60 <_ux_device_stack_control_request_process>
}
 80097f6:	46c0      	nop			@ (mov r8, r8)
 80097f8:	46bd      	mov	sp, r7
 80097fa:	b002      	add	sp, #8
 80097fc:	bd80      	pop	{r7, pc}

080097fe <_ux_dcd_stm32_setup_out>:

static inline void _ux_dcd_stm32_setup_out(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                           PCD_HandleTypeDef *hpcd)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b084      	sub	sp, #16
 8009802:	af00      	add	r7, sp, #0
 8009804:	60f8      	str	r0, [r7, #12]
 8009806:	60b9      	str	r1, [r7, #8]
 8009808:	607a      	str	r2, [r7, #4]

    /* Set the completion code to no error.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	2200      	movs	r2, #0
 800980e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2280      	movs	r2, #128	@ 0x80
 8009814:	729a      	strb	r2, [r3, #10]

    /* We are using a Control endpoint on a OUT transaction and there was a payload.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	0018      	movs	r0, r3
 800981a:	f001 fb21 	bl	800ae60 <_ux_device_stack_control_request_process>
 800981e:	1e03      	subs	r3, r0, #0
 8009820:	d108      	bne.n	8009834 <_ux_dcd_stm32_setup_out+0x36>
    {

        /* Set the state to STATUS phase TX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2203      	movs	r2, #3
 8009826:	721a      	strb	r2, [r3, #8]

        /* Arm the status transfer.  */
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	2300      	movs	r3, #0
 800982c:	2200      	movs	r2, #0
 800982e:	2100      	movs	r1, #0
 8009830:	f7f9 f92e 	bl	8002a90 <HAL_PCD_EP_Transmit>
    }
}
 8009834:	46c0      	nop			@ (mov r8, r8)
 8009836:	46bd      	mov	sp, r7
 8009838:	b004      	add	sp, #16
 800983a:	bd80      	pop	{r7, pc}

0800983c <_ux_dcd_stm32_setup_status>:

static inline void _ux_dcd_stm32_setup_status(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                              PCD_HandleTypeDef *hpcd)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	607a      	str	r2, [r7, #4]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
            in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2280      	movs	r2, #128	@ 0x80
 800984c:	729a      	strb	r2, [r3, #10]

    /* Call the Control Transfer dispatcher.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	0018      	movs	r0, r3
 8009852:	f001 fb05 	bl	800ae60 <_ux_device_stack_control_request_process>
 8009856:	1e03      	subs	r3, r0, #0
 8009858:	d108      	bne.n	800986c <_ux_dcd_stm32_setup_status+0x30>
    {

        /* Set the state to STATUS RX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2204      	movs	r2, #4
 800985e:	721a      	strb	r2, [r3, #8]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	2300      	movs	r3, #0
 8009864:	2200      	movs	r2, #0
 8009866:	2100      	movs	r1, #0
 8009868:	f7f9 f912 	bl	8002a90 <HAL_PCD_EP_Transmit>
    }
}
 800986c:	46c0      	nop			@ (mov r8, r8)
 800986e:	46bd      	mov	sp, r7
 8009870:	b004      	add	sp, #16
 8009872:	bd80      	pop	{r7, pc}

08009874 <_ux_dcd_stm32_setup_isr_pending>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
VOID     _ux_dcd_stm32_setup_isr_pending(UX_DCD_STM32 *dcd_stm32)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b086      	sub	sp, #24
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
UX_DCD_STM32_ED         *ed;
UX_SLAVE_TRANSFER       *transfer_request;
ULONG                   ed_status;

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	3304      	adds	r3, #4
 8009880:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	3320      	adds	r3, #32
 8009888:	613b      	str	r3, [r7, #16]

    UX_DISABLE
 800988a:	f7f7 fb0b 	bl	8000ea4 <_ux_utility_interrupt_disable>
 800988e:	0003      	movs	r3, r0
 8009890:	60fb      	str	r3, [r7, #12]

    /* Get the ED status.  */
    ed_status = ed -> ux_dcd_stm32_ed_status;
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	60bb      	str	r3, [r7, #8]

    /* Check if Task is pending to avoid re-entry.  */
    if (ed_status & UX_DCD_STM32_ED_STATUS_TASK_PENDING)
 8009898:	68ba      	ldr	r2, [r7, #8]
 800989a:	2380      	movs	r3, #128	@ 0x80
 800989c:	00db      	lsls	r3, r3, #3
 800989e:	4013      	ands	r3, r2
 80098a0:	d004      	beq.n	80098ac <_ux_dcd_stm32_setup_isr_pending+0x38>
    {
        UX_RESTORE
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	0018      	movs	r0, r3
 80098a6:	f7f7 fb0c 	bl	8000ec2 <_ux_utility_interrupt_restore>
        return;
 80098aa:	e047      	b.n	800993c <_ux_dcd_stm32_setup_isr_pending+0xc8>
    }

    /* Check if SETUP ISR is pending.  */
    ed_status &= UX_DCD_STM32_ED_STATUS_SETUP;
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	23c0      	movs	r3, #192	@ 0xc0
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4013      	ands	r3, r2
 80098b4:	60bb      	str	r3, [r7, #8]
    if (ed_status == 0)
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d104      	bne.n	80098c6 <_ux_dcd_stm32_setup_isr_pending+0x52>
    {
        UX_RESTORE
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	0018      	movs	r0, r3
 80098c0:	f7f7 faff 	bl	8000ec2 <_ux_utility_interrupt_restore>
        return;
 80098c4:	e03a      	b.n	800993c <_ux_dcd_stm32_setup_isr_pending+0xc8>
    }
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_SETUP;
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	4a1e      	ldr	r2, [pc, #120]	@ (8009944 <_ux_dcd_stm32_setup_isr_pending+0xd0>)
 80098cc:	401a      	ands	r2, r3
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	605a      	str	r2, [r3, #4]
    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_TASK_PENDING;
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	2280      	movs	r2, #128	@ 0x80
 80098d8:	00d2      	lsls	r2, r2, #3
 80098da:	431a      	orrs	r2, r3
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	605a      	str	r2, [r3, #4]
    UX_RESTORE
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	0018      	movs	r0, r3
 80098e4:	f7f7 faed 	bl	8000ec2 <_ux_utility_interrupt_restore>

    /* Handle different SETUP cases.  */
    switch(ed_status)
 80098e8:	68ba      	ldr	r2, [r7, #8]
 80098ea:	2380      	movs	r3, #128	@ 0x80
 80098ec:	005b      	lsls	r3, r3, #1
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d005      	beq.n	80098fe <_ux_dcd_stm32_setup_isr_pending+0x8a>
 80098f2:	68ba      	ldr	r2, [r7, #8]
 80098f4:	23c0      	movs	r3, #192	@ 0xc0
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d007      	beq.n	800990c <_ux_dcd_stm32_setup_isr_pending+0x98>
 80098fc:	e00f      	b.n	800991e <_ux_dcd_stm32_setup_isr_pending+0xaa>
    {
    case UX_DCD_STM32_ED_STATUS_SETUP_IN:
        _ux_dcd_stm32_setup_in(ed, transfer_request);
 80098fe:	693a      	ldr	r2, [r7, #16]
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	0011      	movs	r1, r2
 8009904:	0018      	movs	r0, r3
 8009906:	f7ff ff67 	bl	80097d8 <_ux_dcd_stm32_setup_in>
        break;
 800990a:	e011      	b.n	8009930 <_ux_dcd_stm32_setup_isr_pending+0xbc>

    case UX_DCD_STM32_ED_STATUS_SETUP_OUT:
        _ux_dcd_stm32_setup_out(ed, transfer_request, dcd_stm32 -> pcd_handle);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2294      	movs	r2, #148	@ 0x94
 8009910:	589a      	ldr	r2, [r3, r2]
 8009912:	6939      	ldr	r1, [r7, #16]
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	0018      	movs	r0, r3
 8009918:	f7ff ff71 	bl	80097fe <_ux_dcd_stm32_setup_out>
        break;
 800991c:	e008      	b.n	8009930 <_ux_dcd_stm32_setup_isr_pending+0xbc>

    default: /* UX_DCD_STM32_ED_STATUS_SETUP_STATUS  */
        _ux_dcd_stm32_setup_status(ed, transfer_request, dcd_stm32 -> pcd_handle);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2294      	movs	r2, #148	@ 0x94
 8009922:	589a      	ldr	r2, [r3, r2]
 8009924:	6939      	ldr	r1, [r7, #16]
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	0018      	movs	r0, r3
 800992a:	f7ff ff87 	bl	800983c <_ux_dcd_stm32_setup_status>
        break;
 800992e:	46c0      	nop			@ (mov r8, r8)
    }

    /* Task is done.  */
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_TASK_PENDING;
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	4a04      	ldr	r2, [pc, #16]	@ (8009948 <_ux_dcd_stm32_setup_isr_pending+0xd4>)
 8009936:	401a      	ands	r2, r3
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	605a      	str	r2, [r3, #4]
}
 800993c:	46bd      	mov	sp, r7
 800993e:	b006      	add	sp, #24
 8009940:	bd80      	pop	{r7, pc}
 8009942:	46c0      	nop			@ (mov r8, r8)
 8009944:	fffffcff 	.word	0xfffffcff
 8009948:	fffffbff 	.word	0xfffffbff

0800994c <HAL_PCD_SetupStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b088      	sub	sp, #32
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
UX_SLAVE_TRANSFER       *transfer_request;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8009954:	4b42      	ldr	r3, [pc, #264]	@ (8009a60 <HAL_PCD_SetupStageCallback+0x114>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	69db      	ldr	r3, [r3, #28]
 800995e:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	3304      	adds	r3, #4
 8009964:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	3320      	adds	r3, #32
 800996c:	613b      	str	r3, [r7, #16]

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	333c      	adds	r3, #60	@ 0x3c
 8009972:	0018      	movs	r0, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	22a6      	movs	r2, #166	@ 0xa6
 8009978:	0092      	lsls	r2, r2, #2
 800997a:	4694      	mov	ip, r2
 800997c:	4463      	add	r3, ip
 800997e:	2208      	movs	r2, #8
 8009980:	0019      	movs	r1, r3
 8009982:	f7ff f983 	bl	8008c8c <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	2200      	movs	r2, #0
 800998a:	619a      	str	r2, [r3, #24]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	2201      	movs	r2, #1
 8009990:	605a      	str	r2, [r3, #4]

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	2200      	movs	r2, #0
 8009996:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	220e      	movs	r2, #14
 800999e:	4393      	bics	r3, r2
 80099a0:	001a      	movs	r2, r3
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	223c      	movs	r2, #60	@ 0x3c
 80099aa:	5c9b      	ldrb	r3, [r3, r2]
 80099ac:	b25b      	sxtb	r3, r3
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	da07      	bge.n	80099c2 <HAL_PCD_SetupStageCallback+0x76>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	2280      	movs	r2, #128	@ 0x80
 80099b8:	0052      	lsls	r2, r2, #1
 80099ba:	431a      	orrs	r2, r3
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	605a      	str	r2, [r3, #4]
 80099c0:	e04a      	b.n	8009a58 <HAL_PCD_SetupStageCallback+0x10c>
    else
    {

        /* The endpoint is OUT.  This is important to memorize the direction for the control endpoint
           in case of a STALL. */
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	2200      	movs	r2, #0
 80099c6:	729a      	strb	r2, [r3, #10]

        /* We are in a OUT transaction. Check if there is a data payload. If so, wait for the payload
           to be delivered.  */
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	2242      	movs	r2, #66	@ 0x42
 80099cc:	5c9b      	ldrb	r3, [r3, r2]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10c      	bne.n	80099ec <HAL_PCD_SetupStageCallback+0xa0>
            *(transfer_request -> ux_slave_transfer_request_setup + 7) == 0)
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	2243      	movs	r2, #67	@ 0x43
 80099d6:	5c9b      	ldrb	r3, [r3, r2]
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d107      	bne.n	80099ec <HAL_PCD_SetupStageCallback+0xa0>
        {
#if defined(UX_DEVICE_STANDALONE)
            ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	2280      	movs	r2, #128	@ 0x80
 80099e2:	0092      	lsls	r2, r2, #2
 80099e4:	431a      	orrs	r2, r3
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	605a      	str	r2, [r3, #4]
 80099ea:	e035      	b.n	8009a58 <HAL_PCD_SetupStageCallback+0x10c>
        }
        else
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	60fb      	str	r3, [r7, #12]

            /* Get the length we expect from the SETUP packet.  */
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	333c      	adds	r3, #60	@ 0x3c
 80099f6:	3306      	adds	r3, #6
 80099f8:	0018      	movs	r0, r3
 80099fa:	f7ff f9e5 	bl	8008dc8 <_ux_utility_short_get>
 80099fe:	0002      	movs	r2, r0
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	615a      	str	r2, [r3, #20]

            /* Check if we have enough space for the request.  */
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	695a      	ldr	r2, [r3, #20]
 8009a08:	2380      	movs	r3, #128	@ 0x80
 8009a0a:	005b      	lsls	r3, r3, #1
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d910      	bls.n	8009a32 <HAL_PCD_SetupStageCallback+0xe6>
            {

                /* No space available, stall the endpoint.  */
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	0011      	movs	r1, r2
 8009a16:	0018      	movs	r0, r3
 8009a18:	f000 fabc 	bl	8009f94 <_ux_dcd_stm32_endpoint_stall>

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	721a      	strb	r2, [r3, #8]

#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	2280      	movs	r2, #128	@ 0x80
 8009a28:	0092      	lsls	r2, r2, #2
 8009a2a:	431a      	orrs	r2, r3
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	605a      	str	r2, [r3, #4]
#endif

                /* We are done.  */
                return;
 8009a30:	e012      	b.n	8009a58 <HAL_PCD_SetupStageCallback+0x10c>
            }
            else
            {

                /* Reset what we have received so far.  */
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	2200      	movs	r2, #0
 8009a36:	619a      	str	r2, [r3, #24]

                /* And reprogram the current buffer address to the beginning of the buffer.  */
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	68da      	ldr	r2, [r3, #12]
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	611a      	str	r2, [r3, #16]

                /* Receive data.  */
                HAL_PCD_EP_Receive(hpcd,
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	7b99      	ldrb	r1, [r3, #14]
                            endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
                            transfer_request -> ux_slave_transfer_request_current_data_pointer,
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Receive(hpcd,
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	695b      	ldr	r3, [r3, #20]
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f7f8 ffcf 	bl	80029f0 <HAL_PCD_EP_Receive>
                            transfer_request -> ux_slave_transfer_request_requested_length);

                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	2202      	movs	r2, #2
 8009a56:	721a      	strb	r2, [r3, #8]
            }
        }
    }
}
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	b008      	add	sp, #32
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	46c0      	nop			@ (mov r8, r8)
 8009a60:	200015a0 	.word	0x200015a0

08009a64 <HAL_PCD_DataInStageCallback>:
/*                                            fixed transmit ZLP issue,   */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b088      	sub	sp, #32
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	000a      	movs	r2, r1
 8009a6e:	1cfb      	adds	r3, r7, #3
 8009a70:	701a      	strb	r2, [r3, #0]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8009a72:	4b5e      	ldr	r3, [pc, #376]	@ (8009bec <HAL_PCD_DataInStageCallback+0x188>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	69db      	ldr	r3, [r3, #28]
 8009a7c:	613b      	str	r3, [r7, #16]

    /* Fetch the address of the physical endpoint.  */
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
 8009a7e:	1cfb      	adds	r3, r7, #3
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	220f      	movs	r2, #15
 8009a84:	4013      	ands	r3, r2
 8009a86:	d00d      	beq.n	8009aa4 <HAL_PCD_DataInStageCallback+0x40>
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 8009a88:	1cfb      	adds	r3, r7, #3
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	220f      	movs	r2, #15
 8009a8e:	401a      	ands	r2, r3
 8009a90:	0013      	movs	r3, r2
 8009a92:	005b      	lsls	r3, r3, #1
 8009a94:	189b      	adds	r3, r3, r2
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	3348      	adds	r3, #72	@ 0x48
 8009a9a:	693a      	ldr	r2, [r7, #16]
 8009a9c:	18d3      	adds	r3, r2, r3
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	61fb      	str	r3, [r7, #28]
 8009aa2:	e00b      	b.n	8009abc <HAL_PCD_DataInStageCallback+0x58>
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 8009aa4:	1cfb      	adds	r3, r7, #3
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	220f      	movs	r2, #15
 8009aaa:	401a      	ands	r2, r3
 8009aac:	0013      	movs	r3, r2
 8009aae:	005b      	lsls	r3, r3, #1
 8009ab0:	189b      	adds	r3, r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	693a      	ldr	r2, [r7, #16]
 8009ab6:	18d3      	adds	r3, r2, r3
 8009ab8:	3304      	adds	r3, #4
 8009aba:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	3320      	adds	r3, #32
 8009ac2:	60fb      	str	r3, [r7, #12]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 8009ac4:	1cfb      	adds	r3, r7, #3
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d164      	bne.n	8009b96 <HAL_PCD_DataInStageCallback+0x132>
    {

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	60bb      	str	r3, [r7, #8]

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	7a1b      	ldrb	r3, [r3, #8]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d000      	beq.n	8009adc <HAL_PCD_DataInStageCallback+0x78>
 8009ada:	e082      	b.n	8009be2 <HAL_PCD_DataInStageCallback+0x17e>
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	2300      	movs	r3, #0
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	f7f8 ff84 	bl	80029f0 <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	69db      	ldr	r3, [r3, #28]
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	8a12      	ldrh	r2, [r2, #16]
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d82b      	bhi.n	8009b4c <HAL_PCD_DataInStageCallback+0xe8>
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d10a      	bne.n	8009b12 <HAL_PCD_DataInStageCallback+0xae>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	7b99      	ldrb	r1, [r3, #14]
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	2300      	movs	r3, #0
 8009b04:	2200      	movs	r2, #0
 8009b06:	f7f8 ffc3 	bl	8002a90 <HAL_PCD_EP_Transmit>
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	639a      	str	r2, [r3, #56]	@ 0x38
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
        }
    }
}
 8009b10:	e067      	b.n	8009be2 <HAL_PCD_DataInStageCallback+0x17e>
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2200      	movs	r2, #0
 8009b16:	625a      	str	r2, [r3, #36]	@ 0x24
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	601a      	str	r2, [r3, #0]
                        transfer_request -> ux_slave_transfer_request_requested_length;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	695a      	ldr	r2, [r3, #20]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	619a      	str	r2, [r3, #24]
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	2208      	movs	r2, #8
 8009b2c:	431a      	orrs	r2, r3
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	605a      	str	r2, [r3, #4]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d004      	beq.n	8009b44 <HAL_PCD_DataInStageCallback+0xe0>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	0010      	movs	r0, r2
 8009b42:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	2204      	movs	r2, #4
 8009b48:	721a      	strb	r2, [r3, #8]
}
 8009b4a:	e04a      	b.n	8009be2 <HAL_PCD_DataInStageCallback+0x17e>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	69db      	ldr	r3, [r3, #28]
 8009b50:	68ba      	ldr	r2, [r7, #8]
 8009b52:	8a12      	ldrh	r2, [r2, #16]
 8009b54:	1a9b      	subs	r3, r3, r2
 8009b56:	61bb      	str	r3, [r7, #24]
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	8a1b      	ldrh	r3, [r3, #16]
 8009b5c:	001a      	movs	r2, r3
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d902      	bls.n	8009b6a <HAL_PCD_DataInStageCallback+0x106>
                    transfer_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	8a1b      	ldrh	r3, [r3, #16]
 8009b68:	61bb      	str	r3, [r7, #24]
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	68ba      	ldr	r2, [r7, #8]
 8009b70:	8a12      	ldrh	r2, [r2, #16]
 8009b72:	189a      	adds	r2, r3, r2
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	611a      	str	r2, [r3, #16]
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	69da      	ldr	r2, [r3, #28]
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	1ad2      	subs	r2, r2, r3
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	61da      	str	r2, [r3, #28]
                HAL_PCD_EP_Transmit(hpcd,
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	7b99      	ldrb	r1, [r3, #14]
                            transfer_request->ux_slave_transfer_request_current_data_pointer,
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Transmit(hpcd,
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f7f8 ff7e 	bl	8002a90 <HAL_PCD_EP_Transmit>
}
 8009b94:	e025      	b.n	8009be2 <HAL_PCD_DataInStageCallback+0x17e>
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d011      	beq.n	8009bc2 <HAL_PCD_DataInStageCallback+0x15e>
            transfer_request -> ux_slave_transfer_request_requested_length)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	695b      	ldr	r3, [r3, #20]
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d00d      	beq.n	8009bc2 <HAL_PCD_DataInStageCallback+0x15e>
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	639a      	str	r2, [r3, #56]	@ 0x38
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	61da      	str	r2, [r3, #28]
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 8009bb2:	1cfb      	adds	r3, r7, #3
 8009bb4:	7819      	ldrb	r1, [r3, #0]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	2300      	movs	r3, #0
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f7f8 ff68 	bl	8002a90 <HAL_PCD_EP_Transmit>
}
 8009bc0:	e00f      	b.n	8009be2 <HAL_PCD_DataInStageCallback+0x17e>
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	625a      	str	r2, [r3, #36]	@ 0x24
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2202      	movs	r2, #2
 8009bcc:	601a      	str	r2, [r3, #0]
                transfer_request -> ux_slave_transfer_request_requested_length;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	695a      	ldr	r2, [r3, #20]
            transfer_request -> ux_slave_transfer_request_actual_length =
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	619a      	str	r2, [r3, #24]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	2208      	movs	r2, #8
 8009bdc:	431a      	orrs	r2, r3
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	605a      	str	r2, [r3, #4]
}
 8009be2:	46c0      	nop			@ (mov r8, r8)
 8009be4:	46bd      	mov	sp, r7
 8009be6:	b008      	add	sp, #32
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	46c0      	nop			@ (mov r8, r8)
 8009bec:	200015a0 	.word	0x200015a0

08009bf0 <HAL_PCD_DataOutStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b088      	sub	sp, #32
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	000a      	movs	r2, r1
 8009bfa:	1cfb      	adds	r3, r7, #3
 8009bfc:	701a      	strb	r2, [r3, #0]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 8009bfe:	4b44      	ldr	r3, [pc, #272]	@ (8009d10 <HAL_PCD_DataOutStageCallback+0x120>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	69db      	ldr	r3, [r3, #28]
 8009c08:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 8009c0a:	1cfb      	adds	r3, r7, #3
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	220f      	movs	r2, #15
 8009c10:	401a      	ands	r2, r3
 8009c12:	0013      	movs	r3, r2
 8009c14:	005b      	lsls	r3, r3, #1
 8009c16:	189b      	adds	r3, r3, r2
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	69ba      	ldr	r2, [r7, #24]
 8009c1c:	18d3      	adds	r3, r2, r3
 8009c1e:	3304      	adds	r3, #4
 8009c20:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	3320      	adds	r3, #32
 8009c28:	613b      	str	r3, [r7, #16]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 8009c2a:	1cfb      	adds	r3, r7, #3
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d153      	bne.n	8009cda <HAL_PCD_DataOutStageCallback+0xea>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	7a1b      	ldrb	r3, [r3, #8]
 8009c36:	2b02      	cmp	r3, #2
 8009c38:	d165      	bne.n	8009d06 <HAL_PCD_DataOutStageCallback+0x116>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	60fb      	str	r3, [r7, #12]

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 8009c40:	1cfb      	adds	r3, r7, #3
 8009c42:	781a      	ldrb	r2, [r3, #0]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	0011      	movs	r1, r2
 8009c48:	0018      	movs	r0, r3
 8009c4a:	f7f8 ff08 	bl	8002a5e <HAL_PCD_EP_GetRxCount>
 8009c4e:	0003      	movs	r3, r0
 8009c50:	60bb      	str	r3, [r7, #8]

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	699a      	ldr	r2, [r3, #24]
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	18d2      	adds	r2, r2, r3
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	619a      	str	r2, [r3, #24]

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	699a      	ldr	r2, [r3, #24]
                transfer_request -> ux_slave_transfer_request_requested_length)
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	695b      	ldr	r3, [r3, #20]
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d824      	bhi.n	8009cb4 <HAL_PCD_DataOutStageCallback+0xc4>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	699a      	ldr	r2, [r3, #24]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	695b      	ldr	r3, [r3, #20]
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d005      	beq.n	8009c82 <HAL_PCD_DataOutStageCallback+0x92>
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	8a1b      	ldrh	r3, [r3, #16]
 8009c7a:	001a      	movs	r2, r3
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d007      	beq.n	8009c92 <HAL_PCD_DataOutStageCallback+0xa2>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	22c0      	movs	r2, #192	@ 0xc0
 8009c88:	0092      	lsls	r2, r2, #2
 8009c8a:	431a      	orrs	r2, r3
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	605a      	str	r2, [r3, #4]
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 8009c90:	e039      	b.n	8009d06 <HAL_PCD_DataOutStageCallback+0x116>
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	8a12      	ldrh	r2, [r2, #16]
 8009c9a:	189a      	adds	r2, r3, r2
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	611a      	str	r2, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	7b99      	ldrb	r1, [r3, #14]
                                transfer_request -> ux_slave_transfer_request_current_data_pointer,
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	691a      	ldr	r2, [r3, #16]
                                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	8a1b      	ldrh	r3, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f7f8 fe9f 	bl	80029f0 <HAL_PCD_EP_Receive>
}
 8009cb2:	e028      	b.n	8009d06 <HAL_PCD_DataOutStageCallback+0x116>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	2227      	movs	r2, #39	@ 0x27
 8009cb8:	625a      	str	r2, [r3, #36]	@ 0x24
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	2208      	movs	r2, #8
 8009cc0:	431a      	orrs	r2, r3
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	605a      	str	r2, [r3, #4]
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d01b      	beq.n	8009d06 <HAL_PCD_DataOutStageCallback+0x116>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd2:	693a      	ldr	r2, [r7, #16]
 8009cd4:	0010      	movs	r0, r2
 8009cd6:	4798      	blx	r3
}
 8009cd8:	e015      	b.n	8009d06 <HAL_PCD_DataOutStageCallback+0x116>
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 8009cda:	1cfb      	adds	r3, r7, #3
 8009cdc:	781a      	ldrb	r2, [r3, #0]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	0011      	movs	r1, r2
 8009ce2:	0018      	movs	r0, r3
 8009ce4:	f7f8 febb 	bl	8002a5e <HAL_PCD_EP_GetRxCount>
 8009ce8:	0002      	movs	r2, r0
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	619a      	str	r2, [r3, #24]
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	625a      	str	r2, [r3, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	2202      	movs	r2, #2
 8009cf8:	601a      	str	r2, [r3, #0]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	2208      	movs	r2, #8
 8009d00:	431a      	orrs	r2, r3
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	605a      	str	r2, [r3, #4]
}
 8009d06:	46c0      	nop			@ (mov r8, r8)
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	b008      	add	sp, #32
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	46c0      	nop			@ (mov r8, r8)
 8009d10:	200015a0 	.word	0x200015a0

08009d14 <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 8009d1c:	4b11      	ldr	r3, [pc, #68]	@ (8009d64 <HAL_PCD_ResetCallback+0x50>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d001      	beq.n	8009d2a <HAL_PCD_ResetCallback+0x16>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 8009d26:	f001 fc07 	bl	800b538 <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	795b      	ldrb	r3, [r3, #5]
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	d106      	bne.n	8009d40 <HAL_PCD_ResetCallback+0x2c>
        break;
#endif
    case PCD_SPEED_FULL:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 8009d32:	4b0c      	ldr	r3, [pc, #48]	@ (8009d64 <HAL_PCD_ResetCallback+0x50>)
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	23a0      	movs	r3, #160	@ 0xa0
 8009d38:	005b      	lsls	r3, r3, #1
 8009d3a:	2101      	movs	r1, #1
 8009d3c:	50d1      	str	r1, [r2, r3]
        break;
 8009d3e:	e006      	b.n	8009d4e <HAL_PCD_ResetCallback+0x3a>

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 8009d40:	4b08      	ldr	r3, [pc, #32]	@ (8009d64 <HAL_PCD_ResetCallback+0x50>)
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	23a0      	movs	r3, #160	@ 0xa0
 8009d46:	005b      	lsls	r3, r3, #1
 8009d48:	2101      	movs	r1, #1
 8009d4a:	50d1      	str	r1, [r2, r3]
        break;
 8009d4c:	46c0      	nop			@ (mov r8, r8)
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 8009d4e:	f000 fa63 	bl	800a218 <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 8009d52:	4b04      	ldr	r3, [pc, #16]	@ (8009d64 <HAL_PCD_ResetCallback+0x50>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2201      	movs	r2, #1
 8009d58:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8009d5a:	46c0      	nop			@ (mov r8, r8)
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	b002      	add	sp, #8
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	46c0      	nop			@ (mov r8, r8)
 8009d64:	200015a0 	.word	0x200015a0

08009d68 <HAL_PCD_SuspendCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8009d70:	4b08      	ldr	r3, [pc, #32]	@ (8009d94 <HAL_PCD_SuspendCallback+0x2c>)
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	23b2      	movs	r3, #178	@ 0xb2
 8009d76:	005b      	lsls	r3, r3, #1
 8009d78:	58d3      	ldr	r3, [r2, r3]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d006      	beq.n	8009d8c <HAL_PCD_SuspendCallback+0x24>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_SUSPENDED);
 8009d7e:	4b05      	ldr	r3, [pc, #20]	@ (8009d94 <HAL_PCD_SuspendCallback+0x2c>)
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	23b2      	movs	r3, #178	@ 0xb2
 8009d84:	005b      	lsls	r3, r3, #1
 8009d86:	58d3      	ldr	r3, [r2, r3]
 8009d88:	20f4      	movs	r0, #244	@ 0xf4
 8009d8a:	4798      	blx	r3
    }
}
 8009d8c:	46c0      	nop			@ (mov r8, r8)
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	b002      	add	sp, #8
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	200015a0 	.word	0x200015a0

08009d98 <HAL_PCD_ResumeCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8009da0:	4b08      	ldr	r3, [pc, #32]	@ (8009dc4 <HAL_PCD_ResumeCallback+0x2c>)
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	23b2      	movs	r3, #178	@ 0xb2
 8009da6:	005b      	lsls	r3, r3, #1
 8009da8:	58d3      	ldr	r3, [r2, r3]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d006      	beq.n	8009dbc <HAL_PCD_ResumeCallback+0x24>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_RESUMED);
 8009dae:	4b05      	ldr	r3, [pc, #20]	@ (8009dc4 <HAL_PCD_ResumeCallback+0x2c>)
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	23b2      	movs	r3, #178	@ 0xb2
 8009db4:	005b      	lsls	r3, r3, #1
 8009db6:	58d3      	ldr	r3, [r2, r3]
 8009db8:	20f3      	movs	r0, #243	@ 0xf3
 8009dba:	4798      	blx	r3
    }
}
 8009dbc:	46c0      	nop			@ (mov r8, r8)
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	b002      	add	sp, #8
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	200015a0 	.word	0x200015a0

08009dc8 <HAL_PCD_SOFCallback>:
/*  07-29-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8009dd0:	4b08      	ldr	r3, [pc, #32]	@ (8009df4 <HAL_PCD_SOFCallback+0x2c>)
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	23b2      	movs	r3, #178	@ 0xb2
 8009dd6:	005b      	lsls	r3, r3, #1
 8009dd8:	58d3      	ldr	r3, [r2, r3]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d006      	beq.n	8009dec <HAL_PCD_SOFCallback+0x24>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_SOF_RECEIVED);
 8009dde:	4b05      	ldr	r3, [pc, #20]	@ (8009df4 <HAL_PCD_SOFCallback+0x2c>)
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	23b2      	movs	r3, #178	@ 0xb2
 8009de4:	005b      	lsls	r3, r3, #1
 8009de6:	58d3      	ldr	r3, [r2, r3]
 8009de8:	20f0      	movs	r0, #240	@ 0xf0
 8009dea:	4798      	blx	r3
    }
}
 8009dec:	46c0      	nop			@ (mov r8, r8)
 8009dee:	46bd      	mov	sp, r7
 8009df0:	b002      	add	sp, #8
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	200015a0 	.word	0x200015a0

08009df8 <_stm32_ed_get>:
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    PCD_HandleTypeDef   *pcd_handle;
} UX_DCD_STM32;

static inline struct UX_DCD_STM32_ED_STRUCT *_stm32_ed_get(UX_DCD_STM32 *dcd_stm32, ULONG ep_addr)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
ULONG ep_dir = ep_addr & 0x80u;
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	2280      	movs	r2, #128	@ 0x80
 8009e06:	4013      	ands	r3, r2
 8009e08:	60fb      	str	r3, [r7, #12]
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
ULONG ep_num = ep_addr & 0x7Fu;
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	227f      	movs	r2, #127	@ 0x7f
 8009e0e:	4013      	ands	r3, r2
 8009e10:	60bb      	str	r3, [r7, #8]

    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	2b05      	cmp	r3, #5
 8009e16:	d807      	bhi.n	8009e28 <_stm32_ed_get+0x30>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2294      	movs	r2, #148	@ 0x94
 8009e1c:	589b      	ldr	r3, [r3, r2]
 8009e1e:	791b      	ldrb	r3, [r3, #4]
 8009e20:	001a      	movs	r2, r3
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d301      	bcc.n	8009e2c <_stm32_ed_get+0x34>
        return(UX_NULL);
 8009e28:	2300      	movs	r3, #0
 8009e2a:	e014      	b.n	8009e56 <_stm32_ed_get+0x5e>

#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if (ep_dir)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d009      	beq.n	8009e46 <_stm32_ed_get+0x4e>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 8009e32:	68ba      	ldr	r2, [r7, #8]
 8009e34:	0013      	movs	r3, r2
 8009e36:	005b      	lsls	r3, r3, #1
 8009e38:	189b      	adds	r3, r3, r2
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	3348      	adds	r3, #72	@ 0x48
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	18d3      	adds	r3, r2, r3
 8009e42:	3304      	adds	r3, #4
 8009e44:	e007      	b.n	8009e56 <_stm32_ed_get+0x5e>
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	0013      	movs	r3, r2
 8009e4a:	005b      	lsls	r3, r3, #1
 8009e4c:	189b      	adds	r3, r3, r2
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	18d3      	adds	r3, r2, r3
 8009e54:	3304      	adds	r3, #4
}
 8009e56:	0018      	movs	r0, r3
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	b004      	add	sp, #16
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <_ux_dcd_stm32_endpoint_create>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_create(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8009e5e:	b590      	push	{r4, r7, lr}
 8009e60:	b085      	sub	sp, #20
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	6039      	str	r1, [r7, #0]
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_index;


    /* The endpoint index in the array of the STM32 must match the endpoint number.  */
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	7b9b      	ldrb	r3, [r3, #14]
 8009e6c:	001a      	movs	r2, r3
 8009e6e:	2380      	movs	r3, #128	@ 0x80
 8009e70:	439a      	bics	r2, r3
 8009e72:	0013      	movs	r3, r2
 8009e74:	60fb      	str	r3, [r7, #12]

    /* Get STM32 ED.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	7b9b      	ldrb	r3, [r3, #14]
 8009e7a:	001a      	movs	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	0011      	movs	r1, r2
 8009e80:	0018      	movs	r0, r3
 8009e82:	f7ff ffb9 	bl	8009df8 <_stm32_ed_get>
 8009e86:	0003      	movs	r3, r0
 8009e88:	60bb      	str	r3, [r7, #8]

    if (ed == UX_NULL)
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d101      	bne.n	8009e94 <_ux_dcd_stm32_endpoint_create+0x36>
        return(UX_NO_ED_AVAILABLE);
 8009e90:	2314      	movs	r3, #20
 8009e92:	e02f      	b.n	8009ef4 <_ux_dcd_stm32_endpoint_create+0x96>

    /* Check the endpoint status, if it is free, reserve it. If not reject this endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	4013      	ands	r3, r2
 8009e9c:	d129      	bne.n	8009ef2 <_ux_dcd_stm32_endpoint_create+0x94>
    {

        /* We can use this endpoint.  */
        ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_USED;
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	431a      	orrs	r2, r3
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	605a      	str	r2, [r3, #4]

        /* Keep the physical endpoint address in the endpoint container.  */
        endpoint -> ux_slave_endpoint_ed =  (VOID *) ed;
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	609a      	str	r2, [r3, #8]

        /* Save the endpoint pointer.  */
        ed -> ux_dcd_stm32_ed_endpoint =  endpoint;
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	683a      	ldr	r2, [r7, #0]
 8009eb4:	601a      	str	r2, [r3, #0]

        /* And its index.  */
        ed -> ux_dcd_stm32_ed_index =  stm32_endpoint_index;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	b2da      	uxtb	r2, r3
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	725a      	strb	r2, [r3, #9]

        /* And its direction.  */
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	7b9b      	ldrb	r3, [r3, #14]
 8009ec2:	227f      	movs	r2, #127	@ 0x7f
 8009ec4:	4393      	bics	r3, r2
 8009ec6:	b2da      	uxtb	r2, r3
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	729a      	strb	r2, [r3, #10]

        /* Check if it is non-control endpoint.  */
        if (stm32_endpoint_index != 0)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00d      	beq.n	8009eee <_ux_dcd_stm32_endpoint_create+0x90>
        {

            /* Open the endpoint.  */
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2294      	movs	r2, #148	@ 0x94
 8009ed6:	5898      	ldr	r0, [r3, r2]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	7b99      	ldrb	r1, [r3, #14]
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	8a1a      	ldrh	r2, [r3, #16]
                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize,
                            endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE);
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	7bdb      	ldrb	r3, [r3, #15]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 8009ee4:	2403      	movs	r4, #3
 8009ee6:	4023      	ands	r3, r4
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	f7f8 fcbf 	bl	800286c <HAL_PCD_EP_Open>
        }

        /* Return successful completion.  */
        return(UX_SUCCESS);
 8009eee:	2300      	movs	r3, #0
 8009ef0:	e000      	b.n	8009ef4 <_ux_dcd_stm32_endpoint_create+0x96>
    }

    /* Return an error.  */
    return(UX_NO_ED_AVAILABLE);
 8009ef2:	2314      	movs	r3, #20
}
 8009ef4:	0018      	movs	r0, r3
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	b005      	add	sp, #20
 8009efa:	bd90      	pop	{r4, r7, pc}

08009efc <_ux_dcd_stm32_endpoint_destroy>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_destroy(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Keep the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	60fb      	str	r3, [r7, #12]

    /* We can free this endpoint.  */
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	605a      	str	r2, [r3, #4]

    /* Deactivate the endpoint.  */
    HAL_PCD_EP_Close(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2294      	movs	r2, #148	@ 0x94
 8009f16:	589a      	ldr	r2, [r3, r2]
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	7b9b      	ldrb	r3, [r3, #14]
 8009f1c:	0019      	movs	r1, r3
 8009f1e:	0010      	movs	r0, r2
 8009f20:	f7f8 fd15 	bl	800294e <HAL_PCD_EP_Close>

    /* This function never fails.  */
    return(UX_SUCCESS);
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	0018      	movs	r0, r3
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	b004      	add	sp, #16
 8009f2c:	bd80      	pop	{r7, pc}
	...

08009f30 <_ux_dcd_stm32_endpoint_reset>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_reset(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
UX_INTERRUPT_SAVE_AREA
UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	60fb      	str	r3, [r7, #12]

    UX_DISABLE
 8009f40:	f7f6 ffb0 	bl	8000ea4 <_ux_utility_interrupt_disable>
 8009f44:	0003      	movs	r3, r0
 8009f46:	60bb      	str	r3, [r7, #8]

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	4a10      	ldr	r2, [pc, #64]	@ (8009f90 <_ux_dcd_stm32_endpoint_reset+0x60>)
 8009f4e:	401a      	ands	r2, r3
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_DONE |
                                      UX_DCD_STM32_ED_STATUS_SETUP);

    /* Set the state of the endpoint to IDLE.  */
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2200      	movs	r2, #0
 8009f58:	721a      	strb	r2, [r3, #8]

    /* Clear STALL condition.  */
    HAL_PCD_EP_ClrStall(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2294      	movs	r2, #148	@ 0x94
 8009f5e:	589a      	ldr	r2, [r3, r2]
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	7b9b      	ldrb	r3, [r3, #14]
 8009f64:	0019      	movs	r1, r3
 8009f66:	0010      	movs	r0, r2
 8009f68:	f7f8 fe2a 	bl	8002bc0 <HAL_PCD_EP_ClrStall>

    /* Flush buffer.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2294      	movs	r2, #148	@ 0x94
 8009f70:	589a      	ldr	r2, [r3, r2]
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	7b9b      	ldrb	r3, [r3, #14]
 8009f76:	0019      	movs	r1, r3
 8009f78:	0010      	movs	r0, r2
 8009f7a:	f7f8 feb6 	bl	8002cea <HAL_PCD_EP_Flush>
    /* Wakeup pending thread.  */
    if (endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore.tx_semaphore_suspended_count)
        _ux_utility_semaphore_put(&endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
#endif

    UX_RESTORE
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	0018      	movs	r0, r3
 8009f82:	f7f6 ff9e 	bl	8000ec2 <_ux_utility_interrupt_restore>

    /* This function never fails.  */
    return(UX_SUCCESS);
 8009f86:	2300      	movs	r3, #0
}
 8009f88:	0018      	movs	r0, r3
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	b004      	add	sp, #16
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	fffffcf3 	.word	0xfffffcf3

08009f94 <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	60fb      	str	r3, [r7, #12]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	2204      	movs	r2, #4
 8009faa:	431a      	orrs	r2, r3
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	605a      	str	r2, [r3, #4]

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2294      	movs	r2, #148	@ 0x94
 8009fb4:	5898      	ldr	r0, [r3, r2]
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	7b9a      	ldrb	r2, [r3, #14]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	7a9b      	ldrb	r3, [r3, #10]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	0019      	movs	r1, r3
 8009fc4:	f7f8 fda0 	bl	8002b08 <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
 8009fc8:	2300      	movs	r3, #0
}
 8009fca:	0018      	movs	r0, r3
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	b004      	add	sp, #16
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <_stm32_ed_get>:
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b084      	sub	sp, #16
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
 8009fda:	6039      	str	r1, [r7, #0]
ULONG ep_dir = ep_addr & 0x80u;
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	2280      	movs	r2, #128	@ 0x80
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	60fb      	str	r3, [r7, #12]
ULONG ep_num = ep_addr & 0x7Fu;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	227f      	movs	r2, #127	@ 0x7f
 8009fe8:	4013      	ands	r3, r2
 8009fea:	60bb      	str	r3, [r7, #8]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	2b05      	cmp	r3, #5
 8009ff0:	d807      	bhi.n	800a002 <_stm32_ed_get+0x30>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2294      	movs	r2, #148	@ 0x94
 8009ff6:	589b      	ldr	r3, [r3, r2]
 8009ff8:	791b      	ldrb	r3, [r3, #4]
 8009ffa:	001a      	movs	r2, r3
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d301      	bcc.n	800a006 <_stm32_ed_get+0x34>
        return(UX_NULL);
 800a002:	2300      	movs	r3, #0
 800a004:	e014      	b.n	800a030 <_stm32_ed_get+0x5e>
    if (ep_dir)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d009      	beq.n	800a020 <_stm32_ed_get+0x4e>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 800a00c:	68ba      	ldr	r2, [r7, #8]
 800a00e:	0013      	movs	r3, r2
 800a010:	005b      	lsls	r3, r3, #1
 800a012:	189b      	adds	r3, r3, r2
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	3348      	adds	r3, #72	@ 0x48
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	18d3      	adds	r3, r2, r3
 800a01c:	3304      	adds	r3, #4
 800a01e:	e007      	b.n	800a030 <_stm32_ed_get+0x5e>
    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 800a020:	68ba      	ldr	r2, [r7, #8]
 800a022:	0013      	movs	r3, r2
 800a024:	005b      	lsls	r3, r3, #1
 800a026:	189b      	adds	r3, r3, r2
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	18d3      	adds	r3, r2, r3
 800a02e:	3304      	adds	r3, #4
}
 800a030:	0018      	movs	r0, r3
 800a032:	46bd      	mov	sp, r7
 800a034:	b004      	add	sp, #16
 800a036:	bd80      	pop	{r7, pc}

0800a038 <_ux_dcd_stm32_endpoint_status>:
/*                                            added bi-dir EP support,    */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_status(UX_DCD_STM32 *dcd_stm32, ULONG endpoint_index)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED      *ed;


    /* Fetch the address of the physical endpoint.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint_index);
 800a042:	683a      	ldr	r2, [r7, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	0011      	movs	r1, r2
 800a048:	0018      	movs	r0, r3
 800a04a:	f7ff ffc2 	bl	8009fd2 <_stm32_ed_get>
 800a04e:	0003      	movs	r3, r0
 800a050:	60fb      	str	r3, [r7, #12]

    /* Check the endpoint status, if it is free, we have a illegal endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	2201      	movs	r2, #1
 800a058:	4013      	ands	r3, r2
 800a05a:	d101      	bne.n	800a060 <_ux_dcd_stm32_endpoint_status+0x28>
        return(UX_ERROR);
 800a05c:	23ff      	movs	r3, #255	@ 0xff
 800a05e:	e007      	b.n	800a070 <_ux_dcd_stm32_endpoint_status+0x38>

    /* Check if the endpoint is stalled.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_STALLED) == 0)
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	2204      	movs	r2, #4
 800a066:	4013      	ands	r3, r2
 800a068:	d101      	bne.n	800a06e <_ux_dcd_stm32_endpoint_status+0x36>
        return(UX_FALSE);
 800a06a:	2300      	movs	r3, #0
 800a06c:	e000      	b.n	800a070 <_ux_dcd_stm32_endpoint_status+0x38>
    else
        return(UX_TRUE);
 800a06e:	2301      	movs	r3, #1
}
 800a070:	0018      	movs	r0, r3
 800a072:	46bd      	mov	sp, r7
 800a074:	b004      	add	sp, #16
 800a076:	bd80      	pop	{r7, pc}

0800a078 <_ux_dcd_stm32_frame_number_get>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_frame_number_get(UX_DCD_STM32 *dcd_stm32, ULONG *frame_number)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]

    /* This function never fails. */
    return(UX_SUCCESS);
 800a082:	2300      	movs	r3, #0
}
 800a084:	0018      	movs	r0, r3
 800a086:	46bd      	mov	sp, r7
 800a088:	b002      	add	sp, #8
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <_ux_dcd_stm32_function>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_function(UX_SLAVE_DCD *dcd, UINT function, VOID *parameter)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b086      	sub	sp, #24
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	607a      	str	r2, [r7, #4]
UINT             status;
UX_DCD_STM32     *dcd_stm32;


    /* Check the status of the controller.  */
    if (dcd -> ux_slave_dcd_status == UX_UNUSED)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d106      	bne.n	800a0ae <_ux_dcd_stm32_function+0x22>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_CONTROLLER_UNKNOWN);
 800a0a0:	2255      	movs	r2, #85	@ 0x55
 800a0a2:	2102      	movs	r1, #2
 800a0a4:	2002      	movs	r0, #2
 800a0a6:	f7fe fa95 	bl	80085d4 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONTROLLER_UNKNOWN, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_CONTROLLER_UNKNOWN);
 800a0aa:	2355      	movs	r3, #85	@ 0x55
 800a0ac:	e07e      	b.n	800a1ac <_ux_dcd_stm32_function+0x120>
    }

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 =  (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	69db      	ldr	r3, [r3, #28]
 800a0b2:	613b      	str	r3, [r7, #16]

    /* Look at the function and route it.  */
    switch(function)
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	3b0a      	subs	r3, #10
 800a0b8:	2b0b      	cmp	r3, #11
 800a0ba:	d86e      	bhi.n	800a19a <_ux_dcd_stm32_function+0x10e>
 800a0bc:	009a      	lsls	r2, r3, #2
 800a0be:	4b3d      	ldr	r3, [pc, #244]	@ (800a1b4 <_ux_dcd_stm32_function+0x128>)
 800a0c0:	18d3      	adds	r3, r2, r3
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	469f      	mov	pc, r3
    {

    case UX_DCD_GET_FRAME_NUMBER:

        status =  _ux_dcd_stm32_frame_number_get(dcd_stm32, (ULONG *) parameter);
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	0011      	movs	r1, r2
 800a0cc:	0018      	movs	r0, r3
 800a0ce:	f7ff ffd3 	bl	800a078 <_ux_dcd_stm32_frame_number_get>
 800a0d2:	0003      	movs	r3, r0
 800a0d4:	617b      	str	r3, [r7, #20]
        break;
 800a0d6:	e068      	b.n	800a1aa <_ux_dcd_stm32_function+0x11e>

    case UX_DCD_TRANSFER_REQUEST:

#if defined(UX_DEVICE_STANDALONE)
        status =  _ux_dcd_stm32_transfer_run(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	0011      	movs	r1, r2
 800a0de:	0018      	movs	r0, r3
 800a0e0:	f000 f98c 	bl	800a3fc <_ux_dcd_stm32_transfer_run>
 800a0e4:	0003      	movs	r3, r0
 800a0e6:	617b      	str	r3, [r7, #20]
#else
        status =  _ux_dcd_stm32_transfer_request(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
#endif /* defined(UX_DEVICE_STANDALONE) */
        break;
 800a0e8:	e05f      	b.n	800a1aa <_ux_dcd_stm32_function+0x11e>

    case UX_DCD_TRANSFER_ABORT:
        status = _ux_dcd_stm32_transfer_abort(dcd_stm32, parameter);
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	0011      	movs	r1, r2
 800a0f0:	0018      	movs	r0, r3
 800a0f2:	f000 f963 	bl	800a3bc <_ux_dcd_stm32_transfer_abort>
 800a0f6:	0003      	movs	r3, r0
 800a0f8:	617b      	str	r3, [r7, #20]
        break;
 800a0fa:	e056      	b.n	800a1aa <_ux_dcd_stm32_function+0x11e>

    case UX_DCD_CREATE_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_create(dcd_stm32, parameter);
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	0011      	movs	r1, r2
 800a102:	0018      	movs	r0, r3
 800a104:	f7ff feab 	bl	8009e5e <_ux_dcd_stm32_endpoint_create>
 800a108:	0003      	movs	r3, r0
 800a10a:	617b      	str	r3, [r7, #20]
        break;
 800a10c:	e04d      	b.n	800a1aa <_ux_dcd_stm32_function+0x11e>

    case UX_DCD_DESTROY_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_destroy(dcd_stm32, parameter);
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	0011      	movs	r1, r2
 800a114:	0018      	movs	r0, r3
 800a116:	f7ff fef1 	bl	8009efc <_ux_dcd_stm32_endpoint_destroy>
 800a11a:	0003      	movs	r3, r0
 800a11c:	617b      	str	r3, [r7, #20]
        break;
 800a11e:	e044      	b.n	800a1aa <_ux_dcd_stm32_function+0x11e>

    case UX_DCD_RESET_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_reset(dcd_stm32, parameter);
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	0011      	movs	r1, r2
 800a126:	0018      	movs	r0, r3
 800a128:	f7ff ff02 	bl	8009f30 <_ux_dcd_stm32_endpoint_reset>
 800a12c:	0003      	movs	r3, r0
 800a12e:	617b      	str	r3, [r7, #20]
        break;
 800a130:	e03b      	b.n	800a1aa <_ux_dcd_stm32_function+0x11e>

    case UX_DCD_STALL_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_stall(dcd_stm32, parameter);
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	0011      	movs	r1, r2
 800a138:	0018      	movs	r0, r3
 800a13a:	f7ff ff2b 	bl	8009f94 <_ux_dcd_stm32_endpoint_stall>
 800a13e:	0003      	movs	r3, r0
 800a140:	617b      	str	r3, [r7, #20]
        break;
 800a142:	e032      	b.n	800a1aa <_ux_dcd_stm32_function+0x11e>

    case UX_DCD_SET_DEVICE_ADDRESS:

        status =  HAL_PCD_SetAddress(dcd_stm32 -> pcd_handle, (uint8_t)(ULONG) parameter);
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	2294      	movs	r2, #148	@ 0x94
 800a148:	589b      	ldr	r3, [r3, r2]
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	b2d2      	uxtb	r2, r2
 800a14e:	0011      	movs	r1, r2
 800a150:	0018      	movs	r0, r3
 800a152:	f7f8 fb61 	bl	8002818 <HAL_PCD_SetAddress>
 800a156:	0003      	movs	r3, r0
 800a158:	617b      	str	r3, [r7, #20]
        break;
 800a15a:	e026      	b.n	800a1aa <_ux_dcd_stm32_function+0x11e>

    case UX_DCD_CHANGE_STATE:

        if ((ULONG) parameter == UX_DEVICE_FORCE_DISCONNECT)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2b0b      	cmp	r3, #11
 800a160:	d108      	bne.n	800a174 <_ux_dcd_stm32_function+0xe8>
        {
          /* Disconnect the USB device */
          status =  HAL_PCD_Stop(dcd_stm32 -> pcd_handle);
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	2294      	movs	r2, #148	@ 0x94
 800a166:	589b      	ldr	r3, [r3, r2]
 800a168:	0018      	movs	r0, r3
 800a16a:	f7f8 fa24 	bl	80025b6 <HAL_PCD_Stop>
 800a16e:	0003      	movs	r3, r0
 800a170:	617b      	str	r3, [r7, #20]
        else
        {
          status = UX_SUCCESS;
        }

        break;
 800a172:	e01a      	b.n	800a1aa <_ux_dcd_stm32_function+0x11e>
          status = UX_SUCCESS;
 800a174:	2300      	movs	r3, #0
 800a176:	617b      	str	r3, [r7, #20]
        break;
 800a178:	e017      	b.n	800a1aa <_ux_dcd_stm32_function+0x11e>

    case UX_DCD_ENDPOINT_STATUS:

        status =  _ux_dcd_stm32_endpoint_status(dcd_stm32, (ULONG) parameter);
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	0011      	movs	r1, r2
 800a180:	0018      	movs	r0, r3
 800a182:	f7ff ff59 	bl	800a038 <_ux_dcd_stm32_endpoint_status>
 800a186:	0003      	movs	r3, r0
 800a188:	617b      	str	r3, [r7, #20]
        break;
 800a18a:	e00e      	b.n	800a1aa <_ux_dcd_stm32_function+0x11e>

#if defined(UX_DEVICE_STANDALONE)
    case UX_DCD_ISR_PENDING:

        _ux_dcd_stm32_setup_isr_pending(dcd_stm32);
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	0018      	movs	r0, r3
 800a190:	f7ff fb70 	bl	8009874 <_ux_dcd_stm32_setup_isr_pending>
        status = UX_SUCCESS;
 800a194:	2300      	movs	r3, #0
 800a196:	617b      	str	r3, [r7, #20]
        break;
 800a198:	e007      	b.n	800a1aa <_ux_dcd_stm32_function+0x11e>
#endif /* defined(UX_DEVICE_STANDALONE) */

    default:

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_FUNCTION_NOT_SUPPORTED);
 800a19a:	2254      	movs	r2, #84	@ 0x54
 800a19c:	2102      	movs	r1, #2
 800a19e:	2002      	movs	r0, #2
 800a1a0:	f7fe fa18 	bl	80085d4 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        status =  UX_FUNCTION_NOT_SUPPORTED;
 800a1a4:	2354      	movs	r3, #84	@ 0x54
 800a1a6:	617b      	str	r3, [r7, #20]
        break;
 800a1a8:	46c0      	nop			@ (mov r8, r8)
    }

    /* Return completion status.  */
    return(status);
 800a1aa:	697b      	ldr	r3, [r7, #20]
}
 800a1ac:	0018      	movs	r0, r3
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	b006      	add	sp, #24
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	0800d1d8 	.word	0x0800d1d8

0800a1b8 <_ux_dcd_stm32_initialize>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize(ULONG dcd_io, ULONG parameter)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]


    UX_PARAMETER_NOT_USED(dcd_io);

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800a1c2:	4b13      	ldr	r3, [pc, #76]	@ (800a210 <_ux_dcd_stm32_initialize+0x58>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	60fb      	str	r3, [r7, #12]

    /* The controller initialized here is of STM32 type.  */
    dcd -> ux_slave_dcd_controller_type =  UX_DCD_STM32_SLAVE_CONTROLLER;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2280      	movs	r2, #128	@ 0x80
 800a1cc:	605a      	str	r2, [r3, #4]

    /* Allocate memory for this STM32 DCD instance.  */
    dcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DCD_STM32));
 800a1ce:	2298      	movs	r2, #152	@ 0x98
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	2000      	movs	r0, #0
 800a1d4:	f7fe fb4a 	bl	800886c <_ux_utility_memory_allocate>
 800a1d8:	0003      	movs	r3, r0
 800a1da:	60bb      	str	r3, [r7, #8]

    /* Check if memory was properly allocated.  */
    if(dcd_stm32 == UX_NULL)
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d101      	bne.n	800a1e6 <_ux_dcd_stm32_initialize+0x2e>
        return(UX_MEMORY_INSUFFICIENT);
 800a1e2:	2312      	movs	r3, #18
 800a1e4:	e010      	b.n	800a208 <_ux_dcd_stm32_initialize+0x50>

    /* Set the pointer to the STM32 DCD.  */
    dcd -> ux_slave_dcd_controller_hardware =  (VOID *) dcd_stm32;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	68ba      	ldr	r2, [r7, #8]
 800a1ea:	61da      	str	r2, [r3, #28]

    /* Set the generic DCD owner for the STM32 DCD.  */
    dcd_stm32 -> ux_dcd_stm32_dcd_owner =  dcd;
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	601a      	str	r2, [r3, #0]

    /* Initialize the function collector for this DCD.  */
    dcd -> ux_slave_dcd_function =  _ux_dcd_stm32_function;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	4a07      	ldr	r2, [pc, #28]	@ (800a214 <_ux_dcd_stm32_initialize+0x5c>)
 800a1f6:	619a      	str	r2, [r3, #24]

    dcd_stm32 -> pcd_handle = (PCD_HandleTypeDef *)parameter;
 800a1f8:	683a      	ldr	r2, [r7, #0]
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	2194      	movs	r1, #148	@ 0x94
 800a1fe:	505a      	str	r2, [r3, r1]

    /* Set the state of the controller to OPERATIONAL now.  */
    dcd -> ux_slave_dcd_status =  UX_DCD_STATUS_OPERATIONAL;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2201      	movs	r2, #1
 800a204:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */
    return(UX_SUCCESS);
 800a206:	2300      	movs	r3, #0
}
 800a208:	0018      	movs	r0, r3
 800a20a:	46bd      	mov	sp, r7
 800a20c:	b004      	add	sp, #16
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	200015a0 	.word	0x200015a0
 800a214:	0800a08d 	.word	0x0800a08d

0800a218 <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b086      	sub	sp, #24
 800a21c:	af00      	add	r7, sp, #0
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800a21e:	4b64      	ldr	r3, [pc, #400]	@ (800a3b0 <_ux_dcd_stm32_initialize_complete+0x198>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	69db      	ldr	r3, [r3, #28]
 800a228:	613b      	str	r3, [r7, #16]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800a22a:	4b61      	ldr	r3, [pc, #388]	@ (800a3b0 <_ux_dcd_stm32_initialize_complete+0x198>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	3324      	adds	r3, #36	@ 0x24
 800a230:	60fb      	str	r3, [r7, #12]

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 800a232:	4b5f      	ldr	r3, [pc, #380]	@ (800a3b0 <_ux_dcd_stm32_initialize_complete+0x198>)
 800a234:	681a      	ldr	r2, [r3, #0]
 800a236:	23ae      	movs	r3, #174	@ 0xae
 800a238:	005b      	lsls	r3, r3, #1
 800a23a:	58d3      	ldr	r3, [r2, r3]
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d110      	bne.n	800a262 <_ux_dcd_stm32_initialize_complete+0x4a>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
 800a240:	4b5b      	ldr	r3, [pc, #364]	@ (800a3b0 <_ux_dcd_stm32_initialize_complete+0x198>)
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	4b5a      	ldr	r3, [pc, #360]	@ (800a3b0 <_ux_dcd_stm32_initialize_complete+0x198>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	21f4      	movs	r1, #244	@ 0xf4
 800a24a:	5852      	ldr	r2, [r2, r1]
 800a24c:	21cc      	movs	r1, #204	@ 0xcc
 800a24e:	505a      	str	r2, [r3, r1]
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 800a250:	4b57      	ldr	r3, [pc, #348]	@ (800a3b0 <_ux_dcd_stm32_initialize_complete+0x198>)
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	4b56      	ldr	r3, [pc, #344]	@ (800a3b0 <_ux_dcd_stm32_initialize_complete+0x198>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	21f8      	movs	r1, #248	@ 0xf8
 800a25a:	5852      	ldr	r2, [r2, r1]
 800a25c:	21d0      	movs	r1, #208	@ 0xd0
 800a25e:	505a      	str	r2, [r3, r1]
 800a260:	e02d      	b.n	800a2be <_ux_dcd_stm32_initialize_complete+0xa6>
    }
    else
    {

        /* Set State to App Idle. */
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 800a262:	4b53      	ldr	r3, [pc, #332]	@ (800a3b0 <_ux_dcd_stm32_initialize_complete+0x198>)
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	23ae      	movs	r3, #174	@ 0xae
 800a268:	005b      	lsls	r3, r3, #1
 800a26a:	2100      	movs	r1, #0
 800a26c:	50d1      	str	r1, [r2, r3]

        /* Check the speed and set the correct descriptor.  */
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 800a26e:	4b50      	ldr	r3, [pc, #320]	@ (800a3b0 <_ux_dcd_stm32_initialize_complete+0x198>)
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	23a0      	movs	r3, #160	@ 0xa0
 800a274:	005b      	lsls	r3, r3, #1
 800a276:	58d3      	ldr	r3, [r2, r3]
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d110      	bne.n	800a29e <_ux_dcd_stm32_initialize_complete+0x86>
        {

            /* The device is operating at full speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800a27c:	4b4c      	ldr	r3, [pc, #304]	@ (800a3b0 <_ux_dcd_stm32_initialize_complete+0x198>)
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	4b4b      	ldr	r3, [pc, #300]	@ (800a3b0 <_ux_dcd_stm32_initialize_complete+0x198>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	21d4      	movs	r1, #212	@ 0xd4
 800a286:	5852      	ldr	r2, [r2, r1]
 800a288:	21cc      	movs	r1, #204	@ 0xcc
 800a28a:	505a      	str	r2, [r3, r1]
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800a28c:	4b48      	ldr	r3, [pc, #288]	@ (800a3b0 <_ux_dcd_stm32_initialize_complete+0x198>)
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	4b47      	ldr	r3, [pc, #284]	@ (800a3b0 <_ux_dcd_stm32_initialize_complete+0x198>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	21d8      	movs	r1, #216	@ 0xd8
 800a296:	5852      	ldr	r2, [r2, r1]
 800a298:	21d0      	movs	r1, #208	@ 0xd0
 800a29a:	505a      	str	r2, [r3, r1]
 800a29c:	e00f      	b.n	800a2be <_ux_dcd_stm32_initialize_complete+0xa6>
        }
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
 800a29e:	4b44      	ldr	r3, [pc, #272]	@ (800a3b0 <_ux_dcd_stm32_initialize_complete+0x198>)
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	4b43      	ldr	r3, [pc, #268]	@ (800a3b0 <_ux_dcd_stm32_initialize_complete+0x198>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	21dc      	movs	r1, #220	@ 0xdc
 800a2a8:	5852      	ldr	r2, [r2, r1]
 800a2aa:	21cc      	movs	r1, #204	@ 0xcc
 800a2ac:	505a      	str	r2, [r3, r1]
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 800a2ae:	4b40      	ldr	r3, [pc, #256]	@ (800a3b0 <_ux_dcd_stm32_initialize_complete+0x198>)
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	4b3f      	ldr	r3, [pc, #252]	@ (800a3b0 <_ux_dcd_stm32_initialize_complete+0x198>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	21e0      	movs	r1, #224	@ 0xe0
 800a2b8:	5852      	ldr	r2, [r2, r1]
 800a2ba:	21d0      	movs	r1, #208	@ 0xd0
 800a2bc:	505a      	str	r2, [r3, r1]
        }
    }

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800a2be:	4b3c      	ldr	r3, [pc, #240]	@ (800a3b0 <_ux_dcd_stm32_initialize_complete+0x198>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	22cc      	movs	r2, #204	@ 0xcc
 800a2c4:	589b      	ldr	r3, [r3, r2]
 800a2c6:	60bb      	str	r3, [r7, #8]

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
                                _ux_system_device_descriptor_structure,
                                UX_DEVICE_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	3304      	adds	r3, #4
    _ux_utility_descriptor_parse(device_framework,
 800a2cc:	4939      	ldr	r1, [pc, #228]	@ (800a3b4 <_ux_dcd_stm32_initialize_complete+0x19c>)
 800a2ce:	68b8      	ldr	r0, [r7, #8]
 800a2d0:	220e      	movs	r2, #14
 800a2d2:	f7fe fa53 	bl	800877c <_ux_utility_descriptor_parse>

    /* Now we create a transfer request to accept the first SETUP packet
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	3338      	adds	r3, #56	@ 0x38
 800a2da:	607b      	str	r3, [r7, #4]

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4a36      	ldr	r2, [pc, #216]	@ (800a3b8 <_ux_dcd_stm32_initialize_complete+0x1a0>)
 800a2e0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	611a      	str	r2, [r3, #16]

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	3318      	adds	r3, #24
 800a2ee:	001a      	movs	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	609a      	str	r2, [r3, #8]

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	7ada      	ldrb	r2, [r3, #11]
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	821a      	strh	r2, [r3, #16]

    /* On the control endpoint, always expect the maximum.  */
    transfer_request -> ux_slave_transfer_request_requested_length =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	7adb      	ldrb	r3, [r3, #11]
 800a302:	001a      	movs	r2, r3
    transfer_request -> ux_slave_transfer_request_requested_length =
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	615a      	str	r2, [r3, #20]

    /* Attach the control endpoint to the transfer request.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	3318      	adds	r3, #24
 800a30c:	001a      	movs	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	609a      	str	r2, [r3, #8]

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	699b      	ldr	r3, [r3, #24]
                                    (VOID *) &device -> ux_slave_device_control_endpoint);
 800a316:	68fa      	ldr	r2, [r7, #12]
 800a318:	3218      	adds	r2, #24
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 800a31a:	6978      	ldr	r0, [r7, #20]
 800a31c:	210e      	movs	r1, #14
 800a31e:	4798      	blx	r3

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	2294      	movs	r2, #148	@ 0x94
 800a324:	589b      	ldr	r3, [r3, r2]
 800a326:	2100      	movs	r1, #0
 800a328:	0018      	movs	r0, r3
 800a32a:	f7f8 fcde 	bl	8002cea <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	2294      	movs	r2, #148	@ 0x94
 800a332:	5898      	ldr	r0, [r3, r2]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	7adb      	ldrb	r3, [r3, #11]
 800a338:	001a      	movs	r2, r3
 800a33a:	2300      	movs	r3, #0
 800a33c:	2100      	movs	r1, #0
 800a33e:	f7f8 fa95 	bl	800286c <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	2294      	movs	r2, #148	@ 0x94
 800a346:	589b      	ldr	r3, [r3, r2]
 800a348:	2180      	movs	r1, #128	@ 0x80
 800a34a:	0018      	movs	r0, r3
 800a34c:	f7f8 fccd 	bl	8002cea <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	2294      	movs	r2, #148	@ 0x94
 800a354:	5898      	ldr	r0, [r3, r2]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	7adb      	ldrb	r3, [r3, #11]
 800a35a:	001a      	movs	r2, r3
 800a35c:	2300      	movs	r3, #0
 800a35e:	2180      	movs	r1, #128	@ 0x80
 800a360:	f7f8 fa84 	bl	800286c <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	61da      	str	r2, [r3, #28]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2201      	movs	r2, #1
 800a36e:	605a      	str	r2, [r3, #4]

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2201      	movs	r2, #1
 800a374:	601a      	str	r2, [r3, #0]

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2208      	movs	r2, #8
 800a37a:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2208      	movs	r2, #8
 800a380:	61da      	str	r2, [r3, #28]

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	619a      	str	r2, [r3, #24]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800a388:	4b09      	ldr	r3, [pc, #36]	@ (800a3b0 <_ux_dcd_stm32_initialize_complete+0x198>)
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	23b2      	movs	r3, #178	@ 0xb2
 800a38e:	005b      	lsls	r3, r3, #1
 800a390:	58d3      	ldr	r3, [r2, r3]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d006      	beq.n	800a3a4 <_ux_dcd_stm32_initialize_complete+0x18c>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 800a396:	4b06      	ldr	r3, [pc, #24]	@ (800a3b0 <_ux_dcd_stm32_initialize_complete+0x198>)
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	23b2      	movs	r3, #178	@ 0xb2
 800a39c:	005b      	lsls	r3, r3, #1
 800a39e:	58d3      	ldr	r3, [r2, r3]
 800a3a0:	2001      	movs	r0, #1
 800a3a2:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
 800a3a4:	2300      	movs	r3, #0
}
 800a3a6:	0018      	movs	r0, r3
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	b006      	add	sp, #24
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	46c0      	nop			@ (mov r8, r8)
 800a3b0:	200015a0 	.word	0x200015a0
 800a3b4:	20000050 	.word	0x20000050
 800a3b8:	00002710 	.word	0x00002710

0800a3bc <_ux_dcd_stm32_transfer_abort>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_abort(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]

   UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	60fb      	str	r3, [r7, #12]

    HAL_PCD_EP_Abort(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2294      	movs	r2, #148	@ 0x94
 800a3d0:	589a      	ldr	r2, [r3, r2]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	7b9b      	ldrb	r3, [r3, #14]
 800a3d6:	0019      	movs	r1, r3
 800a3d8:	0010      	movs	r0, r2
 800a3da:	f7f8 fc4f 	bl	8002c7c <HAL_PCD_EP_Abort>
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2294      	movs	r2, #148	@ 0x94
 800a3e2:	589a      	ldr	r2, [r3, r2]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	7b9b      	ldrb	r3, [r3, #14]
 800a3e8:	0019      	movs	r1, r3
 800a3ea:	0010      	movs	r0, r2
 800a3ec:	f7f8 fc7d 	bl	8002cea <HAL_PCD_EP_Flush>

    /* No semaphore put here since it's already done in stack.  */
#endif /* USBD_HAL_TRANSFER_ABORT_NOT_SUPPORTED */

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 800a3f0:	2300      	movs	r3, #0
}
 800a3f2:	0018      	movs	r0, r3
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	b004      	add	sp, #16
 800a3f8:	bd80      	pop	{r7, pc}
	...

0800a3fc <_ux_dcd_stm32_transfer_run>:
/*                                            controller,                 */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_run(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b086      	sub	sp, #24
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
UX_DCD_STM32_ED         *ed;
ULONG                   ed_status;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	617b      	str	r3, [r7, #20]

    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	613b      	str	r3, [r7, #16]

    UX_DISABLE
 800a412:	f7f6 fd47 	bl	8000ea4 <_ux_utility_interrupt_disable>
 800a416:	0003      	movs	r3, r0
 800a418:	60fb      	str	r3, [r7, #12]

    /* Get current ED status.  */
    ed_status = ed -> ux_dcd_stm32_ed_status;
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	60bb      	str	r3, [r7, #8]

    /* Invalid state.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state == UX_DEVICE_RESET)
 800a420:	4b2f      	ldr	r3, [pc, #188]	@ (800a4e0 <_ux_dcd_stm32_transfer_run+0xe4>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a426:	2b00      	cmp	r3, #0
 800a428:	d108      	bne.n	800a43c <_ux_dcd_stm32_transfer_run+0x40>
    {
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_BUS_RESET;
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	2226      	movs	r2, #38	@ 0x26
 800a42e:	625a      	str	r2, [r3, #36]	@ 0x24
        UX_RESTORE
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	0018      	movs	r0, r3
 800a434:	f7f6 fd45 	bl	8000ec2 <_ux_utility_interrupt_restore>
        return(UX_STATE_EXIT);
 800a438:	2301      	movs	r3, #1
 800a43a:	e04c      	b.n	800a4d6 <_ux_dcd_stm32_transfer_run+0xda>
    }

    /* ED stalled.  */
    if (ed_status & UX_DCD_STM32_ED_STATUS_STALLED)
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	2204      	movs	r2, #4
 800a440:	4013      	ands	r3, r2
 800a442:	d008      	beq.n	800a456 <_ux_dcd_stm32_transfer_run+0x5a>
    {
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_STALLED;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	2221      	movs	r2, #33	@ 0x21
 800a448:	625a      	str	r2, [r3, #36]	@ 0x24
        UX_RESTORE
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	0018      	movs	r0, r3
 800a44e:	f7f6 fd38 	bl	8000ec2 <_ux_utility_interrupt_restore>
        return(UX_STATE_NEXT);
 800a452:	2304      	movs	r3, #4
 800a454:	e03f      	b.n	800a4d6 <_ux_dcd_stm32_transfer_run+0xda>
    }

    /* ED transfer in progress.  */
    if (ed_status & UX_DCD_STM32_ED_STATUS_TRANSFER)
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	2202      	movs	r2, #2
 800a45a:	4013      	ands	r3, r2
 800a45c:	d015      	beq.n	800a48a <_ux_dcd_stm32_transfer_run+0x8e>
    {
        if (ed_status & UX_DCD_STM32_ED_STATUS_DONE)
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	2208      	movs	r2, #8
 800a462:	4013      	ands	r3, r2
 800a464:	d00b      	beq.n	800a47e <_ux_dcd_stm32_transfer_run+0x82>
        {

            /* Keep used, stall and task pending bits.  */
            ed -> ux_dcd_stm32_ed_status &= (UX_DCD_STM32_ED_STATUS_USED |
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	4a1e      	ldr	r2, [pc, #120]	@ (800a4e4 <_ux_dcd_stm32_transfer_run+0xe8>)
 800a46c:	401a      	ands	r2, r3
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	605a      	str	r2, [r3, #4]
                                        UX_DCD_STM32_ED_STATUS_STALLED |
                                        UX_DCD_STM32_ED_STATUS_TASK_PENDING);
            UX_RESTORE
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	0018      	movs	r0, r3
 800a476:	f7f6 fd24 	bl	8000ec2 <_ux_utility_interrupt_restore>
            return(UX_STATE_NEXT);
 800a47a:	2304      	movs	r3, #4
 800a47c:	e02b      	b.n	800a4d6 <_ux_dcd_stm32_transfer_run+0xda>
        }
        UX_RESTORE
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	0018      	movs	r0, r3
 800a482:	f7f6 fd1e 	bl	8000ec2 <_ux_utility_interrupt_restore>
        return(UX_STATE_WAIT);
 800a486:	2305      	movs	r3, #5
 800a488:	e025      	b.n	800a4d6 <_ux_dcd_stm32_transfer_run+0xda>
    }


    /* Start transfer.  */
    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_TRANSFER;
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	2202      	movs	r2, #2
 800a490:	431a      	orrs	r2, r3
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	605a      	str	r2, [r3, #4]

    /* Check for transfer direction.  Is this a IN endpoint ? */
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a49a:	2b03      	cmp	r3, #3
 800a49c:	d10b      	bne.n	800a4b6 <_ux_dcd_stm32_transfer_run+0xba>
    {

        /* Transmit data.  */
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2294      	movs	r2, #148	@ 0x94
 800a4a2:	5898      	ldr	r0, [r3, r2]
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	7b99      	ldrb	r1, [r3, #14]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
                            transfer_request->ux_slave_transfer_request_data_pointer,
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	695b      	ldr	r3, [r3, #20]
 800a4b0:	f7f8 faee 	bl	8002a90 <HAL_PCD_EP_Transmit>
 800a4b4:	e00a      	b.n	800a4cc <_ux_dcd_stm32_transfer_run+0xd0>
    else
    {

        /* We have a request for a SETUP or OUT Endpoint.  */
        /* Receive data.  */
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2294      	movs	r2, #148	@ 0x94
 800a4ba:	5898      	ldr	r0, [r3, r2]
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	7b99      	ldrb	r1, [r3, #14]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
                            transfer_request->ux_slave_transfer_request_data_pointer,
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	695b      	ldr	r3, [r3, #20]
 800a4c8:	f7f8 fa92 	bl	80029f0 <HAL_PCD_EP_Receive>
                            transfer_request->ux_slave_transfer_request_requested_length);
    }

    /* Return to caller with WAIT.  */
    UX_RESTORE
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	0018      	movs	r0, r3
 800a4d0:	f7f6 fcf7 	bl	8000ec2 <_ux_utility_interrupt_restore>
    return(UX_STATE_WAIT);
 800a4d4:	2305      	movs	r3, #5
}
 800a4d6:	0018      	movs	r0, r3
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	b006      	add	sp, #24
 800a4dc:	bd80      	pop	{r7, pc}
 800a4de:	46c0      	nop			@ (mov r8, r8)
 800a4e0:	200015a0 	.word	0x200015a0
 800a4e4:	00000405 	.word	0x00000405

0800a4e8 <_ux_device_stack_alternate_setting_get>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_get(ULONG interface_value)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b088      	sub	sp, #32
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800a4f0:	4b1c      	ldr	r3, [pc, #112]	@ (800a564 <_ux_device_stack_alternate_setting_get+0x7c>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	3324      	adds	r3, #36	@ 0x24
 800a4f6:	61bb      	str	r3, [r7, #24]

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2b03      	cmp	r3, #3
 800a4fe:	d12b      	bne.n	800a558 <_ux_device_stack_alternate_setting_get+0x70>
    {

        /* Obtain the pointer to the first interface attached.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	2290      	movs	r2, #144	@ 0x90
 800a504:	589b      	ldr	r3, [r3, r2]
 800a506:	61fb      	str	r3, [r7, #28]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Start parsing each interface.  */
        while (interface_ptr != UX_NULL)
 800a508:	e023      	b.n	800a552 <_ux_device_stack_alternate_setting_get+0x6a>
        if (interface_ptr != UX_NULL)
#endif
        {

            /* Check if this is the interface we have an inquiry for.  */
            if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	7b9b      	ldrb	r3, [r3, #14]
 800a50e:	001a      	movs	r2, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4293      	cmp	r3, r2
 800a514:	d11a      	bne.n	800a54c <_ux_device_stack_alternate_setting_get+0x64>
            {

                /* Get the control endpoint of the device.  */                
                endpoint =  &device -> ux_slave_device_control_endpoint;
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	3318      	adds	r3, #24
 800a51a:	617b      	str	r3, [r7, #20]

                /* Get the pointer to the transfer request associated with the endpoint.  */
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	3320      	adds	r3, #32
 800a520:	613b      	str	r3, [r7, #16]

                /* Set the value of the alternate setting in the buffer.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	68db      	ldr	r3, [r3, #12]
                            (UCHAR) interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting;
 800a526:	69fa      	ldr	r2, [r7, #28]
 800a528:	7bd2      	ldrb	r2, [r2, #15]
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 800a52a:	701a      	strb	r2, [r3, #0]

                /* Setup the length appropriately.  */
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	2201      	movs	r2, #1
 800a530:	615a      	str	r2, [r3, #20]

                /* Set the phase of the transfer to data out.  */
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	2203      	movs	r2, #3
 800a536:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Send the descriptor with the appropriate length to the host.  */
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	2201      	movs	r2, #1
 800a53c:	2101      	movs	r1, #1
 800a53e:	0018      	movs	r0, r3
 800a540:	f001 fd49 	bl	800bfd6 <_ux_device_stack_transfer_request>
 800a544:	0003      	movs	r3, r0
 800a546:	60fb      	str	r3, [r7, #12]

                /* Return the function status.  */
                return(status);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	e006      	b.n	800a55a <_ux_device_stack_alternate_setting_get+0x72>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	699b      	ldr	r3, [r3, #24]
 800a550:	61fb      	str	r3, [r7, #28]
        while (interface_ptr != UX_NULL)
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d1d8      	bne.n	800a50a <_ux_device_stack_alternate_setting_get+0x22>
#endif
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 800a558:	23ff      	movs	r3, #255	@ 0xff
}
 800a55a:	0018      	movs	r0, r3
 800a55c:	46bd      	mov	sp, r7
 800a55e:	b008      	add	sp, #32
 800a560:	bd80      	pop	{r7, pc}
 800a562:	46c0      	nop			@ (mov r8, r8)
 800a564:	200015a0 	.word	0x200015a0

0800a568 <_ux_device_stack_alternate_setting_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 800a568:	b590      	push	{r4, r7, lr}
 800a56a:	b0a5      	sub	sp, #148	@ 0x94
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value, alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800a572:	4bd8      	ldr	r3, [pc, #864]	@ (800a8d4 <_ux_device_stack_alternate_setting_set+0x36c>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	3324      	adds	r3, #36	@ 0x24
 800a578:	673b      	str	r3, [r7, #112]	@ 0x70

    /* Protocol error must be reported when it's unconfigured */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800a57a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2b03      	cmp	r3, #3
 800a580:	d001      	beq.n	800a586 <_ux_device_stack_alternate_setting_set+0x1e>
        return(UX_FUNCTION_NOT_SUPPORTED);
 800a582:	2354      	movs	r3, #84	@ 0x54
 800a584:	e222      	b.n	800a9cc <_ux_device_stack_alternate_setting_set+0x464>

    /* Find the current interface.  */
    interface_ptr =  device -> ux_slave_device_first_interface;
 800a586:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a588:	2290      	movs	r2, #144	@ 0x90
 800a58a:	589b      	ldr	r3, [r3, r2]
 800a58c:	228c      	movs	r2, #140	@ 0x8c
 800a58e:	18ba      	adds	r2, r7, r2
 800a590:	6013      	str	r3, [r2, #0]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    /* Scan all interfaces if any. */
    while (interface_ptr != UX_NULL)
 800a592:	e00c      	b.n	800a5ae <_ux_device_stack_alternate_setting_set+0x46>
    {

        if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 800a594:	218c      	movs	r1, #140	@ 0x8c
 800a596:	187b      	adds	r3, r7, r1
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	7b9b      	ldrb	r3, [r3, #14]
 800a59c:	001a      	movs	r2, r3
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d00a      	beq.n	800a5ba <_ux_device_stack_alternate_setting_set+0x52>
            break;
        else
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800a5a4:	187b      	adds	r3, r7, r1
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	187a      	adds	r2, r7, r1
 800a5ac:	6013      	str	r3, [r2, #0]
    while (interface_ptr != UX_NULL)
 800a5ae:	238c      	movs	r3, #140	@ 0x8c
 800a5b0:	18fb      	adds	r3, r7, r3
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d1ed      	bne.n	800a594 <_ux_device_stack_alternate_setting_set+0x2c>
 800a5b8:	e000      	b.n	800a5bc <_ux_device_stack_alternate_setting_set+0x54>
            break;
 800a5ba:	46c0      	nop			@ (mov r8, r8)
        interface_ptr = UX_NULL;
#endif

    /* We must have found the interface pointer for the interface value
       requested by the caller.  */
    if (interface_ptr == UX_NULL)
 800a5bc:	238c      	movs	r3, #140	@ 0x8c
 800a5be:	18fb      	adds	r3, r7, r3
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d106      	bne.n	800a5d4 <_ux_device_stack_alternate_setting_set+0x6c>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_INTERFACE_HANDLE_UNKNOWN);
 800a5c6:	2252      	movs	r2, #82	@ 0x52
 800a5c8:	2107      	movs	r1, #7
 800a5ca:	2002      	movs	r0, #2
 800a5cc:	f7fe f802 	bl	80085d4 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, interface_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_INTERFACE_HANDLE_UNKNOWN);
 800a5d0:	2352      	movs	r3, #82	@ 0x52
 800a5d2:	e1fb      	b.n	800a9cc <_ux_device_stack_alternate_setting_set+0x464>
    }

    /* If the host is requesting a change of alternate setting to the current one,
       we do not need to do any work.  */
    if (interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 800a5d4:	238c      	movs	r3, #140	@ 0x8c
 800a5d6:	18fb      	adds	r3, r7, r3
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	7bdb      	ldrb	r3, [r3, #15]
 800a5dc:	001a      	movs	r2, r3
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d101      	bne.n	800a5e8 <_ux_device_stack_alternate_setting_set+0x80>
        return(UX_SUCCESS);       
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	e1f1      	b.n	800a9cc <_ux_device_stack_alternate_setting_set+0x464>

    return(UX_FUNCTION_NOT_SUPPORTED);
#else

    /* Get the pointer to the DCD. */
    dcd =  &_ux_system_slave->ux_system_slave_dcd;
 800a5e8:	4bba      	ldr	r3, [pc, #744]	@ (800a8d4 <_ux_device_stack_alternate_setting_set+0x36c>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* We may have multiple configurations!  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800a5ee:	4bb9      	ldr	r3, [pc, #740]	@ (800a8d4 <_ux_device_stack_alternate_setting_set+0x36c>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	22cc      	movs	r2, #204	@ 0xcc
 800a5f4:	589b      	ldr	r3, [r3, r2]
 800a5f6:	2288      	movs	r2, #136	@ 0x88
 800a5f8:	18ba      	adds	r2, r7, r2
 800a5fa:	6013      	str	r3, [r2, #0]
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800a5fc:	4bb5      	ldr	r3, [pc, #724]	@ (800a8d4 <_ux_device_stack_alternate_setting_set+0x36c>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	22d0      	movs	r2, #208	@ 0xd0
 800a602:	589b      	ldr	r3, [r3, r2]
 800a604:	2284      	movs	r2, #132	@ 0x84
 800a606:	18ba      	adds	r2, r7, r2
 800a608:	6013      	str	r3, [r2, #0]

    /* Parse the device framework and locate a configuration descriptor. */
    while (device_framework_length != 0)
 800a60a:	e1d8      	b.n	800a9be <_ux_device_stack_alternate_setting_set+0x456>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800a60c:	2088      	movs	r0, #136	@ 0x88
 800a60e:	183b      	adds	r3, r7, r0
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* And its length.  */
        descriptor_type =*  (device_framework + 1);
 800a616:	2167      	movs	r1, #103	@ 0x67
 800a618:	187b      	adds	r3, r7, r1
 800a61a:	183a      	adds	r2, r7, r0
 800a61c:	6812      	ldr	r2, [r2, #0]
 800a61e:	7852      	ldrb	r2, [r2, #1]
 800a620:	701a      	strb	r2, [r3, #0]
                
        /* Check if this is a configuration descriptor. */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800a622:	187b      	adds	r3, r7, r1
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	2b02      	cmp	r3, #2
 800a628:	d000      	beq.n	800a62c <_ux_device_stack_alternate_setting_set+0xc4>
 800a62a:	e1ba      	b.n	800a9a2 <_ux_device_stack_alternate_setting_set+0x43a>
        {

            /* Parse the descriptor in something more readable. */
            _ux_utility_descriptor_parse(device_framework,
 800a62c:	2444      	movs	r4, #68	@ 0x44
 800a62e:	193b      	adds	r3, r7, r4
 800a630:	49a9      	ldr	r1, [pc, #676]	@ (800a8d8 <_ux_device_stack_alternate_setting_set+0x370>)
 800a632:	183a      	adds	r2, r7, r0
 800a634:	6810      	ldr	r0, [r2, #0]
 800a636:	2208      	movs	r2, #8
 800a638:	f7fe f8a0 	bl	800877c <_ux_utility_descriptor_parse>
                        _ux_system_configuration_descriptor_structure,
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value.  */
            if (configuration_descriptor.bConfigurationValue == device -> ux_slave_device_configuration_selected)
 800a63c:	0020      	movs	r0, r4
 800a63e:	183b      	adds	r3, r7, r0
 800a640:	795b      	ldrb	r3, [r3, #5]
 800a642:	0019      	movs	r1, r3
 800a644:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a646:	2280      	movs	r2, #128	@ 0x80
 800a648:	589b      	ldr	r3, [r3, r2]
 800a64a:	4299      	cmp	r1, r3
 800a64c:	d000      	beq.n	800a650 <_ux_device_stack_alternate_setting_set+0xe8>
 800a64e:	e1a8      	b.n	800a9a2 <_ux_device_stack_alternate_setting_set+0x43a>
            {

                /* Limit the search in current configuration descriptor. */
                device_framework_length = configuration_descriptor.wTotalLength;
 800a650:	183b      	adds	r3, r7, r0
 800a652:	885b      	ldrh	r3, [r3, #2]
 800a654:	2284      	movs	r2, #132	@ 0x84
 800a656:	18ba      	adds	r2, r7, r2
 800a658:	6013      	str	r3, [r2, #0]

                /* We have found the configuration value that was selected by the host   
                   We need to scan all the interface descriptors following this
                   configuration descriptor and locate the interface for which the alternate
                   setting must be changed. */
                while (device_framework_length != 0)
 800a65a:	e19b      	b.n	800a994 <_ux_device_stack_alternate_setting_set+0x42c>
                {

                    /* Get the length of the current descriptor.  */
                    descriptor_length =  (ULONG) *device_framework;
 800a65c:	2088      	movs	r0, #136	@ 0x88
 800a65e:	183b      	adds	r3, r7, r0
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	66bb      	str	r3, [r7, #104]	@ 0x68

                    /* And its type.  */
                    descriptor_type = *(device_framework + 1); 
 800a666:	2167      	movs	r1, #103	@ 0x67
 800a668:	187b      	adds	r3, r7, r1
 800a66a:	183a      	adds	r2, r7, r0
 800a66c:	6812      	ldr	r2, [r2, #0]
 800a66e:	7852      	ldrb	r2, [r2, #1]
 800a670:	701a      	strb	r2, [r3, #0]
                
                    /* Check if this is an interface descriptor. */
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800a672:	187b      	adds	r3, r7, r1
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	2b04      	cmp	r3, #4
 800a678:	d000      	beq.n	800a67c <_ux_device_stack_alternate_setting_set+0x114>
 800a67a:	e17d      	b.n	800a978 <_ux_device_stack_alternate_setting_set+0x410>
                    {

                        /* Parse the descriptor in something more readable. */
                        _ux_utility_descriptor_parse(device_framework,
 800a67c:	2438      	movs	r4, #56	@ 0x38
 800a67e:	193b      	adds	r3, r7, r4
 800a680:	4996      	ldr	r1, [pc, #600]	@ (800a8dc <_ux_device_stack_alternate_setting_set+0x374>)
 800a682:	183a      	adds	r2, r7, r0
 800a684:	6810      	ldr	r0, [r2, #0]
 800a686:	2209      	movs	r2, #9
 800a688:	f7fe f878 	bl	800877c <_ux_utility_descriptor_parse>
                                    _ux_system_interface_descriptor_structure,
                                    UX_INTERFACE_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &interface_descriptor);

                        /* Check if this is the interface we are searching. */
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 800a68c:	193b      	adds	r3, r7, r4
 800a68e:	789b      	ldrb	r3, [r3, #2]
 800a690:	001a      	movs	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4293      	cmp	r3, r2
 800a696:	d000      	beq.n	800a69a <_ux_device_stack_alternate_setting_set+0x132>
 800a698:	e16e      	b.n	800a978 <_ux_device_stack_alternate_setting_set+0x410>
                            interface_descriptor.bAlternateSetting == alternate_setting_value)
 800a69a:	193b      	adds	r3, r7, r4
 800a69c:	78db      	ldrb	r3, [r3, #3]
 800a69e:	001a      	movs	r2, r3
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d000      	beq.n	800a6a8 <_ux_device_stack_alternate_setting_set+0x140>
 800a6a6:	e167      	b.n	800a978 <_ux_device_stack_alternate_setting_set+0x410>
                        {

                            /* We have found the right interface and alternate setting. Before
                               we mount all the endpoints for this interface, we need to
                               unmount the endpoints associated with the previous alternate setting.  */
                            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800a6a8:	238c      	movs	r3, #140	@ 0x8c
 800a6aa:	18fb      	adds	r3, r7, r3
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	69db      	ldr	r3, [r3, #28]
 800a6b0:	2280      	movs	r2, #128	@ 0x80
 800a6b2:	18ba      	adds	r2, r7, r2
 800a6b4:	6013      	str	r3, [r2, #0]
                            while (endpoint != UX_NULL)
 800a6b6:	e029      	b.n	800a70c <_ux_device_stack_alternate_setting_set+0x1a4>
                            {

                                /* Abort any pending transfer.  */
                                _ux_device_stack_transfer_all_request_abort(endpoint, UX_TRANSFER_BUS_RESET);
 800a6b8:	2480      	movs	r4, #128	@ 0x80
 800a6ba:	193b      	adds	r3, r7, r4
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2126      	movs	r1, #38	@ 0x26
 800a6c0:	0018      	movs	r0, r3
 800a6c2:	f001 fc75 	bl	800bfb0 <_ux_device_stack_transfer_all_request_abort>

                                /* The device controller must be called to destroy the endpoint.  */
                                dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 800a6c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a6c8:	699b      	ldr	r3, [r3, #24]
 800a6ca:	193a      	adds	r2, r7, r4
 800a6cc:	6812      	ldr	r2, [r2, #0]
 800a6ce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a6d0:	210f      	movs	r1, #15
 800a6d2:	4798      	blx	r3

                                /* Get the next endpoint.  */
                                next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800a6d4:	193b      	adds	r3, r7, r4
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	695b      	ldr	r3, [r3, #20]
 800a6da:	653b      	str	r3, [r7, #80]	@ 0x50
                
                                /* Free the endpoint.  */
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 800a6dc:	0021      	movs	r1, r4
 800a6de:	187b      	adds	r3, r7, r1
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	601a      	str	r2, [r3, #0]
                        
                                /* Make sure the endpoint instance is now cleaned up.  */
                                endpoint -> ux_slave_endpoint_state =  0;
 800a6e6:	187b      	adds	r3, r7, r1
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	605a      	str	r2, [r3, #4]
                                endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 800a6ee:	187b      	adds	r3, r7, r1
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	615a      	str	r2, [r3, #20]
                                endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 800a6f6:	187b      	adds	r3, r7, r1
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	619a      	str	r2, [r3, #24]
                                endpoint -> ux_slave_endpoint_device =  UX_NULL;
 800a6fe:	187b      	adds	r3, r7, r1
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2200      	movs	r2, #0
 800a704:	61da      	str	r2, [r3, #28]
                                                        
                                /* Now we refresh the endpoint pointer.  */
                                endpoint =  next_endpoint;
 800a706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a708:	187a      	adds	r2, r7, r1
 800a70a:	6013      	str	r3, [r2, #0]
                            while (endpoint != UX_NULL)
 800a70c:	2380      	movs	r3, #128	@ 0x80
 800a70e:	18fb      	adds	r3, r7, r3
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1d0      	bne.n	800a6b8 <_ux_device_stack_alternate_setting_set+0x150>
                            }

                            /* Now clear the interface endpoint entry.  */
                            interface_ptr -> ux_slave_interface_first_endpoint = UX_NULL;
 800a716:	238c      	movs	r3, #140	@ 0x8c
 800a718:	18fb      	adds	r3, r7, r3
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2200      	movs	r2, #0
 800a71e:	61da      	str	r2, [r3, #28]

                            /* Point beyond the interface descriptor.  */
                            device_framework_length -=  (ULONG) *device_framework;
 800a720:	2188      	movs	r1, #136	@ 0x88
 800a722:	187b      	adds	r3, r7, r1
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	001a      	movs	r2, r3
 800a72a:	2084      	movs	r0, #132	@ 0x84
 800a72c:	183b      	adds	r3, r7, r0
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	1a9b      	subs	r3, r3, r2
 800a732:	183a      	adds	r2, r7, r0
 800a734:	6013      	str	r3, [r2, #0]
                            device_framework +=  (ULONG) *device_framework;
 800a736:	187b      	adds	r3, r7, r1
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	001a      	movs	r2, r3
 800a73e:	187b      	adds	r3, r7, r1
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	189b      	adds	r3, r3, r2
 800a744:	187a      	adds	r2, r7, r1
 800a746:	6013      	str	r3, [r2, #0]
                        
                            /* Parse the device framework and locate endpoint descriptor(s).  */
                            while (device_framework_length != 0)
 800a748:	e0db      	b.n	800a902 <_ux_device_stack_alternate_setting_set+0x39a>
                            {
                        
                                /* Get the length of the current descriptor.  */
                                descriptor_length =  (ULONG) *device_framework;
 800a74a:	2288      	movs	r2, #136	@ 0x88
 800a74c:	18bb      	adds	r3, r7, r2
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	66bb      	str	r3, [r7, #104]	@ 0x68
                        
                                /* And its type.  */
                                descriptor_type =  *(device_framework + 1);
 800a754:	2167      	movs	r1, #103	@ 0x67
 800a756:	187b      	adds	r3, r7, r1
 800a758:	18ba      	adds	r2, r7, r2
 800a75a:	6812      	ldr	r2, [r2, #0]
 800a75c:	7852      	ldrb	r2, [r2, #1]
 800a75e:	701a      	strb	r2, [r3, #0]
                                        
                                /* Check if this is an endpoint descriptor.  */
                                switch(descriptor_type)
 800a760:	187b      	adds	r3, r7, r1
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	2b05      	cmp	r3, #5
 800a766:	d008      	beq.n	800a77a <_ux_device_stack_alternate_setting_set+0x212>
 800a768:	dd00      	ble.n	800a76c <_ux_device_stack_alternate_setting_set+0x204>
 800a76a:	e0bb      	b.n	800a8e4 <_ux_device_stack_alternate_setting_set+0x37c>
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d100      	bne.n	800a772 <_ux_device_stack_alternate_setting_set+0x20a>
 800a770:	e0ab      	b.n	800a8ca <_ux_device_stack_alternate_setting_set+0x362>
 800a772:	2b04      	cmp	r3, #4
 800a774:	d100      	bne.n	800a778 <_ux_device_stack_alternate_setting_set+0x210>
 800a776:	e0a8      	b.n	800a8ca <_ux_device_stack_alternate_setting_set+0x362>


                                default:
                                
                                    /* We have found another descriptor embedded in the interface. Ignore it.  */
                                    break;
 800a778:	e0b4      	b.n	800a8e4 <_ux_device_stack_alternate_setting_set+0x37c>
                                    endpoint = device -> ux_slave_device_endpoints_pool;
 800a77a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a77c:	229c      	movs	r2, #156	@ 0x9c
 800a77e:	589b      	ldr	r3, [r3, r2]
 800a780:	2280      	movs	r2, #128	@ 0x80
 800a782:	18ba      	adds	r2, r7, r2
 800a784:	6013      	str	r3, [r2, #0]
                                    endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 800a786:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a788:	22a0      	movs	r2, #160	@ 0xa0
 800a78a:	589b      	ldr	r3, [r3, r2]
 800a78c:	67bb      	str	r3, [r7, #120]	@ 0x78
                                    while (endpoints_pool_number != 0)
 800a78e:	e013      	b.n	800a7b8 <_ux_device_stack_alternate_setting_set+0x250>
                                        if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 800a790:	2280      	movs	r2, #128	@ 0x80
 800a792:	18bb      	adds	r3, r7, r2
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d104      	bne.n	800a7a6 <_ux_device_stack_alternate_setting_set+0x23e>
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 800a79c:	18bb      	adds	r3, r7, r2
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	601a      	str	r2, [r3, #0]
                                            break;
 800a7a4:	e00b      	b.n	800a7be <_ux_device_stack_alternate_setting_set+0x256>
                                        endpoint++;
 800a7a6:	2280      	movs	r2, #128	@ 0x80
 800a7a8:	18bb      	adds	r3, r7, r2
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	3368      	adds	r3, #104	@ 0x68
 800a7ae:	18ba      	adds	r2, r7, r2
 800a7b0:	6013      	str	r3, [r2, #0]
                                       endpoints_pool_number--; 
 800a7b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a7b4:	3b01      	subs	r3, #1
 800a7b6:	67bb      	str	r3, [r7, #120]	@ 0x78
                                    while (endpoints_pool_number != 0)
 800a7b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d1e8      	bne.n	800a790 <_ux_device_stack_alternate_setting_set+0x228>
                                    if (endpoints_pool_number == 0)
 800a7be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d101      	bne.n	800a7c8 <_ux_device_stack_alternate_setting_set+0x260>
                                        return(UX_MEMORY_INSUFFICIENT);
 800a7c4:	2312      	movs	r3, #18
 800a7c6:	e101      	b.n	800a9cc <_ux_device_stack_alternate_setting_set+0x464>
                                                    (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 800a7c8:	2480      	movs	r4, #128	@ 0x80
 800a7ca:	193b      	adds	r3, r7, r4
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	330c      	adds	r3, #12
                                    _ux_utility_descriptor_parse(device_framework,
 800a7d0:	4943      	ldr	r1, [pc, #268]	@ (800a8e0 <_ux_device_stack_alternate_setting_set+0x378>)
 800a7d2:	2288      	movs	r2, #136	@ 0x88
 800a7d4:	18ba      	adds	r2, r7, r2
 800a7d6:	6810      	ldr	r0, [r2, #0]
 800a7d8:	2206      	movs	r2, #6
 800a7da:	f7fd ffcf 	bl	800877c <_ux_utility_descriptor_parse>
                                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800a7de:	0021      	movs	r1, r4
 800a7e0:	187b      	adds	r3, r7, r1
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	3320      	adds	r3, #32
 800a7e6:	65bb      	str	r3, [r7, #88]	@ 0x58
                                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800a7e8:	187b      	adds	r3, r7, r1
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	8a1b      	ldrh	r3, [r3, #16]
                                    max_transfer_length =
 800a7ee:	055b      	lsls	r3, r3, #21
 800a7f0:	0d5b      	lsrs	r3, r3, #21
 800a7f2:	677b      	str	r3, [r7, #116]	@ 0x74
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800a7f4:	4b37      	ldr	r3, [pc, #220]	@ (800a8d4 <_ux_device_stack_alternate_setting_set+0x36c>)
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	23a0      	movs	r3, #160	@ 0xa0
 800a7fa:	005b      	lsls	r3, r3, #1
 800a7fc:	58d3      	ldr	r3, [r2, r3]
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	d11b      	bne.n	800a83a <_ux_device_stack_alternate_setting_set+0x2d2>
                                        (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 800a802:	187b      	adds	r3, r7, r1
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	7bdb      	ldrb	r3, [r3, #15]
 800a808:	001a      	movs	r2, r3
 800a80a:	2301      	movs	r3, #1
 800a80c:	4013      	ands	r3, r2
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800a80e:	d014      	beq.n	800a83a <_ux_device_stack_alternate_setting_set+0x2d2>
                                        n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800a810:	187b      	adds	r3, r7, r1
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	8a1b      	ldrh	r3, [r3, #16]
 800a816:	001a      	movs	r2, r3
 800a818:	23c0      	movs	r3, #192	@ 0xc0
 800a81a:	015b      	lsls	r3, r3, #5
 800a81c:	4013      	ands	r3, r2
 800a81e:	657b      	str	r3, [r7, #84]	@ 0x54
                                        if (n_trans)
 800a820:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a822:	2b00      	cmp	r3, #0
 800a824:	d009      	beq.n	800a83a <_ux_device_stack_alternate_setting_set+0x2d2>
                                            n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 800a826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a828:	0adb      	lsrs	r3, r3, #11
 800a82a:	657b      	str	r3, [r7, #84]	@ 0x54
                                            n_trans ++;
 800a82c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a82e:	3301      	adds	r3, #1
 800a830:	657b      	str	r3, [r7, #84]	@ 0x54
                                            max_transfer_length *= n_trans;
 800a832:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a834:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a836:	4353      	muls	r3, r2
 800a838:	677b      	str	r3, [r7, #116]	@ 0x74
                                    transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 800a83a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a83c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a83e:	621a      	str	r2, [r3, #32]
                                    transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 800a840:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a842:	2480      	movs	r4, #128	@ 0x80
 800a844:	193a      	adds	r2, r7, r4
 800a846:	6812      	ldr	r2, [r2, #0]
 800a848:	609a      	str	r2, [r3, #8]
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 800a84a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a84c:	2201      	movs	r2, #1
 800a84e:	4252      	negs	r2, r2
 800a850:	635a      	str	r2, [r3, #52]	@ 0x34
                                    endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 800a852:	193b      	adds	r3, r7, r4
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	228c      	movs	r2, #140	@ 0x8c
 800a858:	18ba      	adds	r2, r7, r2
 800a85a:	6812      	ldr	r2, [r2, #0]
 800a85c:	619a      	str	r2, [r3, #24]
                                    endpoint -> ux_slave_endpoint_device =  device;
 800a85e:	193b      	adds	r3, r7, r4
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a864:	61da      	str	r2, [r3, #28]
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 800a866:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a868:	699b      	ldr	r3, [r3, #24]
 800a86a:	193a      	adds	r2, r7, r4
 800a86c:	6812      	ldr	r2, [r2, #0]
 800a86e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a870:	210e      	movs	r1, #14
 800a872:	4798      	blx	r3
 800a874:	0003      	movs	r3, r0
 800a876:	65fb      	str	r3, [r7, #92]	@ 0x5c
                                    if (status != UX_SUCCESS)
 800a878:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d005      	beq.n	800a88a <_ux_device_stack_alternate_setting_set+0x322>
                                        endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 800a87e:	193b      	adds	r3, r7, r4
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2200      	movs	r2, #0
 800a884:	601a      	str	r2, [r3, #0]
                                        return(status);
 800a886:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a888:	e0a0      	b.n	800a9cc <_ux_device_stack_alternate_setting_set+0x464>
                                    if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 800a88a:	228c      	movs	r2, #140	@ 0x8c
 800a88c:	18bb      	adds	r3, r7, r2
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	69db      	ldr	r3, [r3, #28]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d106      	bne.n	800a8a4 <_ux_device_stack_alternate_setting_set+0x33c>
                                        interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 800a896:	18bb      	adds	r3, r7, r2
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2280      	movs	r2, #128	@ 0x80
 800a89c:	18ba      	adds	r2, r7, r2
 800a89e:	6812      	ldr	r2, [r2, #0]
 800a8a0:	61da      	str	r2, [r3, #28]
                                    break;
 800a8a2:	e020      	b.n	800a8e6 <_ux_device_stack_alternate_setting_set+0x37e>
                                        endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 800a8a4:	238c      	movs	r3, #140	@ 0x8c
 800a8a6:	18fb      	adds	r3, r7, r3
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	69db      	ldr	r3, [r3, #28]
 800a8ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800a8ae:	e002      	b.n	800a8b6 <_ux_device_stack_alternate_setting_set+0x34e>
                                            endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 800a8b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a8b2:	695b      	ldr	r3, [r3, #20]
 800a8b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800a8b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a8b8:	695b      	ldr	r3, [r3, #20]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d1f8      	bne.n	800a8b0 <_ux_device_stack_alternate_setting_set+0x348>
                                        endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 800a8be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a8c0:	2280      	movs	r2, #128	@ 0x80
 800a8c2:	18ba      	adds	r2, r7, r2
 800a8c4:	6812      	ldr	r2, [r2, #0]
 800a8c6:	615a      	str	r2, [r3, #20]
                                    break;
 800a8c8:	e00d      	b.n	800a8e6 <_ux_device_stack_alternate_setting_set+0x37e>
                                    device_framework_length =  descriptor_length;
 800a8ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a8cc:	2284      	movs	r2, #132	@ 0x84
 800a8ce:	18ba      	adds	r2, r7, r2
 800a8d0:	6013      	str	r3, [r2, #0]
                                    break;
 800a8d2:	e008      	b.n	800a8e6 <_ux_device_stack_alternate_setting_set+0x37e>
 800a8d4:	200015a0 	.word	0x200015a0
 800a8d8:	20000060 	.word	0x20000060
 800a8dc:	20000068 	.word	0x20000068
 800a8e0:	20000048 	.word	0x20000048
                                    break;
 800a8e4:	46c0      	nop			@ (mov r8, r8)
                                }
                        
                                /* Adjust what is left of the device framework.  */
                                device_framework_length -=  descriptor_length;
 800a8e6:	2184      	movs	r1, #132	@ 0x84
 800a8e8:	187b      	adds	r3, r7, r1
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a8ee:	1ad3      	subs	r3, r2, r3
 800a8f0:	187a      	adds	r2, r7, r1
 800a8f2:	6013      	str	r3, [r2, #0]
                        
                                /* Point to the next descriptor.  */
                                device_framework +=  descriptor_length;
 800a8f4:	2188      	movs	r1, #136	@ 0x88
 800a8f6:	187b      	adds	r3, r7, r1
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a8fc:	18d3      	adds	r3, r2, r3
 800a8fe:	187a      	adds	r2, r7, r1
 800a900:	6013      	str	r3, [r2, #0]
                            while (device_framework_length != 0)
 800a902:	2384      	movs	r3, #132	@ 0x84
 800a904:	18fb      	adds	r3, r7, r3
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d000      	beq.n	800a90e <_ux_device_stack_alternate_setting_set+0x3a6>
 800a90c:	e71d      	b.n	800a74a <_ux_device_stack_alternate_setting_set+0x1e2>
                            }

                            /* The interface descriptor in the current class must be changed to the new alternate setting.  */
                            _ux_utility_memory_copy(&interface_ptr -> ux_slave_interface_descriptor, &interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR)); /* Use case of memcpy is verified. */
 800a90e:	248c      	movs	r4, #140	@ 0x8c
 800a910:	193b      	adds	r3, r7, r4
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	330c      	adds	r3, #12
 800a916:	2238      	movs	r2, #56	@ 0x38
 800a918:	18b9      	adds	r1, r7, r2
 800a91a:	220c      	movs	r2, #12
 800a91c:	0018      	movs	r0, r3
 800a91e:	f7fe f9b5 	bl	8008c8c <_ux_utility_memory_copy>
                            
                            /* Get the class for the interface.  */
                            class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 800a922:	4b2c      	ldr	r3, [pc, #176]	@ (800a9d4 <_ux_device_stack_alternate_setting_set+0x46c>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	193a      	adds	r2, r7, r4
 800a928:	6812      	ldr	r2, [r2, #0]
 800a92a:	7b92      	ldrb	r2, [r2, #14]
 800a92c:	3240      	adds	r2, #64	@ 0x40
 800a92e:	0092      	lsls	r2, r2, #2
 800a930:	58d3      	ldr	r3, [r2, r3]
 800a932:	663b      	str	r3, [r7, #96]	@ 0x60

                            /* Check if class driver is available. */
                            if (class_ptr == UX_NULL || class_ptr -> ux_slave_class_status == UX_UNUSED)
 800a934:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a936:	2b00      	cmp	r3, #0
 800a938:	d003      	beq.n	800a942 <_ux_device_stack_alternate_setting_set+0x3da>
 800a93a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a93c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d101      	bne.n	800a946 <_ux_device_stack_alternate_setting_set+0x3de>
                            {

                                return (UX_NO_CLASS_MATCH);
 800a942:	2357      	movs	r3, #87	@ 0x57
 800a944:	e042      	b.n	800a9cc <_ux_device_stack_alternate_setting_set+0x464>
                            }
                        
                            /* The interface attached to this configuration must be changed at the class
                               level.  */
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 800a946:	210c      	movs	r1, #12
 800a948:	187b      	adds	r3, r7, r1
 800a94a:	2206      	movs	r2, #6
 800a94c:	601a      	str	r2, [r3, #0]
                            class_command.ux_slave_class_command_interface =   (VOID *) interface_ptr;
 800a94e:	187b      	adds	r3, r7, r1
 800a950:	208c      	movs	r0, #140	@ 0x8c
 800a952:	183a      	adds	r2, r7, r0
 800a954:	6812      	ldr	r2, [r2, #0]
 800a956:	609a      	str	r2, [r3, #8]

                            /* And store it.  */
                            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800a958:	187b      	adds	r3, r7, r1
 800a95a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a95c:	621a      	str	r2, [r3, #32]
                            
                            /* We can now memorize the interface pointer associated with this class.  */
                            class_ptr -> ux_slave_class_interface = interface_ptr;
 800a95e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a960:	183a      	adds	r2, r7, r0
 800a962:	6812      	ldr	r2, [r2, #0]
 800a964:	661a      	str	r2, [r3, #96]	@ 0x60
                            
                            /* We have found a potential candidate. Call this registered class entry function to change the alternate setting.  */
                            status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800a966:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a96a:	187a      	adds	r2, r7, r1
 800a96c:	0010      	movs	r0, r2
 800a96e:	4798      	blx	r3
 800a970:	0003      	movs	r3, r0
 800a972:	65fb      	str	r3, [r7, #92]	@ 0x5c

                            /* We are done here.  */
                            return(status); 
 800a974:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a976:	e029      	b.n	800a9cc <_ux_device_stack_alternate_setting_set+0x464>
                        }
                    }               

                    /* Adjust what is left of the device framework.  */
                    device_framework_length -=  descriptor_length;
 800a978:	2184      	movs	r1, #132	@ 0x84
 800a97a:	187b      	adds	r3, r7, r1
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	187a      	adds	r2, r7, r1
 800a984:	6013      	str	r3, [r2, #0]

                    /* Point to the next descriptor.  */
                    device_framework +=  descriptor_length;
 800a986:	2188      	movs	r1, #136	@ 0x88
 800a988:	187b      	adds	r3, r7, r1
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a98e:	18d3      	adds	r3, r2, r3
 800a990:	187a      	adds	r2, r7, r1
 800a992:	6013      	str	r3, [r2, #0]
                while (device_framework_length != 0)
 800a994:	2384      	movs	r3, #132	@ 0x84
 800a996:	18fb      	adds	r3, r7, r3
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d000      	beq.n	800a9a0 <_ux_device_stack_alternate_setting_set+0x438>
 800a99e:	e65d      	b.n	800a65c <_ux_device_stack_alternate_setting_set+0xf4>
                }

                /* In case alter setting not found, report protocol error. */
                break;
 800a9a0:	e013      	b.n	800a9ca <_ux_device_stack_alternate_setting_set+0x462>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800a9a2:	2184      	movs	r1, #132	@ 0x84
 800a9a4:	187b      	adds	r3, r7, r1
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a9aa:	1ad3      	subs	r3, r2, r3
 800a9ac:	187a      	adds	r2, r7, r1
 800a9ae:	6013      	str	r3, [r2, #0]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800a9b0:	2188      	movs	r1, #136	@ 0x88
 800a9b2:	187b      	adds	r3, r7, r1
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a9b8:	18d3      	adds	r3, r2, r3
 800a9ba:	187a      	adds	r2, r7, r1
 800a9bc:	6013      	str	r3, [r2, #0]
    while (device_framework_length != 0)
 800a9be:	2384      	movs	r3, #132	@ 0x84
 800a9c0:	18fb      	adds	r3, r7, r3
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d000      	beq.n	800a9ca <_ux_device_stack_alternate_setting_set+0x462>
 800a9c8:	e620      	b.n	800a60c <_ux_device_stack_alternate_setting_set+0xa4>
    }

    /* Return error completion.  */
    return(UX_ERROR);
 800a9ca:	23ff      	movs	r3, #255	@ 0xff
#endif
}
 800a9cc:	0018      	movs	r0, r3
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	b025      	add	sp, #148	@ 0x94
 800a9d2:	bd90      	pop	{r4, r7, pc}
 800a9d4:	200015a0 	.word	0x200015a0

0800a9d8 <_ux_device_stack_class_register>:
UINT  _ux_device_stack_class_register(UCHAR *class_name,
                        UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT *),
                        ULONG configuration_number,
                        ULONG interface_number,
                        VOID *parameter)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b092      	sub	sp, #72	@ 0x48
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	607a      	str	r2, [r7, #4]
 800a9e4:	603b      	str	r3, [r7, #0]

UX_SLAVE_CLASS              *class_inst;
UINT                        status;
UX_SLAVE_CLASS_COMMAND      command;
UINT                        class_name_length =  0;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	613b      	str	r3, [r7, #16]
ULONG                       class_index;
#endif


    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 800a9ea:	2310      	movs	r3, #16
 800a9ec:	18f9      	adds	r1, r7, r3
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	223f      	movs	r2, #63	@ 0x3f
 800a9f2:	0018      	movs	r0, r3
 800a9f4:	f7fe fa02 	bl	8008dfc <_ux_utility_string_length_check>
 800a9f8:	0003      	movs	r3, r0
 800a9fa:	647b      	str	r3, [r7, #68]	@ 0x44
    if (status)
 800a9fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d001      	beq.n	800aa06 <_ux_device_stack_class_register+0x2e>
        return(status);
 800aa02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa04:	e036      	b.n	800aa74 <_ux_device_stack_class_register+0x9c>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name, interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get first class.  */
    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800aa06:	4b1d      	ldr	r3, [pc, #116]	@ (800aa7c <_ux_device_stack_class_register+0xa4>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	22fc      	movs	r2, #252	@ 0xfc
 800aa0c:	589b      	ldr	r3, [r3, r2]
 800aa0e:	643b      	str	r3, [r7, #64]	@ 0x40
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
    {
#endif

        /* Check if this class is already used.  */
        if (class_inst -> ux_slave_class_status == UX_UNUSED)
 800aa10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d12c      	bne.n	800aa72 <_ux_device_stack_class_register+0x9a>

#if defined(UX_NAME_REFERENCED_BY_POINTER)
            class_inst -> ux_slave_class_name = (const UCHAR *)class_name;
#else
            /* We have found a free container for the class. Copy the name (with null-terminator).  */
            _ux_utility_memory_copy(class_inst -> ux_slave_class_name, class_name, class_name_length + 1); /* Use case of memcpy is verified. */
 800aa18:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	1c5a      	adds	r2, r3, #1
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	0019      	movs	r1, r3
 800aa22:	f7fe f933 	bl	8008c8c <_ux_utility_memory_copy>
#endif
            
            /* Memorize the entry function of this class.  */
            class_inst -> ux_slave_class_entry_function =  class_entry_function;
 800aa26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa28:	68ba      	ldr	r2, [r7, #8]
 800aa2a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Memorize the pointer to the application parameter.  */
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 800aa2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa2e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aa30:	655a      	str	r2, [r3, #84]	@ 0x54
            
            /* Memorize the configuration number on which this instance will be called.  */
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 800aa32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	65da      	str	r2, [r3, #92]	@ 0x5c
            
            /* Memorize the interface number on which this instance will be called.  */
            class_inst -> ux_slave_class_interface_number =  interface_number;
 800aa38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa3a:	683a      	ldr	r2, [r7, #0]
 800aa3c:	659a      	str	r2, [r3, #88]	@ 0x58
            
            /* Build all the fields of the Class Command to initialize the class.  */
            command.ux_slave_class_command_request    =  UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 800aa3e:	2114      	movs	r1, #20
 800aa40:	187b      	adds	r3, r7, r1
 800aa42:	2205      	movs	r2, #5
 800aa44:	601a      	str	r2, [r3, #0]
            command.ux_slave_class_command_parameter  =  parameter;
 800aa46:	187b      	adds	r3, r7, r1
 800aa48:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aa4a:	625a      	str	r2, [r3, #36]	@ 0x24
            command.ux_slave_class_command_class_ptr  =  class_inst;
 800aa4c:	187b      	adds	r3, r7, r1
 800aa4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa50:	621a      	str	r2, [r3, #32]

            /* Call the class initialization routine.  */
            status = class_entry_function(&command);
 800aa52:	187a      	adds	r2, r7, r1
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	0010      	movs	r0, r2
 800aa58:	4798      	blx	r3
 800aa5a:	0003      	movs	r3, r0
 800aa5c:	647b      	str	r3, [r7, #68]	@ 0x44
            
            /* Check the status.  */
            if (status != UX_SUCCESS)
 800aa5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d001      	beq.n	800aa68 <_ux_device_stack_class_register+0x90>
                return(status);
 800aa64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa66:	e005      	b.n	800aa74 <_ux_device_stack_class_register+0x9c>
            
            /* Make this class used now.  */
            class_inst -> ux_slave_class_status = UX_USED;
 800aa68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Return successful completion.  */
            return(UX_SUCCESS);
 800aa6e:	2300      	movs	r3, #0
 800aa70:	e000      	b.n	800aa74 <_ux_device_stack_class_register+0x9c>
        class_inst ++;
    }    
#endif

    /* No more entries in the class table.  */
    return(UX_MEMORY_INSUFFICIENT);
 800aa72:	2312      	movs	r3, #18
}
 800aa74:	0018      	movs	r0, r3
 800aa76:	46bd      	mov	sp, r7
 800aa78:	b012      	add	sp, #72	@ 0x48
 800aa7a:	bd80      	pop	{r7, pc}
 800aa7c:	200015a0 	.word	0x200015a0

0800aa80 <_ux_device_stack_clear_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b08a      	sub	sp, #40	@ 0x28
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800aa8c:	4b2b      	ldr	r3, [pc, #172]	@ (800ab3c <_ux_device_stack_clear_feature+0xbc>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800aa92:	4b2a      	ldr	r3, [pc, #168]	@ (800ab3c <_ux_device_stack_clear_feature+0xbc>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	3324      	adds	r3, #36	@ 0x24
 800aa98:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	3318      	adds	r3, #24
 800aa9e:	617b      	str	r3, [r7, #20]

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2203      	movs	r2, #3
 800aaa4:	4013      	ands	r3, r2
 800aaa6:	d002      	beq.n	800aaae <_ux_device_stack_clear_feature+0x2e>
 800aaa8:	2b02      	cmp	r3, #2
 800aaaa:	d013      	beq.n	800aad4 <_ux_device_stack_clear_feature+0x54>
 800aaac:	e038      	b.n	800ab20 <_ux_device_stack_clear_feature+0xa0>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d13d      	bne.n	800ab30 <_ux_device_stack_clear_feature+0xb0>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 800aab4:	4b21      	ldr	r3, [pc, #132]	@ (800ab3c <_ux_device_stack_clear_feature+0xbc>)
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	23a4      	movs	r3, #164	@ 0xa4
 800aaba:	005b      	lsls	r3, r3, #1
 800aabc:	58d3      	ldr	r3, [r2, r3]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d006      	beq.n	800aad0 <_ux_device_stack_clear_feature+0x50>
            {

                /* Disable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 800aac2:	4b1e      	ldr	r3, [pc, #120]	@ (800ab3c <_ux_device_stack_clear_feature+0xbc>)
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	23a6      	movs	r3, #166	@ 0xa6
 800aac8:	005b      	lsls	r3, r3, #1
 800aaca:	2100      	movs	r1, #0
 800aacc:	50d1      	str	r1, [r2, r3]

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
        }

        break;
 800aace:	e02f      	b.n	800ab30 <_ux_device_stack_clear_feature+0xb0>
                return (UX_FUNCTION_NOT_SUPPORTED);
 800aad0:	2354      	movs	r3, #84	@ 0x54
 800aad2:	e02f      	b.n	800ab34 <_ux_device_stack_clear_feature+0xb4>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only clear feature for endpoint is ENDPOINT_STALL. This clears
           the endpoint of the stall situation and resets its data toggle. 
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800aad4:	69bb      	ldr	r3, [r7, #24]
 800aad6:	2290      	movs	r2, #144	@ 0x90
 800aad8:	589b      	ldr	r3, [r3, r2]
 800aada:	627b      	str	r3, [r7, #36]	@ 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 800aadc:	e01d      	b.n	800ab1a <_ux_device_stack_clear_feature+0x9a>
        {
#endif

            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 800aade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aae0:	69db      	ldr	r3, [r3, #28]
 800aae2:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 800aae4:	e013      	b.n	800ab0e <_ux_device_stack_clear_feature+0x8e>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 800aae6:	6a3b      	ldr	r3, [r7, #32]
 800aae8:	7b9b      	ldrb	r3, [r3, #14]
 800aaea:	001a      	movs	r2, r3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d10a      	bne.n	800ab08 <_ux_device_stack_clear_feature+0x88>
                {

                    /* Reset the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	699b      	ldr	r3, [r3, #24]
 800aaf6:	6a3a      	ldr	r2, [r7, #32]
 800aaf8:	69f8      	ldr	r0, [r7, #28]
 800aafa:	2110      	movs	r1, #16
 800aafc:	4798      	blx	r3
                    
                    /* Mark its state now.  */
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 800aafe:	6a3b      	ldr	r3, [r7, #32]
 800ab00:	2200      	movs	r2, #0
 800ab02:	605a      	str	r2, [r3, #4]

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 800ab04:	2300      	movs	r3, #0
 800ab06:	e015      	b.n	800ab34 <_ux_device_stack_clear_feature+0xb4>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 800ab08:	6a3b      	ldr	r3, [r7, #32]
 800ab0a:	695b      	ldr	r3, [r3, #20]
 800ab0c:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 800ab0e:	6a3b      	ldr	r3, [r7, #32]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d1e8      	bne.n	800aae6 <_ux_device_stack_clear_feature+0x66>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800ab14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab16:	699b      	ldr	r3, [r3, #24]
 800ab18:	627b      	str	r3, [r7, #36]	@ 0x24
        while (interface_ptr != UX_NULL)
 800ab1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d1de      	bne.n	800aade <_ux_device_stack_clear_feature+0x5e>

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800ab20:	69fb      	ldr	r3, [r7, #28]
 800ab22:	699b      	ldr	r3, [r3, #24]
 800ab24:	697a      	ldr	r2, [r7, #20]
 800ab26:	69f8      	ldr	r0, [r7, #28]
 800ab28:	2114      	movs	r1, #20
 800ab2a:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	e001      	b.n	800ab34 <_ux_device_stack_clear_feature+0xb4>
        break;
 800ab30:	46c0      	nop			@ (mov r8, r8)
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	0018      	movs	r0, r3
 800ab36:	46bd      	mov	sp, r7
 800ab38:	b00a      	add	sp, #40	@ 0x28
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	200015a0 	.word	0x200015a0

0800ab40 <_ux_device_stack_configuration_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_get(VOID)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
UX_SLAVE_DEVICE         *device;
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800ab46:	4b10      	ldr	r3, [pc, #64]	@ (800ab88 <_ux_device_stack_configuration_get+0x48>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	3324      	adds	r3, #36	@ 0x24
 800ab4c:	60fb      	str	r3, [r7, #12]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	3318      	adds	r3, #24
 800ab52:	60bb      	str	r3, [r7, #8]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	3320      	adds	r3, #32
 800ab58:	607b      	str	r3, [r7, #4]

    /* Set the value of the configuration in the buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =
                (UCHAR) device -> ux_slave_device_configuration_selected;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2280      	movs	r2, #128	@ 0x80
 800ab5e:	589a      	ldr	r2, [r3, r2]
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	68db      	ldr	r3, [r3, #12]
                (UCHAR) device -> ux_slave_device_configuration_selected;
 800ab64:	b2d2      	uxtb	r2, r2
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 800ab66:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET, device -> ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2203      	movs	r2, #3
 800ab6c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2201      	movs	r2, #1
 800ab72:	2101      	movs	r1, #1
 800ab74:	0018      	movs	r0, r3
 800ab76:	f001 fa2e 	bl	800bfd6 <_ux_device_stack_transfer_request>
 800ab7a:	0003      	movs	r3, r0
 800ab7c:	603b      	str	r3, [r7, #0]

    /* Return the function status.  */
    return(status);
 800ab7e:	683b      	ldr	r3, [r7, #0]
}
 800ab80:	0018      	movs	r0, r3
 800ab82:	46bd      	mov	sp, r7
 800ab84:	b004      	add	sp, #16
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	200015a0 	.word	0x200015a0

0800ab8c <_ux_device_stack_configuration_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_set(ULONG configuration_value)
{
 800ab8c:	b590      	push	{r4, r7, lr}
 800ab8e:	b0a1      	sub	sp, #132	@ 0x84
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
UX_SLAVE_DCD                    *dcd;
UCHAR *                         device_framework;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
UCHAR                           descriptor_type;
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 800ab94:	2340      	movs	r3, #64	@ 0x40
 800ab96:	18fb      	adds	r3, r7, r3
 800ab98:	0018      	movs	r0, r3
 800ab9a:	230c      	movs	r3, #12
 800ab9c:	001a      	movs	r2, r3
 800ab9e:	2100      	movs	r1, #0
 800aba0:	f001 fc04 	bl	800c3ac <memset>
UX_SLAVE_INTERFACE              *interface_ptr; 
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE              *next_interface; 
#endif
UX_SLAVE_CLASS                  *class_inst;
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 800aba4:	2300      	movs	r3, #0
 800aba6:	673b      	str	r3, [r7, #112]	@ 0x70
UX_SLAVE_CLASS_COMMAND          class_command;
UX_SLAVE_DEVICE                 *device;
ULONG                           iad_flag;
ULONG                           iad_first_interface =  0;
 800aba8:	2300      	movs	r3, #0
 800abaa:	66bb      	str	r3, [r7, #104]	@ 0x68
ULONG                           iad_number_interfaces =  0;
 800abac:	2300      	movs	r3, #0
 800abae:	667b      	str	r3, [r7, #100]	@ 0x64

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800abb0:	4ba8      	ldr	r3, [pc, #672]	@ (800ae54 <_ux_device_stack_configuration_set+0x2c8>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	663b      	str	r3, [r7, #96]	@ 0x60

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800abb6:	4ba7      	ldr	r3, [pc, #668]	@ (800ae54 <_ux_device_stack_configuration_set+0x2c8>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	3324      	adds	r3, #36	@ 0x24
 800abbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Reset the IAD flag.  */
    iad_flag =  UX_FALSE;
 800abbe:	2300      	movs	r3, #0
 800abc0:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If the configuration value is already selected, keep it.  */
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 800abc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800abc4:	2280      	movs	r2, #128	@ 0x80
 800abc6:	589b      	ldr	r3, [r3, r2]
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d101      	bne.n	800abd2 <_ux_device_stack_configuration_set+0x46>
        return(UX_SUCCESS);
 800abce:	2300      	movs	r3, #0
 800abd0:	e13c      	b.n	800ae4c <_ux_device_stack_configuration_set+0x2c0>

    /* We may have multiple configurations !, the index will tell us what
       configuration descriptor we need to return.  */
    device_framework = _ux_system_slave -> ux_system_slave_device_framework;
 800abd2:	4ba0      	ldr	r3, [pc, #640]	@ (800ae54 <_ux_device_stack_configuration_set+0x2c8>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	22cc      	movs	r2, #204	@ 0xcc
 800abd8:	589b      	ldr	r3, [r3, r2]
 800abda:	67fb      	str	r3, [r7, #124]	@ 0x7c
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800abdc:	4b9d      	ldr	r3, [pc, #628]	@ (800ae54 <_ux_device_stack_configuration_set+0x2c8>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	22d0      	movs	r2, #208	@ 0xd0
 800abe2:	589b      	ldr	r3, [r3, r2]
 800abe4:	67bb      	str	r3, [r7, #120]	@ 0x78

    /* Parse the device framework and locate a configuration descriptor.  */
    while (device_framework_length != 0)
 800abe6:	e020      	b.n	800ac2a <_ux_device_stack_configuration_set+0x9e>
    {
        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800abe8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	65bb      	str	r3, [r7, #88]	@ 0x58

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800abee:	2157      	movs	r1, #87	@ 0x57
 800abf0:	187b      	adds	r3, r7, r1
 800abf2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800abf4:	7852      	ldrb	r2, [r2, #1]
 800abf6:	701a      	strb	r2, [r3, #0]

        /* Check if this is a configuration descriptor.  */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800abf8:	187b      	adds	r3, r7, r1
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	2b02      	cmp	r3, #2
 800abfe:	d10c      	bne.n	800ac1a <_ux_device_stack_configuration_set+0x8e>
        {
            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 800ac00:	2440      	movs	r4, #64	@ 0x40
 800ac02:	193b      	adds	r3, r7, r4
 800ac04:	4994      	ldr	r1, [pc, #592]	@ (800ae58 <_ux_device_stack_configuration_set+0x2cc>)
 800ac06:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800ac08:	2208      	movs	r2, #8
 800ac0a:	f7fd fdb7 	bl	800877c <_ux_utility_descriptor_parse>
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value. It has
               to be the same as the one specified in the setup function.  */
            if (configuration_descriptor.bConfigurationValue == configuration_value)
 800ac0e:	193b      	adds	r3, r7, r4
 800ac10:	795b      	ldrb	r3, [r3, #5]
 800ac12:	001a      	movs	r2, r3
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d00b      	beq.n	800ac32 <_ux_device_stack_configuration_set+0xa6>
                /* The configuration is found. */
                break;
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -= descriptor_length;
 800ac1a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ac1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac1e:	1ad3      	subs	r3, r2, r3
 800ac20:	67bb      	str	r3, [r7, #120]	@ 0x78
        /* Point to the next descriptor.  */
        device_framework += descriptor_length;
 800ac22:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ac24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac26:	18d3      	adds	r3, r2, r3
 800ac28:	67fb      	str	r3, [r7, #124]	@ 0x7c
    while (device_framework_length != 0)
 800ac2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d1db      	bne.n	800abe8 <_ux_device_stack_configuration_set+0x5c>
 800ac30:	e000      	b.n	800ac34 <_ux_device_stack_configuration_set+0xa8>
                break;
 800ac32:	46c0      	nop			@ (mov r8, r8)
    }

    /* Configuration not found. */
    if (device_framework_length == 0 && configuration_value != 0)
 800ac34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d104      	bne.n	800ac44 <_ux_device_stack_configuration_set+0xb8>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d001      	beq.n	800ac44 <_ux_device_stack_configuration_set+0xb8>
        return(UX_ERROR);
 800ac40:	23ff      	movs	r3, #255	@ 0xff
 800ac42:	e103      	b.n	800ae4c <_ux_device_stack_configuration_set+0x2c0>

    /* We unmount the configuration if there is previous configuration selected. */
    if (device -> ux_slave_device_configuration_selected)
 800ac44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac46:	2280      	movs	r2, #128	@ 0x80
 800ac48:	589b      	ldr	r3, [r3, r2]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d025      	beq.n	800ac9a <_ux_device_stack_configuration_set+0x10e>
    {

        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800ac4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac50:	2290      	movs	r2, #144	@ 0x90
 800ac52:	589b      	ldr	r3, [r3, r2]
 800ac54:	677b      	str	r3, [r7, #116]	@ 0x74

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Deactivate all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 800ac56:	e01d      	b.n	800ac94 <_ux_device_stack_configuration_set+0x108>
        {
#endif
            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 800ac58:	2108      	movs	r1, #8
 800ac5a:	187b      	adds	r3, r7, r1
 800ac5c:	2203      	movs	r2, #3
 800ac5e:	601a      	str	r2, [r3, #0]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 800ac60:	187b      	adds	r3, r7, r1
 800ac62:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800ac64:	609a      	str	r2, [r3, #8]

            /* Get the pointer to the class container of this interface.  */
            class_inst =  interface_ptr -> ux_slave_interface_class;
 800ac66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_inst;
 800ac6c:	187b      	adds	r3, r7, r1
 800ac6e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ac70:	621a      	str	r2, [r3, #32]

            /* If there is a class container for this instance, deactivate it.  */
            if (class_inst != UX_NULL)
 800ac72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d004      	beq.n	800ac82 <_ux_device_stack_configuration_set+0xf6>

                /* Call the class with the DEACTIVATE signal.  */
                class_inst -> ux_slave_class_entry_function(&class_command);
 800ac78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac7c:	187a      	adds	r2, r7, r1
 800ac7e:	0010      	movs	r0, r2
 800ac80:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800ac82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ac84:	699b      	ldr	r3, [r3, #24]
 800ac86:	64fb      	str	r3, [r7, #76]	@ 0x4c
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 800ac88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ac8a:	0018      	movs	r0, r3
 800ac8c:	f000 ff08 	bl	800baa0 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 800ac90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac92:	677b      	str	r3, [r7, #116]	@ 0x74
        while (interface_ptr != UX_NULL)
 800ac94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d1de      	bne.n	800ac58 <_ux_device_stack_configuration_set+0xcc>
#endif

    }

    /* No configuration is selected.  */
    device -> ux_slave_device_configuration_selected =  0;
 800ac9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac9c:	2280      	movs	r2, #128	@ 0x80
 800ac9e:	2100      	movs	r1, #0
 800aca0:	5099      	str	r1, [r3, r2]

    /* Mark the device as attached now. */
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800aca2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aca4:	2201      	movs	r2, #1
 800aca6:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 800aca8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800acaa:	699b      	ldr	r3, [r3, #24]
 800acac:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800acae:	2201      	movs	r2, #1
 800acb0:	2113      	movs	r1, #19
 800acb2:	4798      	blx	r3

    /* If the host tries to unconfigure, we are done. */
    if (configuration_value == 0)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d101      	bne.n	800acbe <_ux_device_stack_configuration_set+0x132>
        return(UX_SUCCESS);
 800acba:	2300      	movs	r3, #0
 800acbc:	e0c6      	b.n	800ae4c <_ux_device_stack_configuration_set+0x2c0>

    /* Memorize the configuration selected.  */
    device -> ux_slave_device_configuration_selected =  configuration_value;
 800acbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acc0:	2180      	movs	r1, #128	@ 0x80
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	505a      	str	r2, [r3, r1]
    /* We have found the configuration value requested by the host.
       Create the configuration descriptor and attach it to the device.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_configuration_descriptor_structure,
                UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                (UCHAR *) &device -> ux_slave_device_configuration_descriptor);
 800acc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acc8:	3384      	adds	r3, #132	@ 0x84
    _ux_utility_descriptor_parse(device_framework,
 800acca:	4963      	ldr	r1, [pc, #396]	@ (800ae58 <_ux_device_stack_configuration_set+0x2cc>)
 800accc:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800acce:	2208      	movs	r2, #8
 800acd0:	f7fd fd54 	bl	800877c <_ux_utility_descriptor_parse>

    /* Configuration character D6 is for Self-powered */
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 800acd4:	2340      	movs	r3, #64	@ 0x40
 800acd6:	18fb      	adds	r3, r7, r3
 800acd8:	79db      	ldrb	r3, [r3, #7]
 800acda:	001a      	movs	r2, r3
 800acdc:	2340      	movs	r3, #64	@ 0x40
 800acde:	4013      	ands	r3, r2
 800ace0:	d001      	beq.n	800ace6 <_ux_device_stack_configuration_set+0x15a>
 800ace2:	2202      	movs	r2, #2
 800ace4:	e000      	b.n	800ace8 <_ux_device_stack_configuration_set+0x15c>
 800ace6:	2201      	movs	r2, #1
 800ace8:	4b5a      	ldr	r3, [pc, #360]	@ (800ae54 <_ux_device_stack_configuration_set+0x2c8>)
 800acea:	6819      	ldr	r1, [r3, #0]
 800acec:	23a2      	movs	r3, #162	@ 0xa2
 800acee:	005b      	lsls	r3, r3, #1
 800acf0:	50ca      	str	r2, [r1, r3]

    /* Configuration character D5 is for Remote Wakeup */
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 800acf2:	2040      	movs	r0, #64	@ 0x40
 800acf4:	183b      	adds	r3, r7, r0
 800acf6:	79db      	ldrb	r3, [r3, #7]
 800acf8:	115b      	asrs	r3, r3, #5
 800acfa:	0019      	movs	r1, r3
 800acfc:	4b55      	ldr	r3, [pc, #340]	@ (800ae54 <_ux_device_stack_configuration_set+0x2c8>)
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	2301      	movs	r3, #1
 800ad02:	4019      	ands	r1, r3
 800ad04:	23a4      	movs	r3, #164	@ 0xa4
 800ad06:	005b      	lsls	r3, r3, #1
 800ad08:	50d1      	str	r1, [r2, r3]

    /* Search only in current configuration */
    device_framework_length =  configuration_descriptor.wTotalLength;
 800ad0a:	183b      	adds	r3, r7, r0
 800ad0c:	885b      	ldrh	r3, [r3, #2]
 800ad0e:	67bb      	str	r3, [r7, #120]	@ 0x78

    /*  We need to scan all the interface descriptors following this
        configuration descriptor and enable all endpoints associated
        with the default alternate setting of each interface.  */
    while (device_framework_length != 0)
 800ad10:	e08e      	b.n	800ae30 <_ux_device_stack_configuration_set+0x2a4>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800ad12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	65bb      	str	r3, [r7, #88]	@ 0x58

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800ad18:	2157      	movs	r1, #87	@ 0x57
 800ad1a:	187b      	adds	r3, r7, r1
 800ad1c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ad1e:	7852      	ldrb	r2, [r2, #1]
 800ad20:	701a      	strb	r2, [r3, #0]

        /* Check if this is an interface association descriptor.  */
        if(descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 800ad22:	187b      	adds	r3, r7, r1
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	2b0b      	cmp	r3, #11
 800ad28:	d109      	bne.n	800ad3e <_ux_device_stack_configuration_set+0x1b2>
        {

            /* Set the IAD flag.  */
            iad_flag = UX_TRUE;
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Get the first interface we have in the IAD. */
            iad_first_interface = (ULONG)  *(device_framework + 2);
 800ad2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ad30:	3302      	adds	r3, #2
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	66bb      	str	r3, [r7, #104]	@ 0x68

            /* Get the number of interfaces we have in the IAD. */
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
 800ad36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ad38:	3303      	adds	r3, #3
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	667b      	str	r3, [r7, #100]	@ 0x64
        }

        /* Check if this is an interface descriptor.  */
        if(descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800ad3e:	2357      	movs	r3, #87	@ 0x57
 800ad40:	18fb      	adds	r3, r7, r3
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	2b04      	cmp	r3, #4
 800ad46:	d000      	beq.n	800ad4a <_ux_device_stack_configuration_set+0x1be>
 800ad48:	e06a      	b.n	800ae20 <_ux_device_stack_configuration_set+0x294>
        {

            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 800ad4a:	2434      	movs	r4, #52	@ 0x34
 800ad4c:	193b      	adds	r3, r7, r4
 800ad4e:	4943      	ldr	r1, [pc, #268]	@ (800ae5c <_ux_device_stack_configuration_set+0x2d0>)
 800ad50:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 800ad52:	2209      	movs	r2, #9
 800ad54:	f7fd fd12 	bl	800877c <_ux_utility_descriptor_parse>
                        UX_INTERFACE_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &interface_descriptor);

            /* If the alternate setting is 0 for this interface, we need to
               memorize its class association and start it.  */
            if (interface_descriptor.bAlternateSetting == 0)
 800ad58:	0021      	movs	r1, r4
 800ad5a:	187b      	adds	r3, r7, r1
 800ad5c:	78db      	ldrb	r3, [r3, #3]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d15e      	bne.n	800ae20 <_ux_device_stack_configuration_set+0x294>
            {

                /* Are we in a IAD scenario ? */
                if (iad_flag == UX_TRUE)
 800ad62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d137      	bne.n	800add8 <_ux_device_stack_configuration_set+0x24c>
                {

                    /* Check if this is the first interface from the IAD. In this case,
                       we need to match a class to this interface.  */
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 800ad68:	187b      	adds	r3, r7, r1
 800ad6a:	789b      	ldrb	r3, [r3, #2]
 800ad6c:	001a      	movs	r2, r3
 800ad6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d11f      	bne.n	800adb4 <_ux_device_stack_configuration_set+0x228>
                    {

                        /* First interface. Scan the list of classes to find a match.  */
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800ad74:	4b37      	ldr	r3, [pc, #220]	@ (800ae54 <_ux_device_stack_configuration_set+0x2c8>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	22fc      	movs	r2, #252	@ 0xfc
 800ad7a:	589b      	ldr	r3, [r3, r2]
 800ad7c:	653b      	str	r3, [r7, #80]	@ 0x50
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                        {
#endif

                            /* Check if this class driver is used.  */
                            if (class_inst -> ux_slave_class_status == UX_USED)
 800ad7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d11f      	bne.n	800adc6 <_ux_device_stack_configuration_set+0x23a>
                            {

                                /* Check if this is the same interface for the same configuration. */
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800ad86:	187b      	adds	r3, r7, r1
 800ad88:	789b      	ldrb	r3, [r3, #2]
 800ad8a:	001a      	movs	r2, r3
 800ad8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d118      	bne.n	800adc6 <_ux_device_stack_configuration_set+0x23a>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 800ad94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d113      	bne.n	800adc6 <_ux_device_stack_configuration_set+0x23a>
                                {

                                    /* Memorize the class in the class/interface array.  */
                                    _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 800ad9e:	4b2d      	ldr	r3, [pc, #180]	@ (800ae54 <_ux_device_stack_configuration_set+0x2c8>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	187a      	adds	r2, r7, r1
 800ada4:	7892      	ldrb	r2, [r2, #2]
 800ada6:	3240      	adds	r2, #64	@ 0x40
 800ada8:	0092      	lsls	r2, r2, #2
 800adaa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800adac:	50d1      	str	r1, [r2, r3]

                                    /* And again as the current class.  */
                                    current_class = class_inst;
 800adae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800adb0:	673b      	str	r3, [r7, #112]	@ 0x70
 800adb2:	e008      	b.n	800adc6 <_ux_device_stack_configuration_set+0x23a>
#endif
                    }
                    else

                        /* Memorize the class in the class/interface array.  We use the current class. */
                        _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = current_class;
 800adb4:	4b27      	ldr	r3, [pc, #156]	@ (800ae54 <_ux_device_stack_configuration_set+0x2c8>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	2234      	movs	r2, #52	@ 0x34
 800adba:	18ba      	adds	r2, r7, r2
 800adbc:	7892      	ldrb	r2, [r2, #2]
 800adbe:	3240      	adds	r2, #64	@ 0x40
 800adc0:	0092      	lsls	r2, r2, #2
 800adc2:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800adc4:	50d1      	str	r1, [r2, r3]

                    /* Decrement the number of interfaces found in the same IAD.  */
                    iad_number_interfaces--;
 800adc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800adc8:	3b01      	subs	r3, #1
 800adca:	667b      	str	r3, [r7, #100]	@ 0x64

                    /* If none are left, get out of the IAD state machine.  */
                    if (iad_number_interfaces == 0)
 800adcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800adce:	2b00      	cmp	r3, #0
 800add0:	d120      	bne.n	800ae14 <_ux_device_stack_configuration_set+0x288>

                        /* We have exhausted the interfaces within the IAD.  */
                        iad_flag = UX_FALSE;
 800add2:	2300      	movs	r3, #0
 800add4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800add6:	e01d      	b.n	800ae14 <_ux_device_stack_configuration_set+0x288>
                }
                else
                {

                    /* First interface. Scan the list of classes to find a match.  */
                    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800add8:	4b1e      	ldr	r3, [pc, #120]	@ (800ae54 <_ux_device_stack_configuration_set+0x2c8>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	22fc      	movs	r2, #252	@ 0xfc
 800adde:	589b      	ldr	r3, [r3, r2]
 800ade0:	653b      	str	r3, [r7, #80]	@ 0x50
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
                    {
#endif

                        /* Check if this class driver is used.  */
                        if (class_inst -> ux_slave_class_status == UX_USED)
 800ade2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ade4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d114      	bne.n	800ae14 <_ux_device_stack_configuration_set+0x288>
                        {

                            /* Check if this is the same interface for the same configuration. */
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800adea:	2134      	movs	r1, #52	@ 0x34
 800adec:	187b      	adds	r3, r7, r1
 800adee:	789b      	ldrb	r3, [r3, #2]
 800adf0:	001a      	movs	r2, r3
 800adf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800adf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d10c      	bne.n	800ae14 <_ux_device_stack_configuration_set+0x288>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 800adfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800adfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d107      	bne.n	800ae14 <_ux_device_stack_configuration_set+0x288>
                            {

                                /* Memorize the class in the class/interface array.  */
                                _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 800ae04:	4b13      	ldr	r3, [pc, #76]	@ (800ae54 <_ux_device_stack_configuration_set+0x2c8>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	187a      	adds	r2, r7, r1
 800ae0a:	7892      	ldrb	r2, [r2, #2]
 800ae0c:	3240      	adds	r2, #64	@ 0x40
 800ae0e:	0092      	lsls	r2, r2, #2
 800ae10:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ae12:	50d1      	str	r1, [r2, r3]
                    }
#endif
                }

                /* Set the interface.  */
                _ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 800ae14:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ae16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ae18:	2200      	movs	r2, #0
 800ae1a:	0018      	movs	r0, r3
 800ae1c:	f000 fe88 	bl	800bb30 <_ux_device_stack_interface_set>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800ae20:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ae22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae24:	1ad3      	subs	r3, r2, r3
 800ae26:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800ae28:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ae2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ae2c:	18d3      	adds	r3, r2, r3
 800ae2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    while (device_framework_length != 0)
 800ae30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d000      	beq.n	800ae38 <_ux_device_stack_configuration_set+0x2ac>
 800ae36:	e76c      	b.n	800ad12 <_ux_device_stack_configuration_set+0x186>
    }

    /* Mark the device as configured now. */
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 800ae38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae3a:	2203      	movs	r2, #3
 800ae3c:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 800ae3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae40:	699b      	ldr	r3, [r3, #24]
 800ae42:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800ae44:	2203      	movs	r2, #3
 800ae46:	2113      	movs	r1, #19
 800ae48:	4798      	blx	r3

    /* Configuration mounted. */
    return(UX_SUCCESS);
 800ae4a:	2300      	movs	r3, #0
}
 800ae4c:	0018      	movs	r0, r3
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	b021      	add	sp, #132	@ 0x84
 800ae52:	bd90      	pop	{r4, r7, pc}
 800ae54:	200015a0 	.word	0x200015a0
 800ae58:	20000060 	.word	0x20000060
 800ae5c:	20000068 	.word	0x20000068

0800ae60 <_ux_device_stack_control_request_process>:
/*                                            process with print class,   */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)
{
 800ae60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae62:	b09d      	sub	sp, #116	@ 0x74
 800ae64:	af02      	add	r7, sp, #8
 800ae66:	6078      	str	r0, [r7, #4]
ULONG                       request;
ULONG                       request_value;
ULONG                       request_index;
ULONG                       request_length;
ULONG                       class_index;
UINT                        status =  UX_ERROR;
 800ae68:	23ff      	movs	r3, #255	@ 0xff
 800ae6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
UX_SLAVE_ENDPOINT           *endpoint;
ULONG                       application_data_length;

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800ae6c:	4ba6      	ldr	r3, [pc, #664]	@ (800b108 <_ux_device_stack_control_request_process+0x2a8>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800ae72:	4ba5      	ldr	r3, [pc, #660]	@ (800b108 <_ux_device_stack_control_request_process+0x2a8>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	3324      	adds	r3, #36	@ 0x24
 800ae78:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Ensure that the Setup request has been received correctly.  */
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d000      	beq.n	800ae84 <_ux_device_stack_control_request_process+0x24>
 800ae82:	e13b      	b.n	800b0fc <_ux_device_stack_control_request_process+0x29c>
    {

        /* Seems so far, the Setup request is valid. Extract all fields of
           the request.  */
        request_type   =   *transfer_request -> ux_slave_transfer_request_setup;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	223c      	movs	r2, #60	@ 0x3c
 800ae88:	5c9b      	ldrb	r3, [r3, r2]
 800ae8a:	667b      	str	r3, [r7, #100]	@ 0x64
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	223d      	movs	r2, #61	@ 0x3d
 800ae90:	5c9b      	ldrb	r3, [r3, r2]
 800ae92:	653b      	str	r3, [r7, #80]	@ 0x50
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	333c      	adds	r3, #60	@ 0x3c
 800ae98:	3302      	adds	r3, #2
 800ae9a:	0018      	movs	r0, r3
 800ae9c:	f7fd ff94 	bl	8008dc8 <_ux_utility_short_get>
 800aea0:	0003      	movs	r3, r0
 800aea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	333c      	adds	r3, #60	@ 0x3c
 800aea8:	3304      	adds	r3, #4
 800aeaa:	0018      	movs	r0, r3
 800aeac:	f7fd ff8c 	bl	8008dc8 <_ux_utility_short_get>
 800aeb0:	0003      	movs	r3, r0
 800aeb2:	64bb      	str	r3, [r7, #72]	@ 0x48
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	333c      	adds	r3, #60	@ 0x3c
 800aeb8:	3306      	adds	r3, #6
 800aeba:	0018      	movs	r0, r3
 800aebc:	f7fd ff84 	bl	8008dc8 <_ux_utility_short_get>
 800aec0:	0003      	movs	r3, r0
 800aec2:	647b      	str	r3, [r7, #68]	@ 0x44

        /* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned is not a standard descriptor,
           treat the command as a CLASS command.  */
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 800aec4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aec6:	2b06      	cmp	r3, #6
 800aec8:	d002      	beq.n	800aed0 <_ux_device_stack_control_request_process+0x70>
 800aeca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aecc:	2b07      	cmp	r3, #7
 800aece:	d10c      	bne.n	800aeea <_ux_device_stack_control_request_process+0x8a>
 800aed0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aed2:	0a1b      	lsrs	r3, r3, #8
 800aed4:	2260      	movs	r2, #96	@ 0x60
 800aed6:	4013      	ands	r3, r2
 800aed8:	d007      	beq.n	800aeea <_ux_device_stack_control_request_process+0x8a>
        {        

            /* This request is to be handled by the class layer.  */
            request_type &=  (UINT)~UX_REQUEST_TYPE;
 800aeda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aedc:	2260      	movs	r2, #96	@ 0x60
 800aede:	4393      	bics	r3, r2
 800aee0:	667b      	str	r3, [r7, #100]	@ 0x64
            request_type |= UX_REQUEST_TYPE_CLASS;
 800aee2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aee4:	2220      	movs	r2, #32
 800aee6:	4313      	orrs	r3, r2
 800aee8:	667b      	str	r3, [r7, #100]	@ 0x64
        }                   

        /* Check if there is a vendor registered function at the application layer.  If the request
           is VENDOR and the request match, pass the request to the application.  */
        if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 800aeea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aeec:	2260      	movs	r2, #96	@ 0x60
 800aeee:	4013      	ands	r3, r2
 800aef0:	2b40      	cmp	r3, #64	@ 0x40
 800aef2:	d140      	bne.n	800af76 <_ux_device_stack_control_request_process+0x116>
        {

            /* Check the request demanded and compare it to the application registered one.  */
            if (_ux_system_slave -> ux_system_slave_device_vendor_request_function != UX_NULL &&
 800aef4:	4b84      	ldr	r3, [pc, #528]	@ (800b108 <_ux_device_stack_control_request_process+0x2a8>)
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	23b6      	movs	r3, #182	@ 0xb6
 800aefa:	005b      	lsls	r3, r3, #1
 800aefc:	58d3      	ldr	r3, [r2, r3]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d039      	beq.n	800af76 <_ux_device_stack_control_request_process+0x116>
                request == _ux_system_slave -> ux_system_slave_device_vendor_request)
 800af02:	4b81      	ldr	r3, [pc, #516]	@ (800b108 <_ux_device_stack_control_request_process+0x2a8>)
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	23b4      	movs	r3, #180	@ 0xb4
 800af08:	005b      	lsls	r3, r3, #1
 800af0a:	58d3      	ldr	r3, [r2, r3]
            if (_ux_system_slave -> ux_system_slave_device_vendor_request_function != UX_NULL &&
 800af0c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800af0e:	429a      	cmp	r2, r3
 800af10:	d131      	bne.n	800af76 <_ux_device_stack_control_request_process+0x116>
            {

                /* This is a Microsoft extended function. It happens before the device is configured. 
                   The request is passed to the application directly.  */
                application_data_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 800af12:	2380      	movs	r3, #128	@ 0x80
 800af14:	005b      	lsls	r3, r3, #1
 800af16:	60fb      	str	r3, [r7, #12]
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 800af18:	4b7b      	ldr	r3, [pc, #492]	@ (800b108 <_ux_device_stack_control_request_process+0x2a8>)
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	23b6      	movs	r3, #182	@ 0xb6
 800af1e:	005b      	lsls	r3, r3, #1
 800af20:	58d4      	ldr	r4, [r2, r3]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	6c7e      	ldr	r6, [r7, #68]	@ 0x44
 800af28:	6cbd      	ldr	r5, [r7, #72]	@ 0x48
 800af2a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800af2c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800af2e:	220c      	movs	r2, #12
 800af30:	18ba      	adds	r2, r7, r2
 800af32:	9201      	str	r2, [sp, #4]
 800af34:	9300      	str	r3, [sp, #0]
 800af36:	0033      	movs	r3, r6
 800af38:	002a      	movs	r2, r5
 800af3a:	47a0      	blx	r4
 800af3c:	0003      	movs	r3, r0
 800af3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                                                                                            request_index, request_length, 
                                                                                            transfer_request -> ux_slave_transfer_request_data_pointer,
                                                                                            &application_data_length);

                /* Check the status from the application.  */
                if (status == UX_SUCCESS)
 800af40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af42:	2b00      	cmp	r3, #0
 800af44:	d110      	bne.n	800af68 <_ux_device_stack_control_request_process+0x108>
                {
                
                    /* Get the control endpoint associated with the device.  */
                    endpoint =  &device -> ux_slave_device_control_endpoint;
 800af46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af48:	3318      	adds	r3, #24
 800af4a:	643b      	str	r3, [r7, #64]	@ 0x40
    
                    /* Get the pointer to the transfer request associated with the control endpoint.  */
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800af4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af4e:	3320      	adds	r3, #32
 800af50:	607b      	str	r3, [r7, #4]
    
                    /* Set the direction to OUT.  */
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2203      	movs	r2, #3
 800af56:	629a      	str	r2, [r3, #40]	@ 0x28

                    /* Perform the data transfer.  */
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 800af58:	68f9      	ldr	r1, [r7, #12]
 800af5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	0018      	movs	r0, r3
 800af60:	f001 f839 	bl	800bfd6 <_ux_device_stack_transfer_request>

                    /* We are done here.  */
                    return(UX_SUCCESS);
 800af64:	2300      	movs	r3, #0
 800af66:	e0ca      	b.n	800b0fe <_ux_device_stack_control_request_process+0x29e>
                }
                else
                {

                    /* The application did not like the vendor command format, stall the control endpoint.  */
                    _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800af68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af6a:	3318      	adds	r3, #24
 800af6c:	0018      	movs	r0, r3
 800af6e:	f000 fb45 	bl	800b5fc <_ux_device_stack_endpoint_stall>
                    
                    /* We are done here.  */
                    return(UX_SUCCESS);
 800af72:	2300      	movs	r3, #0
 800af74:	e0c3      	b.n	800b0fe <_ux_device_stack_control_request_process+0x29e>
            }
        }

        /* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
           the function has to be passed to the class layer.  */
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 800af76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af78:	2260      	movs	r2, #96	@ 0x60
 800af7a:	4013      	ands	r3, r2
 800af7c:	2b20      	cmp	r3, #32
 800af7e:	d004      	beq.n	800af8a <_ux_device_stack_control_request_process+0x12a>
            ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
 800af80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af82:	2260      	movs	r2, #96	@ 0x60
 800af84:	4013      	ands	r3, r2
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 800af86:	2b40      	cmp	r3, #64	@ 0x40
 800af88:	d152      	bne.n	800b030 <_ux_device_stack_control_request_process+0x1d0>
        {

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 800af8a:	2310      	movs	r3, #16
 800af8c:	18fb      	adds	r3, r7, r3
 800af8e:	2204      	movs	r2, #4
 800af90:	601a      	str	r2, [r3, #0]

            /* We need to find which class this request is for.  */
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 800af92:	2300      	movs	r3, #0
 800af94:	663b      	str	r3, [r7, #96]	@ 0x60
 800af96:	e03c      	b.n	800b012 <_ux_device_stack_control_request_process+0x1b2>
            {

                /* Get the class for the interface.  */
                class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[class_index];
 800af98:	4b5b      	ldr	r3, [pc, #364]	@ (800b108 <_ux_device_stack_control_request_process+0x2a8>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800af9e:	3240      	adds	r2, #64	@ 0x40
 800afa0:	0092      	lsls	r2, r2, #2
 800afa2:	58d3      	ldr	r3, [r2, r3]
 800afa4:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* If class is not ready, try next.  */
                if (class_ptr == UX_NULL)
 800afa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d02c      	beq.n	800b006 <_ux_device_stack_control_request_process+0x1a6>
                    continue;

                /* Is the request target to an interface?  */
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 800afac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800afae:	2203      	movs	r2, #3
 800afb0:	4013      	ands	r3, r2
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d118      	bne.n	800afe8 <_ux_device_stack_control_request_process+0x188>
                       the request index, we should go to the next one.  */
                    /* For printer class (0x07) GET_DEVICE_ID (0x00) the high byte of 
                       wIndex is interface index (for recommended index sequence the interface
                       number is same as interface index inside configuration).
                     */
                    if ((request_type == 0xA1) && (request == 0x00) &&
 800afb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800afb8:	2ba1      	cmp	r3, #161	@ 0xa1
 800afba:	d10f      	bne.n	800afdc <_ux_device_stack_control_request_process+0x17c>
 800afbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d10c      	bne.n	800afdc <_ux_device_stack_control_request_process+0x17c>
                        (class_ptr -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07))
 800afc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afc6:	7c5b      	ldrb	r3, [r3, #17]
                    if ((request_type == 0xA1) && (request == 0x00) &&
 800afc8:	2b07      	cmp	r3, #7
 800afca:	d107      	bne.n	800afdc <_ux_device_stack_control_request_process+0x17c>
                    {

                        /* Check wIndex high byte.  */
                        if(*(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX + 1) != class_index)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2241      	movs	r2, #65	@ 0x41
 800afd0:	5c9b      	ldrb	r3, [r3, r2]
 800afd2:	001a      	movs	r2, r3
 800afd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d006      	beq.n	800afe8 <_ux_device_stack_control_request_process+0x188>
                            continue;
 800afda:	e017      	b.n	800b00c <_ux_device_stack_control_request_process+0x1ac>
                    }
                    else
                    {

                        /* Check wIndex low.  */
                        if ((request_index & 0xFF) != class_index)
 800afdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800afde:	22ff      	movs	r2, #255	@ 0xff
 800afe0:	4013      	ands	r3, r2
 800afe2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d110      	bne.n	800b00a <_ux_device_stack_control_request_process+0x1aa>
                            continue;
                    }
                }

                /* Memorize the class in the command.  */
                class_command.ux_slave_class_command_class_ptr = class_ptr;
 800afe8:	2110      	movs	r1, #16
 800afea:	187b      	adds	r3, r7, r1
 800afec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800afee:	621a      	str	r2, [r3, #32]

                /* We have found a potential candidate. Call this registered class entry function.  */
                status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800aff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aff4:	187a      	adds	r2, r7, r1
 800aff6:	0010      	movs	r0, r2
 800aff8:	4798      	blx	r3
 800affa:	0003      	movs	r3, r0
 800affc:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* The status simply tells us if the registered class handled the 
                   command - if there was an issue processing the command, it would've 
                   stalled the control endpoint, notifying the host (and not us).  */
                if (status == UX_SUCCESS)
 800affe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00a      	beq.n	800b01a <_ux_device_stack_control_request_process+0x1ba>
 800b004:	e002      	b.n	800b00c <_ux_device_stack_control_request_process+0x1ac>
                    continue;
 800b006:	46c0      	nop			@ (mov r8, r8)
 800b008:	e000      	b.n	800b00c <_ux_device_stack_control_request_process+0x1ac>
                            continue;
 800b00a:	46c0      	nop			@ (mov r8, r8)
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 800b00c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b00e:	3301      	adds	r3, #1
 800b010:	663b      	str	r3, [r7, #96]	@ 0x60
 800b012:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b014:	2b0f      	cmp	r3, #15
 800b016:	d9bf      	bls.n	800af98 <_ux_device_stack_control_request_process+0x138>
 800b018:	e000      	b.n	800b01c <_ux_device_stack_control_request_process+0x1bc>

                    /* We are done, break the loop!  */
                    break;
 800b01a:	46c0      	nop			@ (mov r8, r8)

                /* Not handled, try next.  */
            }

            /* If no class handled the command, then we have an error here.  */
            if (status != UX_SUCCESS)
 800b01c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d004      	beq.n	800b02c <_ux_device_stack_control_request_process+0x1cc>

                /* We stall the command (request not supported).  */
                _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800b022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b024:	3318      	adds	r3, #24
 800b026:	0018      	movs	r0, r3
 800b028:	f000 fae8 	bl	800b5fc <_ux_device_stack_endpoint_stall>

            /* We are done for class/vendor request.  */
            return(status);
 800b02c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b02e:	e066      	b.n	800b0fe <_ux_device_stack_control_request_process+0x29e>
        }

        /* At this point, the request must be a standard request that the device stack should handle.  */
        switch (request)
 800b030:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b032:	2b0c      	cmp	r3, #12
 800b034:	d857      	bhi.n	800b0e6 <_ux_device_stack_control_request_process+0x286>
 800b036:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b038:	009a      	lsls	r2, r3, #2
 800b03a:	4b34      	ldr	r3, [pc, #208]	@ (800b10c <_ux_device_stack_control_request_process+0x2ac>)
 800b03c:	18d3      	adds	r3, r2, r3
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	469f      	mov	pc, r3
        {

        case UX_GET_STATUS:

            status =  _ux_device_stack_get_status(request_type, request_index, request_length);
 800b042:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b044:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b046:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b048:	0018      	movs	r0, r3
 800b04a:	f000 fb09 	bl	800b660 <_ux_device_stack_get_status>
 800b04e:	0003      	movs	r3, r0
 800b050:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800b052:	e04b      	b.n	800b0ec <_ux_device_stack_control_request_process+0x28c>

        case UX_CLEAR_FEATURE:

            status =  _ux_device_stack_clear_feature(request_type, request_value, request_index);
 800b054:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b056:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b058:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b05a:	0018      	movs	r0, r3
 800b05c:	f7ff fd10 	bl	800aa80 <_ux_device_stack_clear_feature>
 800b060:	0003      	movs	r3, r0
 800b062:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800b064:	e042      	b.n	800b0ec <_ux_device_stack_control_request_process+0x28c>

        case UX_SET_FEATURE:

            status =  _ux_device_stack_set_feature(request_type, request_value, request_index);
 800b066:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b068:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b06a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b06c:	0018      	movs	r0, r3
 800b06e:	f000 fed9 	bl	800be24 <_ux_device_stack_set_feature>
 800b072:	0003      	movs	r3, r0
 800b074:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800b076:	e039      	b.n	800b0ec <_ux_device_stack_control_request_process+0x28c>

        case UX_SET_ADDRESS:
        
            /* Memorize the address. Some controllers memorize the address here. Some don't.  */
            dcd -> ux_slave_dcd_device_address =  request_value;
 800b078:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b07a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b07c:	615a      	str	r2, [r3, #20]

            /* Force the new address.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 800b07e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b080:	699b      	ldr	r3, [r3, #24]
 800b082:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b084:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b086:	2111      	movs	r1, #17
 800b088:	4798      	blx	r3
 800b08a:	0003      	movs	r3, r0
 800b08c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800b08e:	e02d      	b.n	800b0ec <_ux_device_stack_control_request_process+0x28c>

        case UX_GET_DESCRIPTOR:

            status =  _ux_device_stack_descriptor_send(request_value, request_index, request_length);
 800b090:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b092:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b094:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b096:	0018      	movs	r0, r3
 800b098:	f000 f83a 	bl	800b110 <_ux_device_stack_descriptor_send>
 800b09c:	0003      	movs	r3, r0
 800b09e:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800b0a0:	e024      	b.n	800b0ec <_ux_device_stack_control_request_process+0x28c>

        case UX_SET_DESCRIPTOR:

            status = UX_FUNCTION_NOT_SUPPORTED;
 800b0a2:	2354      	movs	r3, #84	@ 0x54
 800b0a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800b0a6:	e021      	b.n	800b0ec <_ux_device_stack_control_request_process+0x28c>

        case UX_GET_CONFIGURATION:

            status =  _ux_device_stack_configuration_get();
 800b0a8:	f7ff fd4a 	bl	800ab40 <_ux_device_stack_configuration_get>
 800b0ac:	0003      	movs	r3, r0
 800b0ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800b0b0:	e01c      	b.n	800b0ec <_ux_device_stack_control_request_process+0x28c>

        case UX_SET_CONFIGURATION:

            status =  _ux_device_stack_configuration_set(request_value);
 800b0b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0b4:	0018      	movs	r0, r3
 800b0b6:	f7ff fd69 	bl	800ab8c <_ux_device_stack_configuration_set>
 800b0ba:	0003      	movs	r3, r0
 800b0bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800b0be:	e015      	b.n	800b0ec <_ux_device_stack_control_request_process+0x28c>

        case UX_GET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_get(request_index);
 800b0c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0c2:	0018      	movs	r0, r3
 800b0c4:	f7ff fa10 	bl	800a4e8 <_ux_device_stack_alternate_setting_get>
 800b0c8:	0003      	movs	r3, r0
 800b0ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800b0cc:	e00e      	b.n	800b0ec <_ux_device_stack_control_request_process+0x28c>
                
        case UX_SET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 800b0ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b0d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0d2:	0011      	movs	r1, r2
 800b0d4:	0018      	movs	r0, r3
 800b0d6:	f7ff fa47 	bl	800a568 <_ux_device_stack_alternate_setting_set>
 800b0da:	0003      	movs	r3, r0
 800b0dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800b0de:	e005      	b.n	800b0ec <_ux_device_stack_control_request_process+0x28c>
                

        case UX_SYNCH_FRAME:

            status = UX_SUCCESS;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800b0e4:	e002      	b.n	800b0ec <_ux_device_stack_control_request_process+0x28c>

        default :

            status = UX_FUNCTION_NOT_SUPPORTED;
 800b0e6:	2354      	movs	r3, #84	@ 0x54
 800b0e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 800b0ea:	46c0      	nop			@ (mov r8, r8)
        }

        if (status != UX_SUCCESS)
 800b0ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d004      	beq.n	800b0fc <_ux_device_stack_control_request_process+0x29c>

            /* Stall the control endpoint to issue protocol error. */
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800b0f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0f4:	3318      	adds	r3, #24
 800b0f6:	0018      	movs	r0, r3
 800b0f8:	f000 fa80 	bl	800b5fc <_ux_device_stack_endpoint_stall>
    }

    /* Return the function status.  */
    return(status);
 800b0fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 800b0fe:	0018      	movs	r0, r3
 800b100:	46bd      	mov	sp, r7
 800b102:	b01b      	add	sp, #108	@ 0x6c
 800b104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b106:	46c0      	nop			@ (mov r8, r8)
 800b108:	200015a0 	.word	0x200015a0
 800b10c:	0800d208 	.word	0x0800d208

0800b110 <_ux_device_stack_descriptor_send>:
/*                                            requests with zero wIndex,  */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 800b110:	b590      	push	{r4, r7, lr}
 800b112:	b09b      	sub	sp, #108	@ 0x6c
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT               *endpoint;
UCHAR                           *device_framework;
UCHAR                           *device_framework_end;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
ULONG                           target_descriptor_length = 0;
 800b11c:	2300      	movs	r3, #0
 800b11e:	657b      	str	r3, [r7, #84]	@ 0x54
UINT                            status =  UX_ERROR;
 800b120:	23ff      	movs	r3, #255	@ 0xff
 800b122:	653b      	str	r3, [r7, #80]	@ 0x50

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800b124:	4bcd      	ldr	r3, [pc, #820]	@ (800b45c <_ux_device_stack_descriptor_send+0x34c>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800b12a:	4bcc      	ldr	r3, [pc, #816]	@ (800b45c <_ux_device_stack_descriptor_send+0x34c>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	3324      	adds	r3, #36	@ 0x24
 800b130:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800b132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b134:	3318      	adds	r3, #24
 800b136:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800b138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b13a:	3320      	adds	r3, #32
 800b13c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800b13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b140:	2203      	movs	r2, #3
 800b142:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Isolate the descriptor index.  */
    descriptor_index =  descriptor_type & 0xff;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	22ff      	movs	r2, #255	@ 0xff
 800b148:	4013      	ands	r3, r2
 800b14a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Reset the parsed index.  */
    parsed_descriptor_index =  0;
 800b14c:	2300      	movs	r3, #0
 800b14e:	667b      	str	r3, [r7, #100]	@ 0x64

    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	0a1b      	lsrs	r3, r3, #8
 800b154:	b2db      	uxtb	r3, r3
 800b156:	60fb      	str	r3, [r7, #12]

    /* Default descriptor length is host length.  */
    length =  host_length;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2b0f      	cmp	r3, #15
 800b160:	d900      	bls.n	800b164 <_ux_device_stack_descriptor_send+0x54>
 800b162:	e1d8      	b.n	800b516 <_ux_device_stack_descriptor_send+0x406>
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	009a      	lsls	r2, r3, #2
 800b168:	4bbd      	ldr	r3, [pc, #756]	@ (800b460 <_ux_device_stack_descriptor_send+0x350>)
 800b16a:	18d3      	adds	r3, r2, r3
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	469f      	mov	pc, r3
    {

    case UX_DEVICE_DESCRIPTOR_ITEM:

		/* Setup device descriptor length.  */
        if (host_length > UX_DEVICE_DESCRIPTOR_LENGTH)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2b12      	cmp	r3, #18
 800b174:	d901      	bls.n	800b17a <_ux_device_stack_descriptor_send+0x6a>
            length =  UX_DEVICE_DESCRIPTOR_LENGTH;
 800b176:	2312      	movs	r3, #18
 800b178:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Fall through.  */
    case UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM:

        /* Setup qualifier descriptor length.  */
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2b06      	cmp	r3, #6
 800b17e:	d104      	bne.n	800b18a <_ux_device_stack_descriptor_send+0x7a>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2b0a      	cmp	r3, #10
 800b184:	d901      	bls.n	800b18a <_ux_device_stack_descriptor_send+0x7a>
            host_length > UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH)
            length =  UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH;
 800b186:	230a      	movs	r3, #10
 800b188:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Fall through.  */
    case UX_OTG_DESCRIPTOR_ITEM:

        /* Setup OTG descriptor length.  */
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2b09      	cmp	r3, #9
 800b18e:	d104      	bne.n	800b19a <_ux_device_stack_descriptor_send+0x8a>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2b05      	cmp	r3, #5
 800b194:	d901      	bls.n	800b19a <_ux_device_stack_descriptor_send+0x8a>
            host_length > UX_OTG_DESCRIPTOR_LENGTH)
            length =  UX_OTG_DESCRIPTOR_LENGTH;
 800b196:	2305      	movs	r3, #5
 800b198:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* We may or may not have a device qualifier descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800b19a:	4bb0      	ldr	r3, [pc, #704]	@ (800b45c <_ux_device_stack_descriptor_send+0x34c>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	22cc      	movs	r2, #204	@ 0xcc
 800b1a0:	589b      	ldr	r3, [r3, r2]
 800b1a2:	663b      	str	r3, [r7, #96]	@ 0x60
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800b1a4:	4bad      	ldr	r3, [pc, #692]	@ (800b45c <_ux_device_stack_descriptor_send+0x34c>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	22d0      	movs	r2, #208	@ 0xd0
 800b1aa:	589b      	ldr	r3, [r3, r2]
 800b1ac:	65bb      	str	r3, [r7, #88]	@ 0x58
        device_framework_end = device_framework + device_framework_length;
 800b1ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b1b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b1b2:	18d3      	adds	r3, r2, r3
 800b1b4:	65fb      	str	r3, [r7, #92]	@ 0x5c

        /* Parse the device framework and locate a device qualifier descriptor.  */
        while (device_framework < device_framework_end)
 800b1b6:	e022      	b.n	800b1fe <_ux_device_stack_descriptor_send+0xee>
        {

            /* Get descriptor length.  */
            descriptor_length =  (ULONG) *device_framework;
 800b1b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Check if this is a descriptor expected.  */
            if (*(device_framework + 1) == descriptor_type)
 800b1be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	001a      	movs	r2, r3
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d110      	bne.n	800b1ee <_ux_device_stack_descriptor_send+0xde>
            {

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 800b1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b1d2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800b1d4:	0018      	movs	r0, r3
 800b1d6:	f7fd fd59 	bl	8008c8c <_ux_utility_memory_copy>
                                                device_framework, length); /* Use case of memcpy is verified. */

                /* Perform the data transfer.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e0:	0018      	movs	r0, r3
 800b1e2:	f000 fef8 	bl	800bfd6 <_ux_device_stack_transfer_request>
 800b1e6:	0003      	movs	r3, r0
 800b1e8:	653b      	str	r3, [r7, #80]	@ 0x50
                break;
 800b1ea:	46c0      	nop			@ (mov r8, r8)
            device_framework_length -=  descriptor_length;

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
        }
        break;
 800b1ec:	e19e      	b.n	800b52c <_ux_device_stack_descriptor_send+0x41c>
            device_framework_length -=  descriptor_length;
 800b1ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f2:	1ad3      	subs	r3, r2, r3
 800b1f4:	65bb      	str	r3, [r7, #88]	@ 0x58
            device_framework +=  descriptor_length;
 800b1f6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1fa:	18d3      	adds	r3, r2, r3
 800b1fc:	663b      	str	r3, [r7, #96]	@ 0x60
        while (device_framework < device_framework_end)
 800b1fe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b200:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b202:	429a      	cmp	r2, r3
 800b204:	d3d8      	bcc.n	800b1b8 <_ux_device_stack_descriptor_send+0xa8>
        break;
 800b206:	e191      	b.n	800b52c <_ux_device_stack_descriptor_send+0x41c>
#endif
    case UX_OTHER_SPEED_DESCRIPTOR_ITEM:
        /* Fall through.  */
    case UX_CONFIGURATION_DESCRIPTOR_ITEM:

        if (descriptor_type == UX_OTHER_SPEED_DESCRIPTOR_ITEM)
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2b07      	cmp	r3, #7
 800b20c:	d10e      	bne.n	800b22c <_ux_device_stack_descriptor_send+0x11c>
        {

            /* This request is used by the host to find out the capability of this device
            if it was running at full speed. The behavior is the same as in a GET_CONFIGURATIOn descriptor
            but we do not use the current device framework but rather the full speed framework. */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800b20e:	4b93      	ldr	r3, [pc, #588]	@ (800b45c <_ux_device_stack_descriptor_send+0x34c>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	22d4      	movs	r2, #212	@ 0xd4
 800b214:	589b      	ldr	r3, [r3, r2]
 800b216:	663b      	str	r3, [r7, #96]	@ 0x60
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800b218:	4b90      	ldr	r3, [pc, #576]	@ (800b45c <_ux_device_stack_descriptor_send+0x34c>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	22d8      	movs	r2, #216	@ 0xd8
 800b21e:	589b      	ldr	r3, [r3, r2]
 800b220:	65bb      	str	r3, [r7, #88]	@ 0x58
            device_framework_end = device_framework + device_framework_length;
 800b222:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b224:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b226:	18d3      	adds	r3, r2, r3
 800b228:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b22a:	e047      	b.n	800b2bc <_ux_device_stack_descriptor_send+0x1ac>
        else
        {

            /* We may have multiple configurations !, the index will tell us what
            configuration descriptor we need to return.  */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800b22c:	4b8b      	ldr	r3, [pc, #556]	@ (800b45c <_ux_device_stack_descriptor_send+0x34c>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	22cc      	movs	r2, #204	@ 0xcc
 800b232:	589b      	ldr	r3, [r3, r2]
 800b234:	663b      	str	r3, [r7, #96]	@ 0x60
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800b236:	4b89      	ldr	r3, [pc, #548]	@ (800b45c <_ux_device_stack_descriptor_send+0x34c>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	22d0      	movs	r2, #208	@ 0xd0
 800b23c:	589b      	ldr	r3, [r3, r2]
 800b23e:	65bb      	str	r3, [r7, #88]	@ 0x58
            device_framework_end = device_framework + device_framework_length;
 800b240:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b242:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b244:	18d3      	adds	r3, r2, r3
 800b246:	65fb      	str	r3, [r7, #92]	@ 0x5c
        }

        /* Parse the device framework and locate a configuration descriptor.  */
        while (device_framework < device_framework_end)
 800b248:	e038      	b.n	800b2bc <_ux_device_stack_descriptor_send+0x1ac>
        {

            /* Get descriptor length. */
            descriptor_length =  (ULONG) *device_framework;
 800b24a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	627b      	str	r3, [r7, #36]	@ 0x24

#ifndef UX_BOS_SUPPORT_DISABLE

            /* Check if we are finding BOS descriptor.  */
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2b0f      	cmp	r3, #15
 800b254:	d111      	bne.n	800b27a <_ux_device_stack_descriptor_send+0x16a>
            {
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 800b256:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b258:	3301      	adds	r3, #1
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	2b0f      	cmp	r3, #15
 800b25e:	d125      	bne.n	800b2ac <_ux_device_stack_descriptor_send+0x19c>
                {

                    /* Parse the BOS descriptor.  */
                    _ux_utility_descriptor_parse(device_framework,
 800b260:	2410      	movs	r4, #16
 800b262:	193b      	adds	r3, r7, r4
 800b264:	497f      	ldr	r1, [pc, #508]	@ (800b464 <_ux_device_stack_descriptor_send+0x354>)
 800b266:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800b268:	2204      	movs	r2, #4
 800b26a:	f7fd fa87 	bl	800877c <_ux_utility_descriptor_parse>
                                _ux_system_bos_descriptor_structure,
                                UX_BOS_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &bos_descriptor);

                    /* Get the length of entire BOS descriptor.  */
                    target_descriptor_length = bos_descriptor.wTotalLength;
 800b26e:	193b      	adds	r3, r7, r4
 800b270:	885b      	ldrh	r3, [r3, #2]
 800b272:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Descriptor is found.  */
                    status = UX_SUCCESS;
 800b274:	2300      	movs	r3, #0
 800b276:	653b      	str	r3, [r7, #80]	@ 0x50
                    break;
 800b278:	e024      	b.n	800b2c4 <_ux_device_stack_descriptor_send+0x1b4>

                /* Check if this is a configuration descriptor.  We are cheating here. Instead of creating
                a OTHER SPEED descriptor, we simply scan the configuration descriptor for the Full Speed
                framework and return this configuration after we manually changed the configuration descriptor
                item into a Other Speed Descriptor. */
                if (*(device_framework + 1) == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800b27a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b27c:	3301      	adds	r3, #1
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	2b02      	cmp	r3, #2
 800b282:	d113      	bne.n	800b2ac <_ux_device_stack_descriptor_send+0x19c>
                {

                    /* Check the index. It must be the same as the one requested.  */
                    if (parsed_descriptor_index == descriptor_index)
 800b284:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b288:	429a      	cmp	r2, r3
 800b28a:	d10c      	bne.n	800b2a6 <_ux_device_stack_descriptor_send+0x196>
                    {

                        /* Parse the configuration descriptor. */
                        _ux_utility_descriptor_parse(device_framework,
 800b28c:	2418      	movs	r4, #24
 800b28e:	193b      	adds	r3, r7, r4
 800b290:	4975      	ldr	r1, [pc, #468]	@ (800b468 <_ux_device_stack_descriptor_send+0x358>)
 800b292:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800b294:	2208      	movs	r2, #8
 800b296:	f7fd fa71 	bl	800877c <_ux_utility_descriptor_parse>
                                    _ux_system_configuration_descriptor_structure,
                                    UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &configuration_descriptor);

                        /* Get the length of entire configuration descriptor.  */
                        target_descriptor_length = configuration_descriptor.wTotalLength;
 800b29a:	193b      	adds	r3, r7, r4
 800b29c:	885b      	ldrh	r3, [r3, #2]
 800b29e:	657b      	str	r3, [r7, #84]	@ 0x54

                        /* Descriptor is found.  */
                        status = UX_SUCCESS;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	653b      	str	r3, [r7, #80]	@ 0x50
                        break;
 800b2a4:	e00e      	b.n	800b2c4 <_ux_device_stack_descriptor_send+0x1b4>
                    }
                    else
                    {

                        /* There may be more configuration descriptors in this framework.  */
                        parsed_descriptor_index++;
 800b2a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	667b      	str	r3, [r7, #100]	@ 0x64
                    }
                }
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 800b2ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b0:	1ad3      	subs	r3, r2, r3
 800b2b2:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 800b2b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b8:	18d3      	adds	r3, r2, r3
 800b2ba:	663b      	str	r3, [r7, #96]	@ 0x60
        while (device_framework < device_framework_end)
 800b2bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b2be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d3c2      	bcc.n	800b24a <_ux_device_stack_descriptor_send+0x13a>
        }

        /* Send the descriptor.  */
        if (status == UX_SUCCESS)
 800b2c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d000      	beq.n	800b2cc <_ux_device_stack_descriptor_send+0x1bc>
 800b2ca:	e12c      	b.n	800b526 <_ux_device_stack_descriptor_send+0x416>
        {

            /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                and do not return more than what is allowed.  */
            if (target_descriptor_length < host_length)
 800b2cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d202      	bcs.n	800b2da <_ux_device_stack_descriptor_send+0x1ca>
                length =  target_descriptor_length;
 800b2d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2d8:	e001      	b.n	800b2de <_ux_device_stack_descriptor_send+0x1ce>
            else
                length =  host_length;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* Check buffer length, since total descriptors length may exceed buffer...  */
            if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800b2de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b2e0:	2380      	movs	r3, #128	@ 0x80
 800b2e2:	005b      	lsls	r3, r3, #1
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d90d      	bls.n	800b304 <_ux_device_stack_descriptor_send+0x1f4>
            {
                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800b2e8:	2212      	movs	r2, #18
 800b2ea:	2109      	movs	r1, #9
 800b2ec:	2002      	movs	r0, #2
 800b2ee:	f7fd f971 	bl	80085d4 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800b2f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2f4:	699b      	ldr	r3, [r3, #24]
 800b2f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b2f8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b2fa:	2114      	movs	r1, #20
 800b2fc:	4798      	blx	r3
 800b2fe:	0003      	movs	r3, r0
 800b300:	653b      	str	r3, [r7, #80]	@ 0x50
                break;
 800b302:	e113      	b.n	800b52c <_ux_device_stack_descriptor_send+0x41c>
            }

            /* Copy the device descriptor into the transfer request memory.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 800b304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b30a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800b30c:	0018      	movs	r0, r3
 800b30e:	f7fd fcbd 	bl	8008c8c <_ux_utility_memory_copy>
                                device_framework, length); /* Use case of memcpy is verified. */

            /* Now we need to hack the found descriptor because this request expect a requested
                descriptor type instead of the regular descriptor.  */
            *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) = (UCHAR)descriptor_type;
 800b312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b314:	68db      	ldr	r3, [r3, #12]
 800b316:	3301      	adds	r3, #1
 800b318:	68fa      	ldr	r2, [r7, #12]
 800b31a:	b2d2      	uxtb	r2, r2
 800b31c:	701a      	strb	r2, [r3, #0]

            /* We can return the configuration descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b324:	0018      	movs	r0, r3
 800b326:	f000 fe56 	bl	800bfd6 <_ux_device_stack_transfer_request>
 800b32a:	0003      	movs	r3, r0
 800b32c:	653b      	str	r3, [r7, #80]	@ 0x50
        }
        break;
 800b32e:	e0fa      	b.n	800b526 <_ux_device_stack_descriptor_send+0x416>

    case UX_STRING_DESCRIPTOR_ITEM:

        /* We need to filter for the index 0 which is the language ID string.  */
        if (descriptor_index == 0)
 800b330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b332:	2b00      	cmp	r3, #0
 800b334:	d14d      	bne.n	800b3d2 <_ux_device_stack_descriptor_send+0x2c2>
        {

            /* We need to check request buffer size in case it's possible exceed. */
            if (_ux_system_slave -> ux_system_slave_language_id_framework_length + 2 > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800b336:	4b49      	ldr	r3, [pc, #292]	@ (800b45c <_ux_device_stack_descriptor_send+0x34c>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	22f0      	movs	r2, #240	@ 0xf0
 800b33c:	589b      	ldr	r3, [r3, r2]
 800b33e:	1c9a      	adds	r2, r3, #2
 800b340:	2380      	movs	r3, #128	@ 0x80
 800b342:	005b      	lsls	r3, r3, #1
 800b344:	429a      	cmp	r2, r3
 800b346:	d90d      	bls.n	800b364 <_ux_device_stack_descriptor_send+0x254>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800b348:	2212      	movs	r2, #18
 800b34a:	2109      	movs	r1, #9
 800b34c:	2002      	movs	r0, #2
 800b34e:	f7fd f941 	bl	80085d4 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800b352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b354:	699b      	ldr	r3, [r3, #24]
 800b356:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b358:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b35a:	2114      	movs	r1, #20
 800b35c:	4798      	blx	r3
 800b35e:	0003      	movs	r3, r0
 800b360:	653b      	str	r3, [r7, #80]	@ 0x50
                break;
 800b362:	e0e3      	b.n	800b52c <_ux_device_stack_descriptor_send+0x41c>
            }

            /* We have a request to send back the language ID list. Use the transfer request buffer.  */
            string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800b364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b366:	68db      	ldr	r3, [r3, #12]
 800b368:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Store the total length of the response.  */
            *string_memory =  (UCHAR)(_ux_system_slave -> ux_system_slave_language_id_framework_length + 2);
 800b36a:	4b3c      	ldr	r3, [pc, #240]	@ (800b45c <_ux_device_stack_descriptor_send+0x34c>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	22f0      	movs	r2, #240	@ 0xf0
 800b370:	589b      	ldr	r3, [r3, r2]
 800b372:	b2db      	uxtb	r3, r3
 800b374:	3302      	adds	r3, #2
 800b376:	b2da      	uxtb	r2, r3
 800b378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b37a:	701a      	strb	r2, [r3, #0]

            /* Store the descriptor type.  */
            *(string_memory +1) =  UX_STRING_DESCRIPTOR_ITEM;
 800b37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b37e:	3301      	adds	r3, #1
 800b380:	2203      	movs	r2, #3
 800b382:	701a      	strb	r2, [r3, #0]

            /* Store the language ID into the buffer.  */
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 800b384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b386:	1c98      	adds	r0, r3, #2
 800b388:	4b34      	ldr	r3, [pc, #208]	@ (800b45c <_ux_device_stack_descriptor_send+0x34c>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	22ec      	movs	r2, #236	@ 0xec
 800b38e:	5899      	ldr	r1, [r3, r2]
                                                        _ux_system_slave -> ux_system_slave_language_id_framework_length); /* Use case of memcpy is verified. */
 800b390:	4b32      	ldr	r3, [pc, #200]	@ (800b45c <_ux_device_stack_descriptor_send+0x34c>)
 800b392:	681b      	ldr	r3, [r3, #0]
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 800b394:	22f0      	movs	r2, #240	@ 0xf0
 800b396:	589b      	ldr	r3, [r3, r2]
 800b398:	001a      	movs	r2, r3
 800b39a:	f7fd fc77 	bl	8008c8c <_ux_utility_memory_copy>

            /* Filter the length asked/required.  */
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 800b39e:	4b2f      	ldr	r3, [pc, #188]	@ (800b45c <_ux_device_stack_descriptor_send+0x34c>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	22f0      	movs	r2, #240	@ 0xf0
 800b3a4:	589b      	ldr	r3, [r3, r2]
 800b3a6:	3302      	adds	r3, #2
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d906      	bls.n	800b3bc <_ux_device_stack_descriptor_send+0x2ac>
                length =  _ux_system_slave -> ux_system_slave_language_id_framework_length + 2;
 800b3ae:	4b2b      	ldr	r3, [pc, #172]	@ (800b45c <_ux_device_stack_descriptor_send+0x34c>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	22f0      	movs	r2, #240	@ 0xf0
 800b3b4:	589b      	ldr	r3, [r3, r2]
 800b3b6:	3302      	adds	r3, #2
 800b3b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3ba:	e001      	b.n	800b3c0 <_ux_device_stack_descriptor_send+0x2b0>
            else
                length =  host_length;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* We can return the string language ID descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c6:	0018      	movs	r0, r3
 800b3c8:	f000 fe05 	bl	800bfd6 <_ux_device_stack_transfer_request>
 800b3cc:	0003      	movs	r3, r0
 800b3ce:	653b      	str	r3, [r7, #80]	@ 0x50
                /* Could not find the required string index. Stall the endpoint.  */
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
                return(UX_ERROR);
            }
        }
        break;
 800b3d0:	e0ab      	b.n	800b52a <_ux_device_stack_descriptor_send+0x41a>
            string_framework =  _ux_system_slave -> ux_system_slave_string_framework;
 800b3d2:	4b22      	ldr	r3, [pc, #136]	@ (800b45c <_ux_device_stack_descriptor_send+0x34c>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	22e4      	movs	r2, #228	@ 0xe4
 800b3d8:	589b      	ldr	r3, [r3, r2]
 800b3da:	64bb      	str	r3, [r7, #72]	@ 0x48
            string_framework_length =  _ux_system_slave -> ux_system_slave_string_framework_length;
 800b3dc:	4b1f      	ldr	r3, [pc, #124]	@ (800b45c <_ux_device_stack_descriptor_send+0x34c>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	22e8      	movs	r2, #232	@ 0xe8
 800b3e2:	589b      	ldr	r3, [r3, r2]
 800b3e4:	647b      	str	r3, [r7, #68]	@ 0x44
            while (string_framework_length != 0)
 800b3e6:	e087      	b.n	800b4f8 <_ux_device_stack_descriptor_send+0x3e8>
                if (_ux_utility_short_get(string_framework) == request_index)
 800b3e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3ea:	0018      	movs	r0, r3
 800b3ec:	f7fd fcec 	bl	8008dc8 <_ux_utility_short_get>
 800b3f0:	0002      	movs	r2, r0
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d170      	bne.n	800b4da <_ux_device_stack_descriptor_send+0x3ca>
                    if (*(string_framework + 2) == descriptor_index)
 800b3f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3fa:	3302      	adds	r3, #2
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	001a      	movs	r2, r3
 800b400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b402:	4293      	cmp	r3, r2
 800b404:	d169      	bne.n	800b4da <_ux_device_stack_descriptor_send+0x3ca>
                        if (((*(string_framework + 3)*2) + 2) > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800b406:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b408:	3303      	adds	r3, #3
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	3301      	adds	r3, #1
 800b40e:	005a      	lsls	r2, r3, #1
 800b410:	2380      	movs	r3, #128	@ 0x80
 800b412:	005b      	lsls	r3, r3, #1
 800b414:	429a      	cmp	r2, r3
 800b416:	dd0d      	ble.n	800b434 <_ux_device_stack_descriptor_send+0x324>
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800b418:	2212      	movs	r2, #18
 800b41a:	2109      	movs	r1, #9
 800b41c:	2002      	movs	r0, #2
 800b41e:	f7fd f8d9 	bl	80085d4 <_ux_system_error_handler>
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800b422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b424:	699b      	ldr	r3, [r3, #24]
 800b426:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b428:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b42a:	2114      	movs	r1, #20
 800b42c:	4798      	blx	r3
 800b42e:	0003      	movs	r3, r0
 800b430:	653b      	str	r3, [r7, #80]	@ 0x50
                            break;
 800b432:	e065      	b.n	800b500 <_ux_device_stack_descriptor_send+0x3f0>
                        string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800b434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	62bb      	str	r3, [r7, #40]	@ 0x28
                        *string_memory =  (UCHAR)((*(string_framework + 3)*2) + 2);
 800b43a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b43c:	3303      	adds	r3, #3
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	3301      	adds	r3, #1
 800b442:	b2db      	uxtb	r3, r3
 800b444:	18db      	adds	r3, r3, r3
 800b446:	b2da      	uxtb	r2, r3
 800b448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b44a:	701a      	strb	r2, [r3, #0]
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 800b44c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b44e:	3301      	adds	r3, #1
 800b450:	2203      	movs	r2, #3
 800b452:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 800b454:	2300      	movs	r3, #0
 800b456:	643b      	str	r3, [r7, #64]	@ 0x40
 800b458:	e01d      	b.n	800b496 <_ux_device_stack_descriptor_send+0x386>
 800b45a:	46c0      	nop			@ (mov r8, r8)
 800b45c:	200015a0 	.word	0x200015a0
 800b460:	0800d23c 	.word	0x0800d23c
 800b464:	20000074 	.word	0x20000074
 800b468:	20000060 	.word	0x20000060
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 800b46c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b46e:	3304      	adds	r3, #4
 800b470:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b472:	18d2      	adds	r2, r2, r3
 800b474:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b476:	3301      	adds	r3, #1
 800b478:	005b      	lsls	r3, r3, #1
 800b47a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b47c:	18cb      	adds	r3, r1, r3
 800b47e:	7812      	ldrb	r2, [r2, #0]
 800b480:	701a      	strb	r2, [r3, #0]
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 800b482:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b484:	005b      	lsls	r3, r3, #1
 800b486:	3303      	adds	r3, #3
 800b488:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b48a:	18d3      	adds	r3, r2, r3
 800b48c:	2200      	movs	r2, #0
 800b48e:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 800b490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b492:	3301      	adds	r3, #1
 800b494:	643b      	str	r3, [r7, #64]	@ 0x40
 800b496:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b498:	3303      	adds	r3, #3
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	001a      	movs	r2, r3
 800b49e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d3e3      	bcc.n	800b46c <_ux_device_stack_descriptor_send+0x35c>
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 800b4a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4a6:	3303      	adds	r3, #3
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	005b      	lsls	r3, r3, #1
 800b4ae:	001a      	movs	r2, r3
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d906      	bls.n	800b4c4 <_ux_device_stack_descriptor_send+0x3b4>
                            length =  (ULONG)((*(string_framework + 3)*2) + 2);
 800b4b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4b8:	3303      	adds	r3, #3
 800b4ba:	781b      	ldrb	r3, [r3, #0]
 800b4bc:	3301      	adds	r3, #1
 800b4be:	005b      	lsls	r3, r3, #1
 800b4c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4c2:	e001      	b.n	800b4c8 <_ux_device_stack_descriptor_send+0x3b8>
                            length =  host_length;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b4cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ce:	0018      	movs	r0, r3
 800b4d0:	f000 fd81 	bl	800bfd6 <_ux_device_stack_transfer_request>
 800b4d4:	0003      	movs	r3, r0
 800b4d6:	653b      	str	r3, [r7, #80]	@ 0x50
                        break;
 800b4d8:	e012      	b.n	800b500 <_ux_device_stack_descriptor_send+0x3f0>
                string_framework_length -=  (ULONG) *(string_framework + 3) + 4;
 800b4da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4dc:	3303      	adds	r3, #3
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	001a      	movs	r2, r3
 800b4e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4e4:	1a9b      	subs	r3, r3, r2
 800b4e6:	3b04      	subs	r3, #4
 800b4e8:	647b      	str	r3, [r7, #68]	@ 0x44
                string_framework +=  (ULONG) *(string_framework + 3) + 4;
 800b4ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4ec:	3303      	adds	r3, #3
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	3304      	adds	r3, #4
 800b4f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4f4:	18d3      	adds	r3, r2, r3
 800b4f6:	64bb      	str	r3, [r7, #72]	@ 0x48
            while (string_framework_length != 0)
 800b4f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d000      	beq.n	800b500 <_ux_device_stack_descriptor_send+0x3f0>
 800b4fe:	e773      	b.n	800b3e8 <_ux_device_stack_descriptor_send+0x2d8>
            if (string_framework_length == 0)
 800b500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b502:	2b00      	cmp	r3, #0
 800b504:	d111      	bne.n	800b52a <_ux_device_stack_descriptor_send+0x41a>
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800b506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b508:	699b      	ldr	r3, [r3, #24]
 800b50a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b50c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b50e:	2114      	movs	r1, #20
 800b510:	4798      	blx	r3
                return(UX_ERROR);
 800b512:	23ff      	movs	r3, #255	@ 0xff
 800b514:	e00b      	b.n	800b52e <_ux_device_stack_descriptor_send+0x41e>

    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800b516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b518:	699b      	ldr	r3, [r3, #24]
 800b51a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b51c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b51e:	2114      	movs	r1, #20
 800b520:	4798      	blx	r3
        return(UX_ERROR);
 800b522:	23ff      	movs	r3, #255	@ 0xff
 800b524:	e003      	b.n	800b52e <_ux_device_stack_descriptor_send+0x41e>
        break;
 800b526:	46c0      	nop			@ (mov r8, r8)
 800b528:	e000      	b.n	800b52c <_ux_device_stack_descriptor_send+0x41c>
        break;
 800b52a:	46c0      	nop			@ (mov r8, r8)
    }

    /* Return the status to the caller.  */
    return(status);
 800b52c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 800b52e:	0018      	movs	r0, r3
 800b530:	46bd      	mov	sp, r7
 800b532:	b01b      	add	sp, #108	@ 0x6c
 800b534:	bd90      	pop	{r4, r7, pc}
 800b536:	46c0      	nop			@ (mov r8, r8)

0800b538 <_ux_device_stack_disconnect>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b092      	sub	sp, #72	@ 0x48
 800b53c:	af00      	add	r7, sp, #0
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE          *next_interface; 
#endif
UX_SLAVE_CLASS              *class_ptr;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
 800b53e:	23ff      	movs	r3, #255	@ 0xff
 800b540:	643b      	str	r3, [r7, #64]	@ 0x40
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800b542:	4b2d      	ldr	r3, [pc, #180]	@ (800b5f8 <_ux_device_stack_disconnect+0xc0>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800b548:	4b2b      	ldr	r3, [pc, #172]	@ (800b5f8 <_ux_device_stack_disconnect+0xc0>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	3324      	adds	r3, #36	@ 0x24
 800b54e:	63bb      	str	r3, [r7, #56]	@ 0x38
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 800b550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2b03      	cmp	r3, #3
 800b556:	d127      	bne.n	800b5a8 <_ux_device_stack_disconnect+0x70>
    {
        /* Get the pointer to the first interface.  */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800b558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b55a:	2290      	movs	r2, #144	@ 0x90
 800b55c:	589b      	ldr	r3, [r3, r2]
 800b55e:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface_ptr != UX_NULL)
 800b560:	e01c      	b.n	800b59c <_ux_device_stack_disconnect+0x64>
        {
#endif

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 800b562:	1d3b      	adds	r3, r7, #4
 800b564:	2203      	movs	r2, #3
 800b566:	601a      	str	r2, [r3, #0]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 800b568:	1d3b      	adds	r3, r7, #4
 800b56a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b56c:	609a      	str	r2, [r3, #8]

            /* Get the pointer to the class container of this interface.  */
            class_ptr =  interface_ptr -> ux_slave_interface_class;
 800b56e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	637b      	str	r3, [r7, #52]	@ 0x34
            
            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800b574:	1d3b      	adds	r3, r7, #4
 800b576:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b578:	621a      	str	r2, [r3, #32]

            /* If there is a class container for this instance, deactivate it.  */
            if (class_ptr != UX_NULL)
 800b57a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d004      	beq.n	800b58a <_ux_device_stack_disconnect+0x52>
            
                /* Call the class with the DEACTIVATE signal.  */
                class_ptr -> ux_slave_class_entry_function(&class_command);
 800b580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b584:	1d3a      	adds	r2, r7, #4
 800b586:	0010      	movs	r0, r2
 800b588:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800b58a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b58c:	699b      	ldr	r3, [r3, #24]
 800b58e:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface_ptr);
 800b590:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b592:	0018      	movs	r0, r3
 800b594:	f000 fa84 	bl	800baa0 <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface_ptr =  next_interface;
 800b598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b59a:	647b      	str	r3, [r7, #68]	@ 0x44
        while (interface_ptr != UX_NULL)
 800b59c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d1df      	bne.n	800b562 <_ux_device_stack_disconnect+0x2a>
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800b5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	601a      	str	r2, [r3, #0]
    }

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 800b5a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d108      	bne.n	800b5c2 <_ux_device_stack_disconnect+0x8a>

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 800b5b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5b2:	699b      	ldr	r3, [r3, #24]
                                (VOID *) &device -> ux_slave_device_control_endpoint);
 800b5b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b5b6:	3218      	adds	r2, #24
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 800b5b8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b5ba:	210f      	movs	r1, #15
 800b5bc:	4798      	blx	r3
 800b5be:	0003      	movs	r3, r0
 800b5c0:	643b      	str	r3, [r7, #64]	@ 0x40

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 800b5c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c4:	2280      	movs	r2, #128	@ 0x80
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	5099      	str	r1, [r3, r2]

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 800b5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	601a      	str	r2, [r3, #0]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800b5d0:	4b09      	ldr	r3, [pc, #36]	@ (800b5f8 <_ux_device_stack_disconnect+0xc0>)
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	23b2      	movs	r3, #178	@ 0xb2
 800b5d6:	005b      	lsls	r3, r3, #1
 800b5d8:	58d3      	ldr	r3, [r2, r3]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d006      	beq.n	800b5ec <_ux_device_stack_disconnect+0xb4>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 800b5de:	4b06      	ldr	r3, [pc, #24]	@ (800b5f8 <_ux_device_stack_disconnect+0xc0>)
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	23b2      	movs	r3, #178	@ 0xb2
 800b5e4:	005b      	lsls	r3, r3, #1
 800b5e6:	58d3      	ldr	r3, [r2, r3]
 800b5e8:	200a      	movs	r0, #10
 800b5ea:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
 800b5ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800b5ee:	0018      	movs	r0, r3
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	b012      	add	sp, #72	@ 0x48
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	46c0      	nop			@ (mov r8, r8)
 800b5f8:	200015a0 	.word	0x200015a0

0800b5fc <_ux_device_stack_endpoint_stall>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b086      	sub	sp, #24
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800b604:	4b15      	ldr	r3, [pc, #84]	@ (800b65c <_ux_device_stack_endpoint_stall+0x60>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	613b      	str	r3, [r7, #16]

    /* Assume device is in an invalid state here in order to reduce code in following 
       section where interrupts are disabled.  */
    status =  UX_ERROR;
 800b60a:	23ff      	movs	r3, #255	@ 0xff
 800b60c:	617b      	str	r3, [r7, #20]

    /* Ensure we don't change the endpoint's state after disconnection routine
       resets it.  */
    UX_DISABLE
 800b60e:	f7f5 fc49 	bl	8000ea4 <_ux_utility_interrupt_disable>
 800b612:	0003      	movs	r3, r0
 800b614:	60fb      	str	r3, [r7, #12]

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 800b616:	4b11      	ldr	r3, [pc, #68]	@ (800b65c <_ux_device_stack_endpoint_stall+0x60>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d014      	beq.n	800b64a <_ux_device_stack_endpoint_stall+0x4e>
        endpoint -> ux_slave_endpoint_state != UX_ENDPOINT_HALTED)
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	685b      	ldr	r3, [r3, #4]
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 800b624:	2b02      	cmp	r3, #2
 800b626:	d010      	beq.n	800b64a <_ux_device_stack_endpoint_stall+0x4e>
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	699b      	ldr	r3, [r3, #24]
 800b62c:	687a      	ldr	r2, [r7, #4]
 800b62e:	6938      	ldr	r0, [r7, #16]
 800b630:	2114      	movs	r1, #20
 800b632:	4798      	blx	r3
 800b634:	0003      	movs	r3, r0
 800b636:	617b      	str	r3, [r7, #20]

        /* Mark the endpoint state.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	7bdb      	ldrb	r3, [r3, #15]
 800b63c:	001a      	movs	r2, r3
 800b63e:	2303      	movs	r3, #3
 800b640:	4013      	ands	r3, r2
 800b642:	d002      	beq.n	800b64a <_ux_device_stack_endpoint_stall+0x4e>
            UX_CONTROL_ENDPOINT)
            endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2202      	movs	r2, #2
 800b648:	605a      	str	r2, [r3, #4]
    }

    /* Restore interrupts.  */
    UX_RESTORE
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	0018      	movs	r0, r3
 800b64e:	f7f5 fc38 	bl	8000ec2 <_ux_utility_interrupt_restore>

    /* Return completion status.  */
    return(status);       
 800b652:	697b      	ldr	r3, [r7, #20]
}
 800b654:	0018      	movs	r0, r3
 800b656:	46bd      	mov	sp, r7
 800b658:	b006      	add	sp, #24
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	200015a0 	.word	0x200015a0

0800b660 <_ux_device_stack_get_status>:
/*                                            supported bi-dir-endpoints, */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b08a      	sub	sp, #40	@ 0x28
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_GET_STATUS, request_type, request_index, request_length, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800b66c:	4b3c      	ldr	r3, [pc, #240]	@ (800b760 <_ux_device_stack_get_status+0x100>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	623b      	str	r3, [r7, #32]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800b672:	4b3b      	ldr	r3, [pc, #236]	@ (800b760 <_ux_device_stack_get_status+0x100>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	3324      	adds	r3, #36	@ 0x24
 800b678:	61fb      	str	r3, [r7, #28]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800b67a:	69fb      	ldr	r3, [r7, #28]
 800b67c:	3318      	adds	r3, #24
 800b67e:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800b680:	69bb      	ldr	r3, [r7, #24]
 800b682:	3320      	adds	r3, #32
 800b684:	617b      	str	r3, [r7, #20]

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	68db      	ldr	r3, [r3, #12]
 800b68a:	2200      	movs	r2, #0
 800b68c:	701a      	strb	r2, [r3, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	3301      	adds	r3, #1
 800b694:	2200      	movs	r2, #0
 800b696:	701a      	strb	r2, [r3, #0]
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
 800b698:	2302      	movs	r3, #2
 800b69a:	627b      	str	r3, [r7, #36]	@ 0x24
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2203      	movs	r2, #3
 800b6a0:	4013      	ands	r3, r2
 800b6a2:	d002      	beq.n	800b6aa <_ux_device_stack_get_status+0x4a>
 800b6a4:	2b02      	cmp	r3, #2
 800b6a6:	d024      	beq.n	800b6f2 <_ux_device_stack_get_status+0x92>
 800b6a8:	e03e      	b.n	800b728 <_ux_device_stack_get_status+0xc8>
    
    case UX_REQUEST_TARGET_DEVICE:

        /* When the device is probed, it is either for the power/remote capabilities or OTG role swap.  
           We differentiate with the Windex, 0 or OTG status Selector.  */
        if (request_index == UX_OTG_STATUS_SELECTOR)
 800b6aa:	68ba      	ldr	r2, [r7, #8]
 800b6ac:	23f0      	movs	r3, #240	@ 0xf0
 800b6ae:	021b      	lsls	r3, r3, #8
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d102      	bne.n	800b6ba <_ux_device_stack_get_status+0x5a>
        {

            /* Set the data length to 1.  */
            data_length = 1;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	627b      	str	r3, [r7, #36]	@ 0x24

            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
        }
        
        break;
 800b6b8:	e03e      	b.n	800b738 <_ux_device_stack_get_status+0xd8>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 800b6ba:	4b29      	ldr	r3, [pc, #164]	@ (800b760 <_ux_device_stack_get_status+0x100>)
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	23a2      	movs	r3, #162	@ 0xa2
 800b6c0:	005b      	lsls	r3, r3, #1
 800b6c2:	58d3      	ldr	r3, [r2, r3]
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	d103      	bne.n	800b6d0 <_ux_device_stack_get_status+0x70>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	68db      	ldr	r3, [r3, #12]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	701a      	strb	r2, [r3, #0]
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 800b6d0:	4b23      	ldr	r3, [pc, #140]	@ (800b760 <_ux_device_stack_get_status+0x100>)
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	23a6      	movs	r3, #166	@ 0xa6
 800b6d6:	005b      	lsls	r3, r3, #1
 800b6d8:	58d3      	ldr	r3, [r2, r3]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d02c      	beq.n	800b738 <_ux_device_stack_get_status+0xd8>
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	68db      	ldr	r3, [r3, #12]
 800b6e2:	781a      	ldrb	r2, [r3, #0]
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	2102      	movs	r1, #2
 800b6ea:	430a      	orrs	r2, r1
 800b6ec:	b2d2      	uxtb	r2, r2
 800b6ee:	701a      	strb	r2, [r3, #0]
        break;
 800b6f0:	e022      	b.n	800b738 <_ux_device_stack_get_status+0xd8>
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index & (UINT)~UX_ENDPOINT_DIRECTION));
#else

        /* This feature returns the halt state of a specific endpoint.  The endpoint address
           is used to retrieve the endpoint container.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index));
 800b6f2:	6a3b      	ldr	r3, [r7, #32]
 800b6f4:	699b      	ldr	r3, [r3, #24]
 800b6f6:	68ba      	ldr	r2, [r7, #8]
 800b6f8:	6a38      	ldr	r0, [r7, #32]
 800b6fa:	2115      	movs	r1, #21
 800b6fc:	4798      	blx	r3
 800b6fe:	0003      	movs	r3, r0
 800b700:	613b      	str	r3, [r7, #16]
#endif

        /* Check the status. We may have a unknown endpoint.  */
        if (status != UX_ERROR)
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	2bff      	cmp	r3, #255	@ 0xff
 800b706:	d007      	beq.n	800b718 <_ux_device_stack_get_status+0xb8>
        {

            if (status == UX_TRUE)
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d116      	bne.n	800b73c <_ux_device_stack_get_status+0xdc>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	2201      	movs	r2, #1
 800b714:	701a      	strb	r2, [r3, #0]
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
    
            /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
            return(UX_SUCCESS);            
        }
        break;
 800b716:	e011      	b.n	800b73c <_ux_device_stack_get_status+0xdc>
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800b718:	6a3b      	ldr	r3, [r7, #32]
 800b71a:	699b      	ldr	r3, [r3, #24]
 800b71c:	69ba      	ldr	r2, [r7, #24]
 800b71e:	6a38      	ldr	r0, [r7, #32]
 800b720:	2114      	movs	r1, #20
 800b722:	4798      	blx	r3
            return(UX_SUCCESS);            
 800b724:	2300      	movs	r3, #0
 800b726:	e016      	b.n	800b756 <_ux_device_stack_get_status+0xf6>

    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800b728:	6a3b      	ldr	r3, [r7, #32]
 800b72a:	699b      	ldr	r3, [r3, #24]
 800b72c:	69ba      	ldr	r2, [r7, #24]
 800b72e:	6a38      	ldr	r0, [r7, #32]
 800b730:	2114      	movs	r1, #20
 800b732:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800b734:	2300      	movs	r3, #0
 800b736:	e00e      	b.n	800b756 <_ux_device_stack_get_status+0xf6>
        break;
 800b738:	46c0      	nop			@ (mov r8, r8)
 800b73a:	e000      	b.n	800b73e <_ux_device_stack_get_status+0xde>
        break;
 800b73c:	46c0      	nop			@ (mov r8, r8)
    }
    
    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	2203      	movs	r2, #3
 800b742:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 800b744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b746:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	0018      	movs	r0, r3
 800b74c:	f000 fc43 	bl	800bfd6 <_ux_device_stack_transfer_request>
 800b750:	0003      	movs	r3, r0
 800b752:	613b      	str	r3, [r7, #16]

    /* Return the function status.  */
    return(status);
 800b754:	693b      	ldr	r3, [r7, #16]
}
 800b756:	0018      	movs	r0, r3
 800b758:	46bd      	mov	sp, r7
 800b75a:	b00a      	add	sp, #40	@ 0x28
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	46c0      	nop			@ (mov r8, r8)
 800b760:	200015a0 	.word	0x200015a0

0800b764 <_ux_device_stack_initialize>:
UINT  _ux_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,
                                  UCHAR * device_framework_full_speed, ULONG device_framework_length_full_speed,
                                  UCHAR * string_framework, ULONG string_framework_length,
                                  UCHAR * language_id_framework, ULONG language_id_framework_length,
                                  UINT (*ux_system_slave_change_function)(ULONG))
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b094      	sub	sp, #80	@ 0x50
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	60b9      	str	r1, [r7, #8]
 800b76e:	607a      	str	r2, [r7, #4]
 800b770:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800b772:	4bca      	ldr	r3, [pc, #808]	@ (800ba9c <_ux_device_stack_initialize+0x338>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	3324      	adds	r3, #36	@ 0x24
 800b778:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Store the high speed device framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_high_speed =             device_framework_high_speed;
 800b77a:	4bc8      	ldr	r3, [pc, #800]	@ (800ba9c <_ux_device_stack_initialize+0x338>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	21dc      	movs	r1, #220	@ 0xdc
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	505a      	str	r2, [r3, r1]
    _ux_system_slave -> ux_system_slave_device_framework_length_high_speed =      device_framework_length_high_speed;
 800b784:	4bc5      	ldr	r3, [pc, #788]	@ (800ba9c <_ux_device_stack_initialize+0x338>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	21e0      	movs	r1, #224	@ 0xe0
 800b78a:	68ba      	ldr	r2, [r7, #8]
 800b78c:	505a      	str	r2, [r3, r1]

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_full_speed =             device_framework_full_speed;
 800b78e:	4bc3      	ldr	r3, [pc, #780]	@ (800ba9c <_ux_device_stack_initialize+0x338>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	21d4      	movs	r1, #212	@ 0xd4
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	505a      	str	r2, [r3, r1]
    _ux_system_slave -> ux_system_slave_device_framework_length_full_speed =      device_framework_length_full_speed;
 800b798:	4bc0      	ldr	r3, [pc, #768]	@ (800ba9c <_ux_device_stack_initialize+0x338>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	21d8      	movs	r1, #216	@ 0xd8
 800b79e:	683a      	ldr	r2, [r7, #0]
 800b7a0:	505a      	str	r2, [r3, r1]

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_string_framework =                         string_framework;
 800b7a2:	4bbe      	ldr	r3, [pc, #760]	@ (800ba9c <_ux_device_stack_initialize+0x338>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	21e4      	movs	r1, #228	@ 0xe4
 800b7a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b7aa:	505a      	str	r2, [r3, r1]
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 800b7ac:	4bbb      	ldr	r3, [pc, #748]	@ (800ba9c <_ux_device_stack_initialize+0x338>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	21e8      	movs	r1, #232	@ 0xe8
 800b7b2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b7b4:	505a      	str	r2, [r3, r1]

    /* Store the language ID list in the project structure.  */
    _ux_system_slave -> ux_system_slave_language_id_framework =                 language_id_framework;
 800b7b6:	4bb9      	ldr	r3, [pc, #740]	@ (800ba9c <_ux_device_stack_initialize+0x338>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	21ec      	movs	r1, #236	@ 0xec
 800b7bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b7be:	505a      	str	r2, [r3, r1]
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 800b7c0:	4bb6      	ldr	r3, [pc, #728]	@ (800ba9c <_ux_device_stack_initialize+0x338>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	21f0      	movs	r1, #240	@ 0xf0
 800b7c6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b7c8:	505a      	str	r2, [r3, r1]

    /* Store the max number of slave class drivers in the project structure.  */
    UX_SYSTEM_DEVICE_MAX_CLASS_SET(UX_MAX_SLAVE_CLASS_DRIVER);
    
    /* Store the device state change function callback.  */
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 800b7ca:	4bb4      	ldr	r3, [pc, #720]	@ (800ba9c <_ux_device_stack_initialize+0x338>)
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	23b2      	movs	r3, #178	@ 0xb2
 800b7d0:	005b      	lsls	r3, r3, #1
 800b7d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b7d4:	50d1      	str	r1, [r2, r3]

    /* Allocate memory for the classes.
     * sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow is checked
     * outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 800b7d6:	2264      	movs	r2, #100	@ 0x64
 800b7d8:	2100      	movs	r1, #0
 800b7da:	2000      	movs	r0, #0
 800b7dc:	f7fd f846 	bl	800886c <_ux_utility_memory_allocate>
 800b7e0:	0003      	movs	r3, r0
 800b7e2:	623b      	str	r3, [r7, #32]
    if (memory == UX_NULL)
 800b7e4:	6a3b      	ldr	r3, [r7, #32]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d101      	bne.n	800b7ee <_ux_device_stack_initialize+0x8a>
        return(UX_MEMORY_INSUFFICIENT);
 800b7ea:	2312      	movs	r3, #18
 800b7ec:	e152      	b.n	800ba94 <_ux_device_stack_initialize+0x330>
    
    /* Save this memory allocation in the USBX project.  */
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 800b7ee:	4bab      	ldr	r3, [pc, #684]	@ (800ba9c <_ux_device_stack_initialize+0x338>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	21fc      	movs	r1, #252	@ 0xfc
 800b7f4:	6a3a      	ldr	r2, [r7, #32]
 800b7f6:	505a      	str	r2, [r3, r1]

    /* Allocate some memory for the Control Endpoint.  First get the address of the transfer request for the 
       control endpoint. */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 800b7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7fa:	3338      	adds	r3, #56	@ 0x38
 800b7fc:	61fb      	str	r3, [r7, #28]

    /* Acquire a buffer for the size of the endpoint.  */
    transfer_request -> ux_slave_transfer_request_data_pointer =
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 800b7fe:	2380      	movs	r3, #128	@ 0x80
 800b800:	005b      	lsls	r3, r3, #1
 800b802:	001a      	movs	r2, r3
 800b804:	2101      	movs	r1, #1
 800b806:	2000      	movs	r0, #0
 800b808:	f7fd f830 	bl	800886c <_ux_utility_memory_allocate>
 800b80c:	0002      	movs	r2, r0
    transfer_request -> ux_slave_transfer_request_data_pointer =
 800b80e:	69fb      	ldr	r3, [r7, #28]
 800b810:	60da      	str	r2, [r3, #12]

    /* Ensure we have enough memory.  */
    if (transfer_request -> ux_slave_transfer_request_data_pointer == UX_NULL)
 800b812:	69fb      	ldr	r3, [r7, #28]
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d102      	bne.n	800b820 <_ux_device_stack_initialize+0xbc>
        status = UX_MEMORY_INSUFFICIENT;
 800b81a:	2312      	movs	r3, #18
 800b81c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b81e:	e001      	b.n	800b824 <_ux_device_stack_initialize+0xc0>
    else
        status = UX_SUCCESS;
 800b820:	2300      	movs	r3, #0
 800b822:	64bb      	str	r3, [r7, #72]	@ 0x48
    interfaces_found = UX_MAX_SLAVE_INTERFACES;
    endpoints_found = UX_MAX_DEVICE_ENDPOINTS;
#else

    /* Reset all values we are using during the scanning of the framework.  */
    interfaces_found                   =  0;
 800b824:	2300      	movs	r3, #0
 800b826:	647b      	str	r3, [r7, #68]	@ 0x44
    endpoints_found                    =  0;
 800b828:	2300      	movs	r3, #0
 800b82a:	643b      	str	r3, [r7, #64]	@ 0x40
    max_interface_number               =  0;
 800b82c:	2300      	movs	r3, #0
 800b82e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Go on to scan interfaces if no error.  */
    if (status == UX_SUCCESS)
 800b830:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b832:	2b00      	cmp	r3, #0
 800b834:	d000      	beq.n	800b838 <_ux_device_stack_initialize+0xd4>
 800b836:	e092      	b.n	800b95e <_ux_device_stack_initialize+0x1fa>
    {

        /* We need to determine the maximum number of interfaces and endpoints declared in the device framework.  
        This mechanism requires that both framework behave the same way regarding the number of interfaces
        and endpoints.  */
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800b838:	4b98      	ldr	r3, [pc, #608]	@ (800ba9c <_ux_device_stack_initialize+0x338>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	22d4      	movs	r2, #212	@ 0xd4
 800b83e:	589b      	ldr	r3, [r3, r2]
 800b840:	62fb      	str	r3, [r7, #44]	@ 0x2c
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800b842:	4b96      	ldr	r3, [pc, #600]	@ (800ba9c <_ux_device_stack_initialize+0x338>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	22d8      	movs	r2, #216	@ 0xd8
 800b848:	589b      	ldr	r3, [r3, r2]
 800b84a:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Reset all values we are using during the scanning of the framework.  */
        local_interfaces_found             =  0;
 800b84c:	2300      	movs	r3, #0
 800b84e:	63bb      	str	r3, [r7, #56]	@ 0x38
        local_endpoints_found              =  0;
 800b850:	2300      	movs	r3, #0
 800b852:	637b      	str	r3, [r7, #52]	@ 0x34
        endpoints_in_interface_found       =  0;
 800b854:	2300      	movs	r3, #0
 800b856:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Parse the device framework and locate interfaces and endpoint descriptor(s).  */
        while (device_framework_length != 0)
 800b858:	e057      	b.n	800b90a <_ux_device_stack_initialize+0x1a6>
        {

            /* Get the length of this descriptor.  */
            descriptor_length =  (ULONG) *device_framework;
 800b85a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	61bb      	str	r3, [r7, #24]
        
            /* And its type.  */
            descriptor_type =  *(device_framework + 1);
 800b860:	2117      	movs	r1, #23
 800b862:	187b      	adds	r3, r7, r1
 800b864:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b866:	7852      	ldrb	r2, [r2, #1]
 800b868:	701a      	strb	r2, [r3, #0]
                    
            /* Check if this is an endpoint descriptor.  */
            switch(descriptor_type)
 800b86a:	187b      	adds	r3, r7, r1
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	2b02      	cmp	r3, #2
 800b870:	d029      	beq.n	800b8c6 <_ux_device_stack_initialize+0x162>
 800b872:	2b04      	cmp	r3, #4
 800b874:	d13e      	bne.n	800b8f4 <_ux_device_stack_initialize+0x190>

            case UX_INTERFACE_DESCRIPTOR_ITEM:

                /* Check if this is alternate setting 0. If not, do not add another interface found.  
                If this is alternate setting 0, reset the endpoints count for this interface.  */
                if (*(device_framework + 3) == 0)
 800b876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b878:	3303      	adds	r3, #3
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d10b      	bne.n	800b898 <_ux_device_stack_initialize+0x134>
                {

                    /* Add the cumulated number of endpoints in the previous interface.  */
                    local_endpoints_found += endpoints_in_interface_found;
 800b880:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b884:	18d3      	adds	r3, r2, r3
 800b886:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Read the number of endpoints for this alternate setting.  */
                    endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 800b888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b88a:	3304      	adds	r3, #4
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	633b      	str	r3, [r7, #48]	@ 0x30
                    
                    /* Increment the number of interfaces found in the current configuration.  */
                    local_interfaces_found++;
 800b890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b892:	3301      	adds	r3, #1
 800b894:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b896:	e00a      	b.n	800b8ae <_ux_device_stack_initialize+0x14a>
                }                
                else
                {

                    /* Compare the number of endpoints found in this non 0 alternate setting.  */
                    if (endpoints_in_interface_found < (ULONG) *(device_framework + 4))
 800b898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b89a:	3304      	adds	r3, #4
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	001a      	movs	r2, r3
 800b8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d203      	bcs.n	800b8ae <_ux_device_stack_initialize+0x14a>
                    
                        /* Adjust the number of maximum endpoints in this interface.  */
                        endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 800b8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8a8:	3304      	adds	r3, #4
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                /* Check and update max interface number.  */
                if (*(device_framework + 2) > max_interface_number)
 800b8ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8b0:	3302      	adds	r3, #2
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	001a      	movs	r2, r3
 800b8b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d21d      	bcs.n	800b8f8 <_ux_device_stack_initialize+0x194>
                    max_interface_number = *(device_framework + 2);
 800b8bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8be:	3302      	adds	r3, #2
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	63fb      	str	r3, [r7, #60]	@ 0x3c

                break;
 800b8c4:	e018      	b.n	800b8f8 <_ux_device_stack_initialize+0x194>

            case UX_CONFIGURATION_DESCRIPTOR_ITEM:

                /* Check if the number of interfaces found in this configuration is the maximum so far. */
                if (local_interfaces_found > interfaces_found)
 800b8c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b8c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d901      	bls.n	800b8d2 <_ux_device_stack_initialize+0x16e>
                    
                    /* We need to adjust the number of maximum interfaces.  */
                    interfaces_found =  local_interfaces_found;
 800b8ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8d0:	647b      	str	r3, [r7, #68]	@ 0x44

                /* We have a new configuration. We need to reset the number of local interfaces. */
                local_interfaces_found =  0;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Add the cumulated number of endpoints in the previous interface.  */
                local_endpoints_found += endpoints_in_interface_found;
 800b8d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8da:	18d3      	adds	r3, r2, r3
 800b8dc:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Check if the number of endpoints found in the previous configuration is the maximum so far. */
                if (local_endpoints_found > endpoints_found)
 800b8de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d901      	bls.n	800b8ea <_ux_device_stack_initialize+0x186>
                    
                    /* We need to adjust the number of maximum endpoints.  */
                    endpoints_found =  local_endpoints_found;
 800b8e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8e8:	643b      	str	r3, [r7, #64]	@ 0x40

                /* We have a new configuration. We need to reset the number of local endpoints. */
                local_endpoints_found         =  0;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	637b      	str	r3, [r7, #52]	@ 0x34
                endpoints_in_interface_found  =  0;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	633b      	str	r3, [r7, #48]	@ 0x30

                break;
 800b8f2:	e002      	b.n	800b8fa <_ux_device_stack_initialize+0x196>

            default:
                break;
 800b8f4:	46c0      	nop			@ (mov r8, r8)
 800b8f6:	e000      	b.n	800b8fa <_ux_device_stack_initialize+0x196>
                break;
 800b8f8:	46c0      	nop			@ (mov r8, r8)
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 800b8fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b8fc:	69bb      	ldr	r3, [r7, #24]
 800b8fe:	1ad3      	subs	r3, r2, r3
 800b900:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 800b902:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	18d3      	adds	r3, r2, r3
 800b908:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (device_framework_length != 0)
 800b90a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d1a4      	bne.n	800b85a <_ux_device_stack_initialize+0xf6>
        }
        
        /* Add the cumulated number of endpoints in the previous interface.  */
        local_endpoints_found += endpoints_in_interface_found;
 800b910:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b914:	18d3      	adds	r3, r2, r3
 800b916:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Check if the number of endpoints found in the previous interface is the maximum so far. */
        if (local_endpoints_found > endpoints_found)
 800b918:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b91a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d901      	bls.n	800b924 <_ux_device_stack_initialize+0x1c0>
                    
            /* We need to adjust the number of maximum endpoints.  */
            endpoints_found =  local_endpoints_found;
 800b920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b922:	643b      	str	r3, [r7, #64]	@ 0x40


        /* Check if the number of interfaces found in this configuration is the maximum so far. */
        if (local_interfaces_found > interfaces_found)
 800b924:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b926:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b928:	429a      	cmp	r2, r3
 800b92a:	d901      	bls.n	800b930 <_ux_device_stack_initialize+0x1cc>
            
            /* We need to adjust the number of maximum interfaces.  */
            interfaces_found =  local_interfaces_found;
 800b92c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b92e:	647b      	str	r3, [r7, #68]	@ 0x44

        /* We do a sanity check on the finding. At least there must be one interface but endpoints are
        not necessary.  */
        if (interfaces_found == 0)
 800b930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b932:	2b00      	cmp	r3, #0
 800b934:	d106      	bne.n	800b944 <_ux_device_stack_initialize+0x1e0>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_DESCRIPTOR_CORRUPTED);
 800b936:	2242      	movs	r2, #66	@ 0x42
 800b938:	2103      	movs	r1, #3
 800b93a:	2002      	movs	r0, #2
 800b93c:	f7fc fe4a 	bl	80085d4 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_DESCRIPTOR_CORRUPTED;
 800b940:	2342      	movs	r3, #66	@ 0x42
 800b942:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /* We do a sanity check on the finding. Max interface number should not exceed limit.  */
        if (status == UX_SUCCESS &&
 800b944:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b946:	2b00      	cmp	r3, #0
 800b948:	d109      	bne.n	800b95e <_ux_device_stack_initialize+0x1fa>
 800b94a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b94c:	2b0f      	cmp	r3, #15
 800b94e:	d906      	bls.n	800b95e <_ux_device_stack_initialize+0x1fa>
            max_interface_number >= UX_MAX_SLAVE_INTERFACES)
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_MEMORY_INSUFFICIENT);
 800b950:	2212      	movs	r2, #18
 800b952:	2103      	movs	r1, #3
 800b954:	2002      	movs	r0, #2
 800b956:	f7fc fe3d 	bl	80085d4 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_MEMORY_INSUFFICIENT;
 800b95a:	2312      	movs	r3, #18
 800b95c:	64bb      	str	r3, [r7, #72]	@ 0x48
        }
    }
#endif

    /* Go on to allocate interfaces pool if no error.  */
    if (status == UX_SUCCESS)
 800b95e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b960:	2b00      	cmp	r3, #0
 800b962:	d119      	bne.n	800b998 <_ux_device_stack_initialize+0x234>
    {

        /* Memorize both pool sizes.  */
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 800b964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b966:	2198      	movs	r1, #152	@ 0x98
 800b968:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b96a:	505a      	str	r2, [r3, r1]
        device -> ux_slave_device_endpoints_pool_number  = endpoints_found;
 800b96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b96e:	21a0      	movs	r1, #160	@ 0xa0
 800b970:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b972:	505a      	str	r2, [r3, r1]

        /* We assign a pool for the interfaces.  */
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 800b974:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b976:	2320      	movs	r3, #32
 800b978:	2100      	movs	r1, #0
 800b97a:	2000      	movs	r0, #0
 800b97c:	f7fd f85c 	bl	8008a38 <_ux_utility_memory_allocate_mulc_safe>
 800b980:	0003      	movs	r3, r0
 800b982:	613b      	str	r3, [r7, #16]
        if (interfaces_pool == UX_NULL)
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d102      	bne.n	800b990 <_ux_device_stack_initialize+0x22c>
            status = UX_MEMORY_INSUFFICIENT;
 800b98a:	2312      	movs	r3, #18
 800b98c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b98e:	e003      	b.n	800b998 <_ux_device_stack_initialize+0x234>
        else

            /* Save the interface pool address in the device container.  */
            device -> ux_slave_device_interfaces_pool =  interfaces_pool;
 800b990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b992:	2194      	movs	r1, #148	@ 0x94
 800b994:	693a      	ldr	r2, [r7, #16]
 800b996:	505a      	str	r2, [r3, r1]
    }

    /* Do we need an endpoint pool ?  */
    if (endpoints_found != 0 && status == UX_SUCCESS)
 800b998:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d03b      	beq.n	800ba16 <_ux_device_stack_initialize+0x2b2>
 800b99e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d138      	bne.n	800ba16 <_ux_device_stack_initialize+0x2b2>
    {

        /* We assign a pool for the endpoints.  */
        endpoints_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, endpoints_found, sizeof(UX_SLAVE_ENDPOINT));
 800b9a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b9a6:	2368      	movs	r3, #104	@ 0x68
 800b9a8:	2100      	movs	r1, #0
 800b9aa:	2000      	movs	r0, #0
 800b9ac:	f7fd f844 	bl	8008a38 <_ux_utility_memory_allocate_mulc_safe>
 800b9b0:	0003      	movs	r3, r0
 800b9b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        if (endpoints_pool == UX_NULL)
 800b9b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d102      	bne.n	800b9c0 <_ux_device_stack_initialize+0x25c>
            status = UX_MEMORY_INSUFFICIENT;
 800b9ba:	2312      	movs	r3, #18
 800b9bc:	64bb      	str	r3, [r7, #72]	@ 0x48
        if (endpoints_pool == UX_NULL)
 800b9be:	e02c      	b.n	800ba1a <_ux_device_stack_initialize+0x2b6>
        else
        {

            /* Save the endpoint pool address in the device container.  */
            device -> ux_slave_device_endpoints_pool =  endpoints_pool;
 800b9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9c2:	219c      	movs	r1, #156	@ 0x9c
 800b9c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b9c6:	505a      	str	r2, [r3, r1]

            /* We need to assign a transfer buffer to each endpoint. Each endpoint is assigned the
            maximum buffer size.  We also assign the semaphore used by the endpoint to synchronize transfer
            completion. */
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 800b9c8:	e019      	b.n	800b9fe <_ux_device_stack_initialize+0x29a>

#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 0

                /* Obtain some memory.  */
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
                                _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_DATA_MAX_LENGTH);
 800b9ca:	2240      	movs	r2, #64	@ 0x40
 800b9cc:	2101      	movs	r1, #1
 800b9ce:	2000      	movs	r0, #0
 800b9d0:	f7fc ff4c 	bl	800886c <_ux_utility_memory_allocate>
 800b9d4:	0002      	movs	r2, r0
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
 800b9d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9d8:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Ensure we could allocate memory.  */
                if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer == UX_NULL)
 800b9da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d102      	bne.n	800b9e8 <_ux_device_stack_initialize+0x284>
                {
                    status = UX_MEMORY_INSUFFICIENT;
 800b9e2:	2312      	movs	r3, #18
 800b9e4:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800b9e6:	e015      	b.n	800ba14 <_ux_device_stack_initialize+0x2b0>
                }
#endif

                /* Create the semaphore for the endpoint.  */
                status =  _ux_device_semaphore_create(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore,
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	64bb      	str	r3, [r7, #72]	@ 0x48
                                                    "ux_transfer_request_semaphore", 0);

                /* Check completion status.  */
                if (status != UX_SUCCESS)
 800b9ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d002      	beq.n	800b9f8 <_ux_device_stack_initialize+0x294>
                {
                    status = UX_SEMAPHORE_ERROR;
 800b9f2:	2315      	movs	r3, #21
 800b9f4:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800b9f6:	e00d      	b.n	800ba14 <_ux_device_stack_initialize+0x2b0>
                }
        
                /* Next endpoint.  */
                endpoints_pool++;
 800b9f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9fa:	3368      	adds	r3, #104	@ 0x68
 800b9fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 800b9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba00:	229c      	movs	r2, #156	@ 0x9c
 800ba02:	589a      	ldr	r2, [r3, r2]
 800ba04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba06:	2168      	movs	r1, #104	@ 0x68
 800ba08:	434b      	muls	r3, r1
 800ba0a:	18d3      	adds	r3, r2, r3
 800ba0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d3db      	bcc.n	800b9ca <_ux_device_stack_initialize+0x266>
        if (endpoints_pool == UX_NULL)
 800ba12:	e002      	b.n	800ba1a <_ux_device_stack_initialize+0x2b6>
 800ba14:	e001      	b.n	800ba1a <_ux_device_stack_initialize+0x2b6>
            }
        }
    }
    else
        endpoints_pool = UX_NULL;
 800ba16:	2300      	movs	r3, #0
 800ba18:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Return successful completion.  */
    if (status == UX_SUCCESS)
 800ba1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d101      	bne.n	800ba24 <_ux_device_stack_initialize+0x2c0>
        return(UX_SUCCESS);
 800ba20:	2300      	movs	r3, #0
 800ba22:	e037      	b.n	800ba94 <_ux_device_stack_initialize+0x330>
    
    /* Free resources when there is error.  */

    /* Free device -> ux_slave_device_endpoints_pool.  */
    if (endpoints_pool)
 800ba24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d018      	beq.n	800ba5c <_ux_device_stack_initialize+0x2f8>
    {

        /* In error cases creating endpoint resources, endpoints_pool is endpoint that failed.
         * Previously allocated things should be freed.  */
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 800ba2a:	e00b      	b.n	800ba44 <_ux_device_stack_initialize+0x2e0>
                _ux_device_semaphore_delete(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);

#if UX_DEVICE_ENDPOINT_BUFFER_OWNER == 0

            /* Free ux_slave_transfer_request_data_pointer buffer.  */
            if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 800ba2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d004      	beq.n	800ba3e <_ux_device_stack_initialize+0x2da>
                _ux_utility_memory_free(endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 800ba34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba38:	0018      	movs	r0, r3
 800ba3a:	f7fd f943 	bl	8008cc4 <_ux_utility_memory_free>
#endif

            /* Move to previous endpoint.  */
            endpoints_pool --;
 800ba3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba40:	3b68      	subs	r3, #104	@ 0x68
 800ba42:	64fb      	str	r3, [r7, #76]	@ 0x4c
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 800ba44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba46:	229c      	movs	r2, #156	@ 0x9c
 800ba48:	589b      	ldr	r3, [r3, r2]
 800ba4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d2ed      	bcs.n	800ba2c <_ux_device_stack_initialize+0x2c8>
        }

        _ux_utility_memory_free(device -> ux_slave_device_endpoints_pool);
 800ba50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba52:	229c      	movs	r2, #156	@ 0x9c
 800ba54:	589b      	ldr	r3, [r3, r2]
 800ba56:	0018      	movs	r0, r3
 800ba58:	f7fd f934 	bl	8008cc4 <_ux_utility_memory_free>
    }

    /* Free device -> ux_slave_device_interfaces_pool.  */
    if (device -> ux_slave_device_interfaces_pool)
 800ba5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5e:	2294      	movs	r2, #148	@ 0x94
 800ba60:	589b      	ldr	r3, [r3, r2]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d005      	beq.n	800ba72 <_ux_device_stack_initialize+0x30e>
        _ux_utility_memory_free(device -> ux_slave_device_interfaces_pool);
 800ba66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba68:	2294      	movs	r2, #148	@ 0x94
 800ba6a:	589b      	ldr	r3, [r3, r2]
 800ba6c:	0018      	movs	r0, r3
 800ba6e:	f7fd f929 	bl	8008cc4 <_ux_utility_memory_free>

    /* Free device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer.  */
    if (device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 800ba72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d004      	beq.n	800ba84 <_ux_device_stack_initialize+0x320>
        _ux_utility_memory_free(device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 800ba7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba7e:	0018      	movs	r0, r3
 800ba80:	f7fd f920 	bl	8008cc4 <_ux_utility_memory_free>

    /* Free _ux_system_slave -> ux_system_slave_class_array.  */
    _ux_utility_memory_free(_ux_system_slave -> ux_system_slave_class_array);
 800ba84:	4b05      	ldr	r3, [pc, #20]	@ (800ba9c <_ux_device_stack_initialize+0x338>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	22fc      	movs	r2, #252	@ 0xfc
 800ba8a:	589b      	ldr	r3, [r3, r2]
 800ba8c:	0018      	movs	r0, r3
 800ba8e:	f7fd f919 	bl	8008cc4 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 800ba92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800ba94:	0018      	movs	r0, r3
 800ba96:	46bd      	mov	sp, r7
 800ba98:	b014      	add	sp, #80	@ 0x50
 800ba9a:	bd80      	pop	{r7, pc}
 800ba9c:	200015a0 	.word	0x200015a0

0800baa0 <_ux_device_stack_interface_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface_ptr)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b086      	sub	sp, #24
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface_ptr, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800baa8:	4b20      	ldr	r3, [pc, #128]	@ (800bb2c <_ux_device_stack_interface_delete+0x8c>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	3324      	adds	r3, #36	@ 0x24
 800baae:	613b      	str	r3, [r7, #16]

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;        
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	69db      	ldr	r3, [r3, #28]
 800bab4:	617b      	str	r3, [r7, #20]
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 800bab6:	e01c      	b.n	800baf2 <_ux_device_stack_interface_delete+0x52>
    {

        /* Save this endpoint.  */
        endpoint =  next_endpoint;
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	60fb      	str	r3, [r7, #12]
        
        /* Find the next endpoint.  */
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	695b      	ldr	r3, [r3, #20]
 800bac0:	617b      	str	r3, [r7, #20]
        
        /* Get the pointer to the DCD.  */
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 800bac2:	4b1a      	ldr	r3, [pc, #104]	@ (800bb2c <_ux_device_stack_interface_delete+0x8c>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	60bb      	str	r3, [r7, #8]

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	699b      	ldr	r3, [r3, #24]
 800bacc:	68fa      	ldr	r2, [r7, #12]
 800bace:	68b8      	ldr	r0, [r7, #8]
 800bad0:	210f      	movs	r1, #15
 800bad2:	4798      	blx	r3

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2200      	movs	r2, #0
 800bad8:	601a      	str	r2, [r3, #0]

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2200      	movs	r2, #0
 800bade:	605a      	str	r2, [r3, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2200      	movs	r2, #0
 800bae4:	615a      	str	r2, [r3, #20]
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2200      	movs	r2, #0
 800baea:	619a      	str	r2, [r3, #24]
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2200      	movs	r2, #0
 800baf0:	61da      	str	r2, [r3, #28]
    while (next_endpoint != UX_NULL)
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d1df      	bne.n	800bab8 <_ux_device_stack_interface_delete+0x18>
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	699a      	ldr	r2, [r3, #24]
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	2190      	movs	r1, #144	@ 0x90
 800bb00:	505a      	str	r2, [r3, r1]

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface_ptr -> ux_slave_interface_class          =  UX_NULL;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	605a      	str	r2, [r3, #4]
    interface_ptr -> ux_slave_interface_class_instance =  UX_NULL;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	609a      	str	r2, [r3, #8]
    interface_ptr -> ux_slave_interface_next_interface =  UX_NULL;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	619a      	str	r2, [r3, #24]
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2200      	movs	r2, #0
 800bb18:	61da      	str	r2, [r3, #28]
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
 800bb20:	2300      	movs	r3, #0
}
 800bb22:	0018      	movs	r0, r3
 800bb24:	46bd      	mov	sp, r7
 800bb26:	b006      	add	sp, #24
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	46c0      	nop			@ (mov r8, r8)
 800bb2c:	200015a0 	.word	0x200015a0

0800bb30 <_ux_device_stack_interface_set>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_set(UCHAR * device_framework, ULONG device_framework_length,
                                                    ULONG alternate_setting_value)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b092      	sub	sp, #72	@ 0x48
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	60b9      	str	r1, [r7, #8]
 800bb3a:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800bb3c:	4b87      	ldr	r3, [pc, #540]	@ (800bd5c <_ux_device_stack_interface_set+0x22c>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800bb42:	4b86      	ldr	r3, [pc, #536]	@ (800bd5c <_ux_device_stack_interface_set+0x22c>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	3324      	adds	r3, #36	@ 0x24
 800bb48:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Find a free interface in the pool and hook it to the 
       existing interface.  */
    interface_ptr = device -> ux_slave_device_interfaces_pool;
 800bb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb4c:	2294      	movs	r2, #148	@ 0x94
 800bb4e:	589b      	ldr	r3, [r3, r2]
 800bb50:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    interfaces_pool_number = device -> ux_slave_device_interfaces_pool_number;
 800bb52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb54:	2298      	movs	r2, #152	@ 0x98
 800bb56:	589b      	ldr	r3, [r3, r2]
 800bb58:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (interfaces_pool_number != 0)
 800bb5a:	e009      	b.n	800bb70 <_ux_device_stack_interface_set+0x40>
    {
        /* Check if this interface is free.  */
        if (interface_ptr -> ux_slave_interface_status == UX_UNUSED)
 800bb5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d009      	beq.n	800bb78 <_ux_device_stack_interface_set+0x48>
            break;
    
        /* Try the next interface.  */
        interface_ptr++;
 800bb64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb66:	3320      	adds	r3, #32
 800bb68:	647b      	str	r3, [r7, #68]	@ 0x44
        
        /* Decrement the number of interfaces left to scan in the pool.  */
        interfaces_pool_number--;
 800bb6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb6c:	3b01      	subs	r3, #1
 800bb6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (interfaces_pool_number != 0)
 800bb70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d1f2      	bne.n	800bb5c <_ux_device_stack_interface_set+0x2c>
 800bb76:	e000      	b.n	800bb7a <_ux_device_stack_interface_set+0x4a>
            break;
 800bb78:	46c0      	nop			@ (mov r8, r8)
    }

    /* Did we find a free interface ?  */
    if (interfaces_pool_number == 0)
 800bb7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d101      	bne.n	800bb84 <_ux_device_stack_interface_set+0x54>
        return(UX_MEMORY_INSUFFICIENT);
 800bb80:	2312      	movs	r3, #18
 800bb82:	e0e6      	b.n	800bd52 <_ux_device_stack_interface_set+0x222>
        return(UX_MEMORY_INSUFFICIENT);
    
#endif

    /* Mark this interface as used now.  */
    interface_ptr -> ux_slave_interface_status = UX_USED;
 800bb84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb86:	2201      	movs	r2, #1
 800bb88:	601a      	str	r2, [r3, #0]

    /* Parse the descriptor in something more readable.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_interface_descriptor_structure,
                UX_INTERFACE_DESCRIPTOR_ENTRIES,
                (UCHAR *) &interface_ptr -> ux_slave_interface_descriptor);
 800bb8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb8c:	330c      	adds	r3, #12
    _ux_utility_descriptor_parse(device_framework,
 800bb8e:	4974      	ldr	r1, [pc, #464]	@ (800bd60 <_ux_device_stack_interface_set+0x230>)
 800bb90:	68f8      	ldr	r0, [r7, #12]
 800bb92:	2209      	movs	r2, #9
 800bb94:	f7fc fdf2 	bl	800877c <_ux_utility_descriptor_parse>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1

    /* Attach this interface to the end of the interface chain.  */
    if (device -> ux_slave_device_first_interface == UX_NULL)
 800bb98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb9a:	2290      	movs	r2, #144	@ 0x90
 800bb9c:	589b      	ldr	r3, [r3, r2]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d104      	bne.n	800bbac <_ux_device_stack_interface_set+0x7c>
    {

        device -> ux_slave_device_first_interface =  interface_ptr;
 800bba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bba4:	2190      	movs	r1, #144	@ 0x90
 800bba6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bba8:	505a      	str	r2, [r3, r1]
 800bbaa:	e00e      	b.n	800bbca <_ux_device_stack_interface_set+0x9a>
    }
    else
    {
        /* Multiple interfaces exist, so find the end of the chain.  */
        interface_link =  device -> ux_slave_device_first_interface;
 800bbac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbae:	2290      	movs	r2, #144	@ 0x90
 800bbb0:	589b      	ldr	r3, [r3, r2]
 800bbb2:	643b      	str	r3, [r7, #64]	@ 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 800bbb4:	e002      	b.n	800bbbc <_ux_device_stack_interface_set+0x8c>
            interface_link =  interface_link -> ux_slave_interface_next_interface;
 800bbb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbb8:	699b      	ldr	r3, [r3, #24]
 800bbba:	643b      	str	r3, [r7, #64]	@ 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 800bbbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbbe:	699b      	ldr	r3, [r3, #24]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d1f8      	bne.n	800bbb6 <_ux_device_stack_interface_set+0x86>
        interface_link -> ux_slave_interface_next_interface =  interface_ptr;
 800bbc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bbc8:	619a      	str	r2, [r3, #24]
    /* It must be very first one.  */
    device -> ux_slave_device_first_interface = interface_ptr;
#endif

    /* Point beyond the interface descriptor.  */
    device_framework_length -=  (ULONG) *device_framework;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	001a      	movs	r2, r3
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	1a9b      	subs	r3, r3, r2
 800bbd4:	60bb      	str	r3, [r7, #8]
    device_framework +=  (ULONG) *device_framework;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	001a      	movs	r2, r3
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	189b      	adds	r3, r3, r2
 800bbe0:	60fb      	str	r3, [r7, #12]

    /* Parse the device framework and locate endpoint descriptor(s).  */
    while (device_framework_length != 0)
 800bbe2:	e0ab      	b.n	800bd3c <_ux_device_stack_interface_set+0x20c>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	61fb      	str	r3, [r7, #28]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 800bbea:	211b      	movs	r1, #27
 800bbec:	187b      	adds	r3, r7, r1
 800bbee:	68fa      	ldr	r2, [r7, #12]
 800bbf0:	7852      	ldrb	r2, [r2, #1]
 800bbf2:	701a      	strb	r2, [r3, #0]
                
        /* Check if this is an endpoint descriptor.  */
        switch(descriptor_type)
 800bbf4:	187b      	adds	r3, r7, r1
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	2b05      	cmp	r3, #5
 800bbfa:	d008      	beq.n	800bc0e <_ux_device_stack_interface_set+0xde>
 800bbfc:	dd00      	ble.n	800bc00 <_ux_device_stack_interface_set+0xd0>
 800bbfe:	e094      	b.n	800bd2a <_ux_device_stack_interface_set+0x1fa>
 800bc00:	2b02      	cmp	r3, #2
 800bc02:	d100      	bne.n	800bc06 <_ux_device_stack_interface_set+0xd6>
 800bc04:	e089      	b.n	800bd1a <_ux_device_stack_interface_set+0x1ea>
 800bc06:	2b04      	cmp	r3, #4
 800bc08:	d100      	bne.n	800bc0c <_ux_device_stack_interface_set+0xdc>
 800bc0a:	e086      	b.n	800bd1a <_ux_device_stack_interface_set+0x1ea>

            /* Return the status to the caller.  */
            return(status);

        default:
            break;
 800bc0c:	e08d      	b.n	800bd2a <_ux_device_stack_interface_set+0x1fa>
            endpoint = device -> ux_slave_device_endpoints_pool;
 800bc0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc10:	229c      	movs	r2, #156	@ 0x9c
 800bc12:	589b      	ldr	r3, [r3, r2]
 800bc14:	63bb      	str	r3, [r7, #56]	@ 0x38
            endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 800bc16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc18:	22a0      	movs	r2, #160	@ 0xa0
 800bc1a:	589b      	ldr	r3, [r3, r2]
 800bc1c:	633b      	str	r3, [r7, #48]	@ 0x30
            while (endpoints_pool_number != 0)
 800bc1e:	e00d      	b.n	800bc3c <_ux_device_stack_interface_set+0x10c>
                if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 800bc20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d103      	bne.n	800bc30 <_ux_device_stack_interface_set+0x100>
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 800bc28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	601a      	str	r2, [r3, #0]
                    break;
 800bc2e:	e008      	b.n	800bc42 <_ux_device_stack_interface_set+0x112>
                endpoint++;
 800bc30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc32:	3368      	adds	r3, #104	@ 0x68
 800bc34:	63bb      	str	r3, [r7, #56]	@ 0x38
               endpoints_pool_number--; 
 800bc36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc38:	3b01      	subs	r3, #1
 800bc3a:	633b      	str	r3, [r7, #48]	@ 0x30
            while (endpoints_pool_number != 0)
 800bc3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d1ee      	bne.n	800bc20 <_ux_device_stack_interface_set+0xf0>
            if (endpoints_pool_number == 0)
 800bc42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d101      	bne.n	800bc4c <_ux_device_stack_interface_set+0x11c>
                return(UX_MEMORY_INSUFFICIENT);
 800bc48:	2312      	movs	r3, #18
 800bc4a:	e082      	b.n	800bd52 <_ux_device_stack_interface_set+0x222>
                            (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 800bc4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc4e:	330c      	adds	r3, #12
            _ux_utility_descriptor_parse(device_framework,
 800bc50:	4944      	ldr	r1, [pc, #272]	@ (800bd64 <_ux_device_stack_interface_set+0x234>)
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	2206      	movs	r2, #6
 800bc56:	f7fc fd91 	bl	800877c <_ux_utility_descriptor_parse>
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800bc5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc5c:	3320      	adds	r3, #32
 800bc5e:	617b      	str	r3, [r7, #20]
                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800bc60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc62:	8a1b      	ldrh	r3, [r3, #16]
            max_transfer_length =
 800bc64:	055b      	lsls	r3, r3, #21
 800bc66:	0d5b      	lsrs	r3, r3, #21
 800bc68:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800bc6a:	4b3c      	ldr	r3, [pc, #240]	@ (800bd5c <_ux_device_stack_interface_set+0x22c>)
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	23a0      	movs	r3, #160	@ 0xa0
 800bc70:	005b      	lsls	r3, r3, #1
 800bc72:	58d3      	ldr	r3, [r2, r3]
 800bc74:	2b02      	cmp	r3, #2
 800bc76:	d119      	bne.n	800bcac <_ux_device_stack_interface_set+0x17c>
                (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 800bc78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc7a:	7bdb      	ldrb	r3, [r3, #15]
 800bc7c:	001a      	movs	r2, r3
 800bc7e:	2301      	movs	r3, #1
 800bc80:	4013      	ands	r3, r2
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800bc82:	d013      	beq.n	800bcac <_ux_device_stack_interface_set+0x17c>
                n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800bc84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc86:	8a1b      	ldrh	r3, [r3, #16]
 800bc88:	001a      	movs	r2, r3
 800bc8a:	23c0      	movs	r3, #192	@ 0xc0
 800bc8c:	015b      	lsls	r3, r3, #5
 800bc8e:	4013      	ands	r3, r2
 800bc90:	613b      	str	r3, [r7, #16]
                if (n_trans)
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d009      	beq.n	800bcac <_ux_device_stack_interface_set+0x17c>
                    n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	0adb      	lsrs	r3, r3, #11
 800bc9c:	613b      	str	r3, [r7, #16]
                    n_trans ++;
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	3301      	adds	r3, #1
 800bca2:	613b      	str	r3, [r7, #16]
                    max_transfer_length *= n_trans;
 800bca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bca6:	693a      	ldr	r2, [r7, #16]
 800bca8:	4353      	muls	r3, r2
 800bcaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
            transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcb0:	621a      	str	r2, [r3, #32]
            transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bcb6:	609a      	str	r2, [r3, #8]
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	4252      	negs	r2, r2
 800bcbe:	635a      	str	r2, [r3, #52]	@ 0x34
            endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 800bcc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bcc4:	619a      	str	r2, [r3, #24]
            endpoint -> ux_slave_endpoint_device =  device;
 800bcc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcca:	61da      	str	r2, [r3, #28]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 800bccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcce:	699b      	ldr	r3, [r3, #24]
 800bcd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bcd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bcd4:	210e      	movs	r1, #14
 800bcd6:	4798      	blx	r3
 800bcd8:	0003      	movs	r3, r0
 800bcda:	623b      	str	r3, [r7, #32]
            if (status != UX_SUCCESS)
 800bcdc:	6a3b      	ldr	r3, [r7, #32]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d004      	beq.n	800bcec <_ux_device_stack_interface_set+0x1bc>
                endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 800bce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bce4:	2200      	movs	r2, #0
 800bce6:	601a      	str	r2, [r3, #0]
                return(status);
 800bce8:	6a3b      	ldr	r3, [r7, #32]
 800bcea:	e032      	b.n	800bd52 <_ux_device_stack_interface_set+0x222>
            if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 800bcec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcee:	69db      	ldr	r3, [r3, #28]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d103      	bne.n	800bcfc <_ux_device_stack_interface_set+0x1cc>
                interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 800bcf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcf6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bcf8:	61da      	str	r2, [r3, #28]
            break;
 800bcfa:	e017      	b.n	800bd2c <_ux_device_stack_interface_set+0x1fc>
                endpoint_link =  interface_ptr -> ux_slave_interface_first_endpoint;
 800bcfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcfe:	69db      	ldr	r3, [r3, #28]
 800bd00:	637b      	str	r3, [r7, #52]	@ 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800bd02:	e002      	b.n	800bd0a <_ux_device_stack_interface_set+0x1da>
                    endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 800bd04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd06:	695b      	ldr	r3, [r3, #20]
 800bd08:	637b      	str	r3, [r7, #52]	@ 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800bd0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd0c:	695b      	ldr	r3, [r3, #20]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d1f8      	bne.n	800bd04 <_ux_device_stack_interface_set+0x1d4>
                endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 800bd12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bd16:	615a      	str	r2, [r3, #20]
            break;
 800bd18:	e008      	b.n	800bd2c <_ux_device_stack_interface_set+0x1fc>
            status =  _ux_device_stack_interface_start(interface_ptr);
 800bd1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd1c:	0018      	movs	r0, r3
 800bd1e:	f000 f823 	bl	800bd68 <_ux_device_stack_interface_start>
 800bd22:	0003      	movs	r3, r0
 800bd24:	623b      	str	r3, [r7, #32]
            return(status);
 800bd26:	6a3b      	ldr	r3, [r7, #32]
 800bd28:	e013      	b.n	800bd52 <_ux_device_stack_interface_set+0x222>
            break;
 800bd2a:	46c0      	nop			@ (mov r8, r8)
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 800bd2c:	68ba      	ldr	r2, [r7, #8]
 800bd2e:	69fb      	ldr	r3, [r7, #28]
 800bd30:	1ad3      	subs	r3, r2, r3
 800bd32:	60bb      	str	r3, [r7, #8]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800bd34:	68fa      	ldr	r2, [r7, #12]
 800bd36:	69fb      	ldr	r3, [r7, #28]
 800bd38:	18d3      	adds	r3, r2, r3
 800bd3a:	60fb      	str	r3, [r7, #12]
    while (device_framework_length != 0)
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d000      	beq.n	800bd44 <_ux_device_stack_interface_set+0x214>
 800bd42:	e74f      	b.n	800bbe4 <_ux_device_stack_interface_set+0xb4>
    }

    /* The interface attached to this configuration must be started at the class
       level.  */
    status =  _ux_device_stack_interface_start(interface_ptr);
 800bd44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd46:	0018      	movs	r0, r3
 800bd48:	f000 f80e 	bl	800bd68 <_ux_device_stack_interface_start>
 800bd4c:	0003      	movs	r3, r0
 800bd4e:	623b      	str	r3, [r7, #32]

    /* Return the status to the caller.  */
    return(status);
 800bd50:	6a3b      	ldr	r3, [r7, #32]
}
 800bd52:	0018      	movs	r0, r3
 800bd54:	46bd      	mov	sp, r7
 800bd56:	b012      	add	sp, #72	@ 0x48
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	46c0      	nop			@ (mov r8, r8)
 800bd5c:	200015a0 	.word	0x200015a0
 800bd60:	20000068 	.word	0x20000068
 800bd64:	20000048 	.word	0x20000048

0800bd68 <_ux_device_stack_interface_start>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_start(UX_SLAVE_INTERFACE *interface_ptr)
{
 800bd68:	b590      	push	{r4, r7, lr}
 800bd6a:	b091      	sub	sp, #68	@ 0x44
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
UINT                        status;
UX_SLAVE_CLASS_COMMAND      class_command;


    /* Get the class for the interface.  */
    class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 800bd70:	4b2b      	ldr	r3, [pc, #172]	@ (800be20 <_ux_device_stack_interface_start+0xb8>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	7b92      	ldrb	r2, [r2, #14]
 800bd78:	3240      	adds	r2, #64	@ 0x40
 800bd7a:	0092      	lsls	r2, r2, #2
 800bd7c:	58d3      	ldr	r3, [r2, r3]
 800bd7e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check if class driver is available. */
    if (class_ptr == UX_NULL)
 800bd80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d101      	bne.n	800bd8a <_ux_device_stack_interface_start+0x22>

        /* There is no class driver supported. */
        return (UX_NO_CLASS_MATCH);
 800bd86:	2357      	movs	r3, #87	@ 0x57
 800bd88:	e046      	b.n	800be18 <_ux_device_stack_interface_start+0xb0>

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800bd8a:	4b25      	ldr	r3, [pc, #148]	@ (800be20 <_ux_device_stack_interface_start+0xb8>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	3324      	adds	r3, #36	@ 0x24
 800bd90:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Build all the fields of the Class Command.  */
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 800bd92:	2408      	movs	r4, #8
 800bd94:	193b      	adds	r3, r7, r4
 800bd96:	2201      	movs	r2, #1
 800bd98:	601a      	str	r2, [r3, #0]
    class_command.ux_slave_class_command_interface =   (VOID *)interface_ptr;
 800bd9a:	193b      	adds	r3, r7, r4
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	609a      	str	r2, [r3, #8]
    class_command.ux_slave_class_command_class     =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceClass;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	7c5b      	ldrb	r3, [r3, #17]
 800bda4:	001a      	movs	r2, r3
 800bda6:	193b      	adds	r3, r7, r4
 800bda8:	615a      	str	r2, [r3, #20]
    class_command.ux_slave_class_command_subclass  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceSubClass;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	7c9b      	ldrb	r3, [r3, #18]
 800bdae:	001a      	movs	r2, r3
 800bdb0:	193b      	adds	r3, r7, r4
 800bdb2:	619a      	str	r2, [r3, #24]
    class_command.ux_slave_class_command_protocol  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceProtocol;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	7cdb      	ldrb	r3, [r3, #19]
 800bdb8:	001a      	movs	r2, r3
 800bdba:	193b      	adds	r3, r7, r4
 800bdbc:	61da      	str	r2, [r3, #28]
    class_command.ux_slave_class_command_vid       =   device -> ux_slave_device_descriptor.idVendor;
 800bdbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdc0:	899b      	ldrh	r3, [r3, #12]
 800bdc2:	001a      	movs	r2, r3
 800bdc4:	193b      	adds	r3, r7, r4
 800bdc6:	611a      	str	r2, [r3, #16]
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 800bdc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdca:	89db      	ldrh	r3, [r3, #14]
 800bdcc:	001a      	movs	r2, r3
 800bdce:	193b      	adds	r3, r7, r4
 800bdd0:	60da      	str	r2, [r3, #12]

    /* We can now memorize the interface pointer associated with this class.  */
    class_ptr -> ux_slave_class_interface = interface_ptr;
 800bdd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	661a      	str	r2, [r3, #96]	@ 0x60
    
    /* We have found a potential candidate. Call this registered class entry function.  */
    status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800bdd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bddc:	193a      	adds	r2, r7, r4
 800bdde:	0010      	movs	r0, r2
 800bde0:	4798      	blx	r3
 800bde2:	0003      	movs	r3, r0
 800bde4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* The status tells us if the registered class wants to own this class.  */
    if (status == UX_SUCCESS)
 800bde6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d114      	bne.n	800be16 <_ux_device_stack_interface_start+0xae>
    {

        /* Store the class container. */
        class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800bdec:	193b      	adds	r3, r7, r4
 800bdee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bdf0:	621a      	str	r2, [r3, #32]
        
        /* Store the command.  */
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 800bdf2:	193b      	adds	r3, r7, r4
 800bdf4:	2202      	movs	r2, #2
 800bdf6:	601a      	str	r2, [r3, #0]
        
        /* Activate the class.  */
        status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800bdf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdfc:	193a      	adds	r2, r7, r4
 800bdfe:	0010      	movs	r0, r2
 800be00:	4798      	blx	r3
 800be02:	0003      	movs	r3, r0
 800be04:	637b      	str	r3, [r7, #52]	@ 0x34

        /* If the class was successfully activated, set the class for the interface.  */
        if(status == UX_SUCCESS)
 800be06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d102      	bne.n	800be12 <_ux_device_stack_interface_start+0xaa>
            interface_ptr -> ux_slave_interface_class =  class_ptr;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800be10:	605a      	str	r2, [r3, #4]

        return(status); 
 800be12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be14:	e000      	b.n	800be18 <_ux_device_stack_interface_start+0xb0>
    }

    /* There is no driver who want to own this class!  */
    return(UX_NO_CLASS_MATCH);
 800be16:	2357      	movs	r3, #87	@ 0x57
}
 800be18:	0018      	movs	r0, r3
 800be1a:	46bd      	mov	sp, r7
 800be1c:	b011      	add	sp, #68	@ 0x44
 800be1e:	bd90      	pop	{r4, r7, pc}
 800be20:	200015a0 	.word	0x200015a0

0800be24 <_ux_device_stack_set_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b08a      	sub	sp, #40	@ 0x28
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800be30:	4b2a      	ldr	r3, [pc, #168]	@ (800bedc <_ux_device_stack_set_feature+0xb8>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800be36:	4b29      	ldr	r3, [pc, #164]	@ (800bedc <_ux_device_stack_set_feature+0xb8>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	3324      	adds	r3, #36	@ 0x24
 800be3c:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	3318      	adds	r3, #24
 800be42:	617b      	str	r3, [r7, #20]

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2203      	movs	r2, #3
 800be48:	4013      	ands	r3, r2
 800be4a:	d002      	beq.n	800be52 <_ux_device_stack_set_feature+0x2e>
 800be4c:	2b02      	cmp	r3, #2
 800be4e:	d016      	beq.n	800be7e <_ux_device_stack_set_feature+0x5a>
 800be50:	e038      	b.n	800bec4 <_ux_device_stack_set_feature+0xa0>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	2b01      	cmp	r3, #1
 800be56:	d110      	bne.n	800be7a <_ux_device_stack_set_feature+0x56>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 800be58:	4b20      	ldr	r3, [pc, #128]	@ (800bedc <_ux_device_stack_set_feature+0xb8>)
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	23a4      	movs	r3, #164	@ 0xa4
 800be5e:	005b      	lsls	r3, r3, #1
 800be60:	58d3      	ldr	r3, [r2, r3]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d007      	beq.n	800be76 <_ux_device_stack_set_feature+0x52>
            {

                /* Enable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 800be66:	4b1d      	ldr	r3, [pc, #116]	@ (800bedc <_ux_device_stack_set_feature+0xb8>)
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	23a6      	movs	r3, #166	@ 0xa6
 800be6c:	005b      	lsls	r3, r3, #1
 800be6e:	2101      	movs	r1, #1
 800be70:	50d1      	str	r1, [r2, r3]

                /* OK. */
                return (UX_SUCCESS);
 800be72:	2300      	movs	r3, #0
 800be74:	e02d      	b.n	800bed2 <_ux_device_stack_set_feature+0xae>
            }
            else

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
 800be76:	2354      	movs	r3, #84	@ 0x54
 800be78:	e02b      	b.n	800bed2 <_ux_device_stack_set_feature+0xae>
            return(UX_SUCCESS);
        }
#endif

        /* Request value not supported.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 800be7a:	2354      	movs	r3, #84	@ 0x54
 800be7c:	e029      	b.n	800bed2 <_ux_device_stack_set_feature+0xae>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only set feature for endpoint is ENDPOINT_STALL. This forces
           the endpoint to the stall situation.
           We need to find the endpoint through the interface(s). */
        interface_ptr =  device -> ux_slave_device_first_interface;
 800be7e:	69bb      	ldr	r3, [r7, #24]
 800be80:	2290      	movs	r2, #144	@ 0x90
 800be82:	589b      	ldr	r3, [r3, r2]
 800be84:	627b      	str	r3, [r7, #36]	@ 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface_ptr != UX_NULL)
 800be86:	e01a      	b.n	800bebe <_ux_device_stack_set_feature+0x9a>
        {
#endif
            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 800be88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be8a:	69db      	ldr	r3, [r3, #28]
 800be8c:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 800be8e:	e010      	b.n	800beb2 <_ux_device_stack_set_feature+0x8e>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 800be90:	6a3b      	ldr	r3, [r7, #32]
 800be92:	7b9b      	ldrb	r3, [r3, #14]
 800be94:	001a      	movs	r2, r3
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	4293      	cmp	r3, r2
 800be9a:	d107      	bne.n	800beac <_ux_device_stack_set_feature+0x88>
                {

                    /* Stall the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 800be9c:	69fb      	ldr	r3, [r7, #28]
 800be9e:	699b      	ldr	r3, [r3, #24]
 800bea0:	6a3a      	ldr	r2, [r7, #32]
 800bea2:	69f8      	ldr	r0, [r7, #28]
 800bea4:	2114      	movs	r1, #20
 800bea6:	4798      	blx	r3

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 800bea8:	2300      	movs	r3, #0
 800beaa:	e012      	b.n	800bed2 <_ux_device_stack_set_feature+0xae>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 800beac:	6a3b      	ldr	r3, [r7, #32]
 800beae:	695b      	ldr	r3, [r3, #20]
 800beb0:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 800beb2:	6a3b      	ldr	r3, [r7, #32]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d1eb      	bne.n	800be90 <_ux_device_stack_set_feature+0x6c>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800beb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beba:	699b      	ldr	r3, [r3, #24]
 800bebc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (interface_ptr != UX_NULL)
 800bebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d1e1      	bne.n	800be88 <_ux_device_stack_set_feature+0x64>
        /* Intentionally fall through into the default case. */
        /* fall through */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800bec4:	69fb      	ldr	r3, [r7, #28]
 800bec6:	699b      	ldr	r3, [r3, #24]
 800bec8:	697a      	ldr	r2, [r7, #20]
 800beca:	69f8      	ldr	r0, [r7, #28]
 800becc:	2114      	movs	r1, #20
 800bece:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800bed0:	2300      	movs	r3, #0
    }
}
 800bed2:	0018      	movs	r0, r3
 800bed4:	46bd      	mov	sp, r7
 800bed6:	b00a      	add	sp, #40	@ 0x28
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	46c0      	nop			@ (mov r8, r8)
 800bedc:	200015a0 	.word	0x200015a0

0800bee0 <_ux_device_stack_tasks_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_tasks_run(VOID)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
UX_SLAVE_CLASS              *class_instance;
ULONG                       class_index;
UINT                        status;


    status = UX_STATE_RESET;
 800bee6:	2300      	movs	r3, #0
 800bee8:	607b      	str	r3, [r7, #4]

    /* Run all DCD tasks (pending ISR handle).  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 800beea:	4b1a      	ldr	r3, [pc, #104]	@ (800bf54 <_ux_device_stack_tasks_run+0x74>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	603b      	str	r3, [r7, #0]
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	699b      	ldr	r3, [r3, #24]
 800bef4:	6838      	ldr	r0, [r7, #0]
 800bef6:	2200      	movs	r2, #0
 800bef8:	2112      	movs	r1, #18
 800befa:	4798      	blx	r3

    /* Run all Class instance tasks.  */
    class_instance =  _ux_system_slave -> ux_system_slave_class_array;
 800befc:	4b15      	ldr	r3, [pc, #84]	@ (800bf54 <_ux_device_stack_tasks_run+0x74>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	22fc      	movs	r2, #252	@ 0xfc
 800bf02:	589b      	ldr	r3, [r3, r2]
 800bf04:	60fb      	str	r3, [r7, #12]
    for (class_index = 0; class_index < UX_SYSTEM_DEVICE_MAX_CLASS_GET(); class_index++)
 800bf06:	2300      	movs	r3, #0
 800bf08:	60bb      	str	r3, [r7, #8]
 800bf0a:	e01b      	b.n	800bf44 <_ux_device_stack_tasks_run+0x64>
    {

        /* Skip classes not used.  */
        if (class_instance -> ux_slave_class_status == UX_UNUSED)
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d011      	beq.n	800bf38 <_ux_device_stack_tasks_run+0x58>
            continue;

        /* Skip classes has no task function.  */
        if (class_instance -> ux_slave_class_task_function == UX_NULL)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d00f      	beq.n	800bf3c <_ux_device_stack_tasks_run+0x5c>
            continue;

        /* Invoke task function.  */
        status |= class_instance -> ux_slave_class_task_function(class_instance -> ux_slave_class_instance);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf24:	0018      	movs	r0, r3
 800bf26:	4790      	blx	r2
 800bf28:	0002      	movs	r2, r0
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	607b      	str	r3, [r7, #4]

        /* Move to the next class.  */
        class_instance ++;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	3364      	adds	r3, #100	@ 0x64
 800bf34:	60fb      	str	r3, [r7, #12]
 800bf36:	e002      	b.n	800bf3e <_ux_device_stack_tasks_run+0x5e>
            continue;
 800bf38:	46c0      	nop			@ (mov r8, r8)
 800bf3a:	e000      	b.n	800bf3e <_ux_device_stack_tasks_run+0x5e>
            continue;
 800bf3c:	46c0      	nop			@ (mov r8, r8)
    for (class_index = 0; class_index < UX_SYSTEM_DEVICE_MAX_CLASS_GET(); class_index++)
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	3301      	adds	r3, #1
 800bf42:	60bb      	str	r3, [r7, #8]
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d0e0      	beq.n	800bf0c <_ux_device_stack_tasks_run+0x2c>
    }

    /* Return overall status.  */
    return(status);
 800bf4a:	687b      	ldr	r3, [r7, #4]
}
 800bf4c:	0018      	movs	r0, r3
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	b004      	add	sp, #16
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	200015a0 	.word	0x200015a0

0800bf58 <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800bf62:	4b12      	ldr	r3, [pc, #72]	@ (800bfac <_ux_device_stack_transfer_abort+0x54>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	60fb      	str	r3, [r7, #12]

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	683a      	ldr	r2, [r7, #0]
 800bf6c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE
 800bf6e:	f7f4 ff99 	bl	8000ea4 <_ux_utility_interrupt_disable>
 800bf72:	0003      	movs	r3, r0
 800bf74:	60bb      	str	r3, [r7, #8]

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	2b01      	cmp	r3, #1
 800bf7c:	d10d      	bne.n	800bf9a <_ux_device_stack_transfer_abort+0x42>
    {

        /* Call the DCD if necessary for cleaning up the pending transfer.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	699b      	ldr	r3, [r3, #24]
 800bf82:	687a      	ldr	r2, [r7, #4]
 800bf84:	68f8      	ldr	r0, [r7, #12]
 800bf86:	210d      	movs	r1, #13
 800bf88:	4798      	blx	r3

        /* Restore interrupts. Note that the transfer request should not be modified now.  */
        UX_RESTORE
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	0018      	movs	r0, r3
 800bf8e:	f7f4 ff98 	bl	8000ec2 <_ux_utility_interrupt_restore>

        /* We need to set the completion code for the transfer to aborted. Note
           that the transfer request function cannot simultaneously modify this 
           because if the transfer was pending, then the transfer's thread is 
           currently waiting for it to complete.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2204      	movs	r2, #4
 800bf96:	601a      	str	r2, [r3, #0]
 800bf98:	e003      	b.n	800bfa2 <_ux_device_stack_transfer_abort+0x4a>
    }
    else
    {

        /* Restore interrupts.  */
        UX_RESTORE
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	0018      	movs	r0, r3
 800bf9e:	f7f4 ff90 	bl	8000ec2 <_ux_utility_interrupt_restore>
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
 800bfa2:	2300      	movs	r3, #0
}
 800bfa4:	0018      	movs	r0, r3
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	b004      	add	sp, #16
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	200015a0 	.word	0x200015a0

0800bfb0 <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ALL_REQUEST_ABORT, endpoint, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	3320      	adds	r3, #32
 800bfbe:	60fb      	str	r3, [r7, #12]
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 800bfc0:	683a      	ldr	r2, [r7, #0]
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	0011      	movs	r1, r2
 800bfc6:	0018      	movs	r0, r3
 800bfc8:	f7ff ffc6 	bl	800bf58 <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
 800bfcc:	2300      	movs	r3, #0
}
 800bfce:	0018      	movs	r0, r3
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	b004      	add	sp, #16
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <_ux_device_stack_transfer_request>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_request(UX_SLAVE_TRANSFER *transfer_request, 
                                            ULONG slave_length, 
                                            ULONG host_length)
{
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b086      	sub	sp, #24
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	60f8      	str	r0, [r7, #12]
 800bfde:	60b9      	str	r1, [r7, #8]
 800bfe0:	607a      	str	r2, [r7, #4]
#if defined(UX_DEVICE_STANDALONE)
UINT            status;

    /* Start a transfer request without waiting it end.  */
    UX_SLAVE_TRANSFER_STATE_RESET(transfer_request);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	631a      	str	r2, [r3, #48]	@ 0x30
    status = _ux_device_stack_transfer_run(transfer_request, slave_length, host_length);
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	68b9      	ldr	r1, [r7, #8]
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	0018      	movs	r0, r3
 800bff0:	f000 f812 	bl	800c018 <_ux_device_stack_transfer_run>
 800bff4:	0003      	movs	r3, r0
 800bff6:	617b      	str	r3, [r7, #20]
    if (status == UX_STATE_LOCK)
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	2b06      	cmp	r3, #6
 800bffc:	d101      	bne.n	800c002 <_ux_device_stack_transfer_request+0x2c>
        return(UX_BUSY);
 800bffe:	23fe      	movs	r3, #254	@ 0xfe
 800c000:	e006      	b.n	800c010 <_ux_device_stack_transfer_request+0x3a>
    if (status < UX_STATE_NEXT)
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	2b03      	cmp	r3, #3
 800c006:	d802      	bhi.n	800c00e <_ux_device_stack_transfer_request+0x38>
        return(transfer_request -> ux_slave_transfer_request_completion_code);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c00c:	e000      	b.n	800c010 <_ux_device_stack_transfer_request+0x3a>

    /* Started/done, things will be done in BG  */
    return(UX_SUCCESS);
 800c00e:	2300      	movs	r3, #0

    /* And return the status.  */
    return(status);

#endif
}
 800c010:	0018      	movs	r0, r3
 800c012:	46bd      	mov	sp, r7
 800c014:	b006      	add	sp, #24
 800c016:	bd80      	pop	{r7, pc}

0800c018 <_ux_device_stack_transfer_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_run(UX_SLAVE_TRANSFER *transfer_request, ULONG slave_length, ULONG host_length)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b08a      	sub	sp, #40	@ 0x28
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c028:	2b01      	cmp	r3, #1
 800c02a:	d107      	bne.n	800c03c <_ux_device_stack_transfer_run+0x24>
    {
        transfer_request -> ux_slave_transfer_request_completion_code = UX_SUCCESS;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2200      	movs	r2, #0
 800c030:	625a      	str	r2, [r3, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_NEXT;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2204      	movs	r2, #4
 800c036:	631a      	str	r2, [r3, #48]	@ 0x30
        return(UX_STATE_NEXT);
 800c038:	2304      	movs	r3, #4
 800c03a:	e091      	b.n	800c160 <_ux_device_stack_transfer_run+0x148>
    }

    /* Get the device state.  */
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 800c03c:	4b4a      	ldr	r3, [pc, #296]	@ (800c168 <_ux_device_stack_transfer_run+0x150>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c042:	627b      	str	r3, [r7, #36]	@ 0x24

    /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
    if (!(device_state == UX_DEVICE_ATTACHED) &&
 800c044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c046:	2b01      	cmp	r3, #1
 800c048:	d00d      	beq.n	800c066 <_ux_device_stack_transfer_run+0x4e>
 800c04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c04c:	2b02      	cmp	r3, #2
 800c04e:	d00a      	beq.n	800c066 <_ux_device_stack_transfer_run+0x4e>
        !(device_state == UX_DEVICE_ADDRESSED) &&
 800c050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c052:	2b03      	cmp	r3, #3
 800c054:	d007      	beq.n	800c066 <_ux_device_stack_transfer_run+0x4e>
        !(device_state == UX_DEVICE_CONFIGURED))
    {
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_NOT_READY;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2225      	movs	r2, #37	@ 0x25
 800c05a:	625a      	str	r2, [r3, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_RESET;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2200      	movs	r2, #0
 800c060:	631a      	str	r2, [r3, #48]	@ 0x30
        return(UX_STATE_EXIT);
 800c062:	2301      	movs	r3, #1
 800c064:	e07c      	b.n	800c160 <_ux_device_stack_transfer_run+0x148>
    }

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800c066:	4b40      	ldr	r3, [pc, #256]	@ (800c168 <_ux_device_stack_transfer_run+0x150>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	623b      	str	r3, [r7, #32]

    /* Get the endpoint associated with this transaction.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	61fb      	str	r3, [r7, #28]

    /* Process states.  */
    state = transfer_request -> ux_slave_transfer_request_state;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c076:	61bb      	str	r3, [r7, #24]
    switch(state)
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	2b21      	cmp	r3, #33	@ 0x21
 800c07c:	d05a      	beq.n	800c134 <_ux_device_stack_transfer_run+0x11c>
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	2b21      	cmp	r3, #33	@ 0x21
 800c082:	d900      	bls.n	800c086 <_ux_device_stack_transfer_run+0x6e>
 800c084:	e065      	b.n	800c152 <_ux_device_stack_transfer_run+0x13a>
 800c086:	69bb      	ldr	r3, [r7, #24]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d003      	beq.n	800c094 <_ux_device_stack_transfer_run+0x7c>
 800c08c:	69bb      	ldr	r3, [r7, #24]
 800c08e:	2b20      	cmp	r3, #32
 800c090:	d041      	beq.n	800c116 <_ux_device_stack_transfer_run+0xfe>
 800c092:	e05e      	b.n	800c152 <_ux_device_stack_transfer_run+0x13a>
    case UX_STATE_RESET:

        /* Prepare transfer parameters.  */

        /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 800c094:	69fb      	ldr	r3, [r7, #28]
 800c096:	7bdb      	ldrb	r3, [r3, #15]
 800c098:	001a      	movs	r2, r3
 800c09a:	2303      	movs	r3, #3
 800c09c:	4013      	ands	r3, r2
 800c09e:	d00b      	beq.n	800c0b8 <_ux_device_stack_transfer_run+0xa0>
        {

            /* Isolate the direction from the endpoint address.  */
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 800c0a0:	69fb      	ldr	r3, [r7, #28]
 800c0a2:	7b9b      	ldrb	r3, [r3, #14]
 800c0a4:	b25b      	sxtb	r3, r3
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	da03      	bge.n	800c0b2 <_ux_device_stack_transfer_run+0x9a>
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2203      	movs	r2, #3
 800c0ae:	629a      	str	r2, [r3, #40]	@ 0x28
 800c0b0:	e002      	b.n	800c0b8 <_ux_device_stack_transfer_run+0xa0>
            else
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2202      	movs	r2, #2
 800c0b6:	629a      	str	r2, [r3, #40]	@ 0x28

        /* See if we need to force a zero length packet at the end of the transfer.
           This happens on a DATA IN and when the host requested length is not met
           and the last packet is on a boundary. If slave_length is zero, then it is
           a explicit ZLP request, no need to force ZLP.  */
        if ((transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT) &&
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0bc:	2b03      	cmp	r3, #3
 800c0be:	d114      	bne.n	800c0ea <_ux_device_stack_transfer_run+0xd2>
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d011      	beq.n	800c0ea <_ux_device_stack_transfer_run+0xd2>
            (slave_length != 0) && (host_length != slave_length) &&
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d00d      	beq.n	800c0ea <_ux_device_stack_transfer_run+0xd2>
            (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	8a1b      	ldrh	r3, [r3, #16]
 800c0d2:	001a      	movs	r2, r3
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	0011      	movs	r1, r2
 800c0d8:	0018      	movs	r0, r3
 800c0da:	f7f4 f8ad 	bl	8000238 <__aeabi_uidivmod>
 800c0de:	1e0b      	subs	r3, r1, #0
            (slave_length != 0) && (host_length != slave_length) &&
 800c0e0:	d103      	bne.n	800c0ea <_ux_device_stack_transfer_run+0xd2>
        {

            /* If so force Zero Length Packet.  */
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_TRUE;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2201      	movs	r2, #1
 800c0e6:	639a      	str	r2, [r3, #56]	@ 0x38
 800c0e8:	e002      	b.n	800c0f0 <_ux_device_stack_transfer_run+0xd8>
        }
        else
        {

            /* Condition is not met, do not force a Zero Length Packet.  */
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	639a      	str	r2, [r3, #56]	@ 0x38
        }

        /* Reset the number of bytes sent/received.  */
        transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	619a      	str	r2, [r3, #24]

        /* Determine how many bytes to send in this transaction.  We keep track of the original
           length and have a working length.  */
        transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	68ba      	ldr	r2, [r7, #8]
 800c0fa:	615a      	str	r2, [r3, #20]
        transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	68ba      	ldr	r2, [r7, #8]
 800c100:	61da      	str	r2, [r3, #28]

        /* Save the buffer pointer.  */
        transfer_request -> ux_slave_transfer_request_current_data_pointer =
                                transfer_request -> ux_slave_transfer_request_data_pointer;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	68da      	ldr	r2, [r3, #12]
        transfer_request -> ux_slave_transfer_request_current_data_pointer =
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	611a      	str	r2, [r3, #16]

        /* Set the transfer to pending.  */
        transfer_request -> ux_slave_transfer_request_status = UX_TRANSFER_STATUS_PENDING;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2201      	movs	r2, #1
 800c10e:	601a      	str	r2, [r3, #0]

        /* Next state.  */
        transfer_request -> ux_slave_transfer_request_state = UX_DEVICE_STACK_TRANSFER_STATE_HALT_WAIT;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2220      	movs	r2, #32
 800c114:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Fall through.  */
    case UX_DEVICE_STACK_TRANSFER_STATE_HALT_WAIT:

        /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 800c116:	69fb      	ldr	r3, [r7, #28]
 800c118:	7bdb      	ldrb	r3, [r3, #15]
 800c11a:	001a      	movs	r2, r3
 800c11c:	2303      	movs	r3, #3
 800c11e:	4013      	ands	r3, r2
 800c120:	d005      	beq.n	800c12e <_ux_device_stack_transfer_run+0x116>
        {

            /* Return WAIT until halt cleared.  */
            if (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 800c122:	69fb      	ldr	r3, [r7, #28]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	2b02      	cmp	r3, #2
 800c128:	d101      	bne.n	800c12e <_ux_device_stack_transfer_run+0x116>
                return(UX_STATE_WAIT);
 800c12a:	2305      	movs	r3, #5
 800c12c:	e018      	b.n	800c160 <_ux_device_stack_transfer_run+0x148>

        }

        /* Next state.  */
        transfer_request -> ux_slave_transfer_request_state = UX_DEVICE_STACK_TRANSFER_STATE_TRAN_WAIT;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2221      	movs	r2, #33	@ 0x21
 800c132:	631a      	str	r2, [r3, #48]	@ 0x30
        /* Fall through.  */
    case UX_DEVICE_STACK_TRANSFER_STATE_TRAN_WAIT:

        /* Call the DCD driver transfer function.   */
        /* Transfer state is adjusted inside DCD driver.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_RUN, transfer_request);
 800c134:	6a3b      	ldr	r3, [r7, #32]
 800c136:	699b      	ldr	r3, [r3, #24]
 800c138:	68fa      	ldr	r2, [r7, #12]
 800c13a:	6a38      	ldr	r0, [r7, #32]
 800c13c:	210c      	movs	r1, #12
 800c13e:	4798      	blx	r3
 800c140:	0003      	movs	r3, r0
 800c142:	617b      	str	r3, [r7, #20]

        /* Any error case or normal end: reset state for next transfer.  */
        if (status < UX_STATE_WAIT)
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	2b04      	cmp	r3, #4
 800c148:	d808      	bhi.n	800c15c <_ux_device_stack_transfer_run+0x144>
        {
            UX_SLAVE_TRANSFER_STATE_RESET(transfer_request);
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2200      	movs	r2, #0
 800c14e:	631a      	str	r2, [r3, #48]	@ 0x30
        }
        break;
 800c150:	e004      	b.n	800c15c <_ux_device_stack_transfer_run+0x144>

    default: /* Error case, return EXIT.  */
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_RESET;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2200      	movs	r2, #0
 800c156:	631a      	str	r2, [r3, #48]	@ 0x30
        return(UX_STATE_EXIT);
 800c158:	2301      	movs	r3, #1
 800c15a:	e001      	b.n	800c160 <_ux_device_stack_transfer_run+0x148>
        break;
 800c15c:	46c0      	nop			@ (mov r8, r8)
    }

    /* And return the status.  */
    return(status);
 800c15e:	697b      	ldr	r3, [r7, #20]
}
 800c160:	0018      	movs	r0, r3
 800c162:	46bd      	mov	sp, r7
 800c164:	b00a      	add	sp, #40	@ 0x28
 800c166:	bd80      	pop	{r7, pc}
 800c168:	200015a0 	.word	0x200015a0

0800c16c <std>:
 800c16c:	2300      	movs	r3, #0
 800c16e:	b510      	push	{r4, lr}
 800c170:	0004      	movs	r4, r0
 800c172:	6003      	str	r3, [r0, #0]
 800c174:	6043      	str	r3, [r0, #4]
 800c176:	6083      	str	r3, [r0, #8]
 800c178:	8181      	strh	r1, [r0, #12]
 800c17a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c17c:	81c2      	strh	r2, [r0, #14]
 800c17e:	6103      	str	r3, [r0, #16]
 800c180:	6143      	str	r3, [r0, #20]
 800c182:	6183      	str	r3, [r0, #24]
 800c184:	0019      	movs	r1, r3
 800c186:	2208      	movs	r2, #8
 800c188:	305c      	adds	r0, #92	@ 0x5c
 800c18a:	f000 f90f 	bl	800c3ac <memset>
 800c18e:	4b0b      	ldr	r3, [pc, #44]	@ (800c1bc <std+0x50>)
 800c190:	6224      	str	r4, [r4, #32]
 800c192:	6263      	str	r3, [r4, #36]	@ 0x24
 800c194:	4b0a      	ldr	r3, [pc, #40]	@ (800c1c0 <std+0x54>)
 800c196:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c198:	4b0a      	ldr	r3, [pc, #40]	@ (800c1c4 <std+0x58>)
 800c19a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c19c:	4b0a      	ldr	r3, [pc, #40]	@ (800c1c8 <std+0x5c>)
 800c19e:	6323      	str	r3, [r4, #48]	@ 0x30
 800c1a0:	4b0a      	ldr	r3, [pc, #40]	@ (800c1cc <std+0x60>)
 800c1a2:	429c      	cmp	r4, r3
 800c1a4:	d005      	beq.n	800c1b2 <std+0x46>
 800c1a6:	4b0a      	ldr	r3, [pc, #40]	@ (800c1d0 <std+0x64>)
 800c1a8:	429c      	cmp	r4, r3
 800c1aa:	d002      	beq.n	800c1b2 <std+0x46>
 800c1ac:	4b09      	ldr	r3, [pc, #36]	@ (800c1d4 <std+0x68>)
 800c1ae:	429c      	cmp	r4, r3
 800c1b0:	d103      	bne.n	800c1ba <std+0x4e>
 800c1b2:	0020      	movs	r0, r4
 800c1b4:	3058      	adds	r0, #88	@ 0x58
 800c1b6:	f000 f979 	bl	800c4ac <__retarget_lock_init_recursive>
 800c1ba:	bd10      	pop	{r4, pc}
 800c1bc:	0800c315 	.word	0x0800c315
 800c1c0:	0800c33d 	.word	0x0800c33d
 800c1c4:	0800c375 	.word	0x0800c375
 800c1c8:	0800c3a1 	.word	0x0800c3a1
 800c1cc:	200015a4 	.word	0x200015a4
 800c1d0:	2000160c 	.word	0x2000160c
 800c1d4:	20001674 	.word	0x20001674

0800c1d8 <stdio_exit_handler>:
 800c1d8:	b510      	push	{r4, lr}
 800c1da:	4a03      	ldr	r2, [pc, #12]	@ (800c1e8 <stdio_exit_handler+0x10>)
 800c1dc:	4903      	ldr	r1, [pc, #12]	@ (800c1ec <stdio_exit_handler+0x14>)
 800c1de:	4804      	ldr	r0, [pc, #16]	@ (800c1f0 <stdio_exit_handler+0x18>)
 800c1e0:	f000 f86c 	bl	800c2bc <_fwalk_sglue>
 800c1e4:	bd10      	pop	{r4, pc}
 800c1e6:	46c0      	nop			@ (mov r8, r8)
 800c1e8:	2000008c 	.word	0x2000008c
 800c1ec:	0800cd39 	.word	0x0800cd39
 800c1f0:	2000009c 	.word	0x2000009c

0800c1f4 <cleanup_stdio>:
 800c1f4:	6841      	ldr	r1, [r0, #4]
 800c1f6:	4b0b      	ldr	r3, [pc, #44]	@ (800c224 <cleanup_stdio+0x30>)
 800c1f8:	b510      	push	{r4, lr}
 800c1fa:	0004      	movs	r4, r0
 800c1fc:	4299      	cmp	r1, r3
 800c1fe:	d001      	beq.n	800c204 <cleanup_stdio+0x10>
 800c200:	f000 fd9a 	bl	800cd38 <_fflush_r>
 800c204:	68a1      	ldr	r1, [r4, #8]
 800c206:	4b08      	ldr	r3, [pc, #32]	@ (800c228 <cleanup_stdio+0x34>)
 800c208:	4299      	cmp	r1, r3
 800c20a:	d002      	beq.n	800c212 <cleanup_stdio+0x1e>
 800c20c:	0020      	movs	r0, r4
 800c20e:	f000 fd93 	bl	800cd38 <_fflush_r>
 800c212:	68e1      	ldr	r1, [r4, #12]
 800c214:	4b05      	ldr	r3, [pc, #20]	@ (800c22c <cleanup_stdio+0x38>)
 800c216:	4299      	cmp	r1, r3
 800c218:	d002      	beq.n	800c220 <cleanup_stdio+0x2c>
 800c21a:	0020      	movs	r0, r4
 800c21c:	f000 fd8c 	bl	800cd38 <_fflush_r>
 800c220:	bd10      	pop	{r4, pc}
 800c222:	46c0      	nop			@ (mov r8, r8)
 800c224:	200015a4 	.word	0x200015a4
 800c228:	2000160c 	.word	0x2000160c
 800c22c:	20001674 	.word	0x20001674

0800c230 <global_stdio_init.part.0>:
 800c230:	b510      	push	{r4, lr}
 800c232:	4b09      	ldr	r3, [pc, #36]	@ (800c258 <global_stdio_init.part.0+0x28>)
 800c234:	4a09      	ldr	r2, [pc, #36]	@ (800c25c <global_stdio_init.part.0+0x2c>)
 800c236:	2104      	movs	r1, #4
 800c238:	601a      	str	r2, [r3, #0]
 800c23a:	4809      	ldr	r0, [pc, #36]	@ (800c260 <global_stdio_init.part.0+0x30>)
 800c23c:	2200      	movs	r2, #0
 800c23e:	f7ff ff95 	bl	800c16c <std>
 800c242:	2201      	movs	r2, #1
 800c244:	2109      	movs	r1, #9
 800c246:	4807      	ldr	r0, [pc, #28]	@ (800c264 <global_stdio_init.part.0+0x34>)
 800c248:	f7ff ff90 	bl	800c16c <std>
 800c24c:	2202      	movs	r2, #2
 800c24e:	2112      	movs	r1, #18
 800c250:	4805      	ldr	r0, [pc, #20]	@ (800c268 <global_stdio_init.part.0+0x38>)
 800c252:	f7ff ff8b 	bl	800c16c <std>
 800c256:	bd10      	pop	{r4, pc}
 800c258:	200016dc 	.word	0x200016dc
 800c25c:	0800c1d9 	.word	0x0800c1d9
 800c260:	200015a4 	.word	0x200015a4
 800c264:	2000160c 	.word	0x2000160c
 800c268:	20001674 	.word	0x20001674

0800c26c <__sfp_lock_acquire>:
 800c26c:	b510      	push	{r4, lr}
 800c26e:	4802      	ldr	r0, [pc, #8]	@ (800c278 <__sfp_lock_acquire+0xc>)
 800c270:	f000 f91d 	bl	800c4ae <__retarget_lock_acquire_recursive>
 800c274:	bd10      	pop	{r4, pc}
 800c276:	46c0      	nop			@ (mov r8, r8)
 800c278:	200016e5 	.word	0x200016e5

0800c27c <__sfp_lock_release>:
 800c27c:	b510      	push	{r4, lr}
 800c27e:	4802      	ldr	r0, [pc, #8]	@ (800c288 <__sfp_lock_release+0xc>)
 800c280:	f000 f916 	bl	800c4b0 <__retarget_lock_release_recursive>
 800c284:	bd10      	pop	{r4, pc}
 800c286:	46c0      	nop			@ (mov r8, r8)
 800c288:	200016e5 	.word	0x200016e5

0800c28c <__sinit>:
 800c28c:	b510      	push	{r4, lr}
 800c28e:	0004      	movs	r4, r0
 800c290:	f7ff ffec 	bl	800c26c <__sfp_lock_acquire>
 800c294:	6a23      	ldr	r3, [r4, #32]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d002      	beq.n	800c2a0 <__sinit+0x14>
 800c29a:	f7ff ffef 	bl	800c27c <__sfp_lock_release>
 800c29e:	bd10      	pop	{r4, pc}
 800c2a0:	4b04      	ldr	r3, [pc, #16]	@ (800c2b4 <__sinit+0x28>)
 800c2a2:	6223      	str	r3, [r4, #32]
 800c2a4:	4b04      	ldr	r3, [pc, #16]	@ (800c2b8 <__sinit+0x2c>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d1f6      	bne.n	800c29a <__sinit+0xe>
 800c2ac:	f7ff ffc0 	bl	800c230 <global_stdio_init.part.0>
 800c2b0:	e7f3      	b.n	800c29a <__sinit+0xe>
 800c2b2:	46c0      	nop			@ (mov r8, r8)
 800c2b4:	0800c1f5 	.word	0x0800c1f5
 800c2b8:	200016dc 	.word	0x200016dc

0800c2bc <_fwalk_sglue>:
 800c2bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2be:	0014      	movs	r4, r2
 800c2c0:	2600      	movs	r6, #0
 800c2c2:	9000      	str	r0, [sp, #0]
 800c2c4:	9101      	str	r1, [sp, #4]
 800c2c6:	68a5      	ldr	r5, [r4, #8]
 800c2c8:	6867      	ldr	r7, [r4, #4]
 800c2ca:	3f01      	subs	r7, #1
 800c2cc:	d504      	bpl.n	800c2d8 <_fwalk_sglue+0x1c>
 800c2ce:	6824      	ldr	r4, [r4, #0]
 800c2d0:	2c00      	cmp	r4, #0
 800c2d2:	d1f8      	bne.n	800c2c6 <_fwalk_sglue+0xa>
 800c2d4:	0030      	movs	r0, r6
 800c2d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c2d8:	89ab      	ldrh	r3, [r5, #12]
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d908      	bls.n	800c2f0 <_fwalk_sglue+0x34>
 800c2de:	220e      	movs	r2, #14
 800c2e0:	5eab      	ldrsh	r3, [r5, r2]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	d004      	beq.n	800c2f0 <_fwalk_sglue+0x34>
 800c2e6:	0029      	movs	r1, r5
 800c2e8:	9800      	ldr	r0, [sp, #0]
 800c2ea:	9b01      	ldr	r3, [sp, #4]
 800c2ec:	4798      	blx	r3
 800c2ee:	4306      	orrs	r6, r0
 800c2f0:	3568      	adds	r5, #104	@ 0x68
 800c2f2:	e7ea      	b.n	800c2ca <_fwalk_sglue+0xe>

0800c2f4 <iprintf>:
 800c2f4:	b40f      	push	{r0, r1, r2, r3}
 800c2f6:	b507      	push	{r0, r1, r2, lr}
 800c2f8:	4905      	ldr	r1, [pc, #20]	@ (800c310 <iprintf+0x1c>)
 800c2fa:	ab04      	add	r3, sp, #16
 800c2fc:	6808      	ldr	r0, [r1, #0]
 800c2fe:	cb04      	ldmia	r3!, {r2}
 800c300:	6881      	ldr	r1, [r0, #8]
 800c302:	9301      	str	r3, [sp, #4]
 800c304:	f000 f9fa 	bl	800c6fc <_vfiprintf_r>
 800c308:	b003      	add	sp, #12
 800c30a:	bc08      	pop	{r3}
 800c30c:	b004      	add	sp, #16
 800c30e:	4718      	bx	r3
 800c310:	20000098 	.word	0x20000098

0800c314 <__sread>:
 800c314:	b570      	push	{r4, r5, r6, lr}
 800c316:	000c      	movs	r4, r1
 800c318:	250e      	movs	r5, #14
 800c31a:	5f49      	ldrsh	r1, [r1, r5]
 800c31c:	f000 f874 	bl	800c408 <_read_r>
 800c320:	2800      	cmp	r0, #0
 800c322:	db03      	blt.n	800c32c <__sread+0x18>
 800c324:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c326:	181b      	adds	r3, r3, r0
 800c328:	6563      	str	r3, [r4, #84]	@ 0x54
 800c32a:	bd70      	pop	{r4, r5, r6, pc}
 800c32c:	89a3      	ldrh	r3, [r4, #12]
 800c32e:	4a02      	ldr	r2, [pc, #8]	@ (800c338 <__sread+0x24>)
 800c330:	4013      	ands	r3, r2
 800c332:	81a3      	strh	r3, [r4, #12]
 800c334:	e7f9      	b.n	800c32a <__sread+0x16>
 800c336:	46c0      	nop			@ (mov r8, r8)
 800c338:	ffffefff 	.word	0xffffefff

0800c33c <__swrite>:
 800c33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c33e:	001f      	movs	r7, r3
 800c340:	898b      	ldrh	r3, [r1, #12]
 800c342:	0005      	movs	r5, r0
 800c344:	000c      	movs	r4, r1
 800c346:	0016      	movs	r6, r2
 800c348:	05db      	lsls	r3, r3, #23
 800c34a:	d505      	bpl.n	800c358 <__swrite+0x1c>
 800c34c:	230e      	movs	r3, #14
 800c34e:	5ec9      	ldrsh	r1, [r1, r3]
 800c350:	2200      	movs	r2, #0
 800c352:	2302      	movs	r3, #2
 800c354:	f000 f844 	bl	800c3e0 <_lseek_r>
 800c358:	89a3      	ldrh	r3, [r4, #12]
 800c35a:	4a05      	ldr	r2, [pc, #20]	@ (800c370 <__swrite+0x34>)
 800c35c:	0028      	movs	r0, r5
 800c35e:	4013      	ands	r3, r2
 800c360:	81a3      	strh	r3, [r4, #12]
 800c362:	0032      	movs	r2, r6
 800c364:	230e      	movs	r3, #14
 800c366:	5ee1      	ldrsh	r1, [r4, r3]
 800c368:	003b      	movs	r3, r7
 800c36a:	f000 f861 	bl	800c430 <_write_r>
 800c36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c370:	ffffefff 	.word	0xffffefff

0800c374 <__sseek>:
 800c374:	b570      	push	{r4, r5, r6, lr}
 800c376:	000c      	movs	r4, r1
 800c378:	250e      	movs	r5, #14
 800c37a:	5f49      	ldrsh	r1, [r1, r5]
 800c37c:	f000 f830 	bl	800c3e0 <_lseek_r>
 800c380:	89a3      	ldrh	r3, [r4, #12]
 800c382:	1c42      	adds	r2, r0, #1
 800c384:	d103      	bne.n	800c38e <__sseek+0x1a>
 800c386:	4a05      	ldr	r2, [pc, #20]	@ (800c39c <__sseek+0x28>)
 800c388:	4013      	ands	r3, r2
 800c38a:	81a3      	strh	r3, [r4, #12]
 800c38c:	bd70      	pop	{r4, r5, r6, pc}
 800c38e:	2280      	movs	r2, #128	@ 0x80
 800c390:	0152      	lsls	r2, r2, #5
 800c392:	4313      	orrs	r3, r2
 800c394:	81a3      	strh	r3, [r4, #12]
 800c396:	6560      	str	r0, [r4, #84]	@ 0x54
 800c398:	e7f8      	b.n	800c38c <__sseek+0x18>
 800c39a:	46c0      	nop			@ (mov r8, r8)
 800c39c:	ffffefff 	.word	0xffffefff

0800c3a0 <__sclose>:
 800c3a0:	b510      	push	{r4, lr}
 800c3a2:	230e      	movs	r3, #14
 800c3a4:	5ec9      	ldrsh	r1, [r1, r3]
 800c3a6:	f000 f809 	bl	800c3bc <_close_r>
 800c3aa:	bd10      	pop	{r4, pc}

0800c3ac <memset>:
 800c3ac:	0003      	movs	r3, r0
 800c3ae:	1882      	adds	r2, r0, r2
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d100      	bne.n	800c3b6 <memset+0xa>
 800c3b4:	4770      	bx	lr
 800c3b6:	7019      	strb	r1, [r3, #0]
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	e7f9      	b.n	800c3b0 <memset+0x4>

0800c3bc <_close_r>:
 800c3bc:	2300      	movs	r3, #0
 800c3be:	b570      	push	{r4, r5, r6, lr}
 800c3c0:	4d06      	ldr	r5, [pc, #24]	@ (800c3dc <_close_r+0x20>)
 800c3c2:	0004      	movs	r4, r0
 800c3c4:	0008      	movs	r0, r1
 800c3c6:	602b      	str	r3, [r5, #0]
 800c3c8:	f7f4 fc45 	bl	8000c56 <_close>
 800c3cc:	1c43      	adds	r3, r0, #1
 800c3ce:	d103      	bne.n	800c3d8 <_close_r+0x1c>
 800c3d0:	682b      	ldr	r3, [r5, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d000      	beq.n	800c3d8 <_close_r+0x1c>
 800c3d6:	6023      	str	r3, [r4, #0]
 800c3d8:	bd70      	pop	{r4, r5, r6, pc}
 800c3da:	46c0      	nop			@ (mov r8, r8)
 800c3dc:	200016e0 	.word	0x200016e0

0800c3e0 <_lseek_r>:
 800c3e0:	b570      	push	{r4, r5, r6, lr}
 800c3e2:	0004      	movs	r4, r0
 800c3e4:	0008      	movs	r0, r1
 800c3e6:	0011      	movs	r1, r2
 800c3e8:	001a      	movs	r2, r3
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	4d05      	ldr	r5, [pc, #20]	@ (800c404 <_lseek_r+0x24>)
 800c3ee:	602b      	str	r3, [r5, #0]
 800c3f0:	f7f4 fc52 	bl	8000c98 <_lseek>
 800c3f4:	1c43      	adds	r3, r0, #1
 800c3f6:	d103      	bne.n	800c400 <_lseek_r+0x20>
 800c3f8:	682b      	ldr	r3, [r5, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d000      	beq.n	800c400 <_lseek_r+0x20>
 800c3fe:	6023      	str	r3, [r4, #0]
 800c400:	bd70      	pop	{r4, r5, r6, pc}
 800c402:	46c0      	nop			@ (mov r8, r8)
 800c404:	200016e0 	.word	0x200016e0

0800c408 <_read_r>:
 800c408:	b570      	push	{r4, r5, r6, lr}
 800c40a:	0004      	movs	r4, r0
 800c40c:	0008      	movs	r0, r1
 800c40e:	0011      	movs	r1, r2
 800c410:	001a      	movs	r2, r3
 800c412:	2300      	movs	r3, #0
 800c414:	4d05      	ldr	r5, [pc, #20]	@ (800c42c <_read_r+0x24>)
 800c416:	602b      	str	r3, [r5, #0]
 800c418:	f7f4 fc00 	bl	8000c1c <_read>
 800c41c:	1c43      	adds	r3, r0, #1
 800c41e:	d103      	bne.n	800c428 <_read_r+0x20>
 800c420:	682b      	ldr	r3, [r5, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d000      	beq.n	800c428 <_read_r+0x20>
 800c426:	6023      	str	r3, [r4, #0]
 800c428:	bd70      	pop	{r4, r5, r6, pc}
 800c42a:	46c0      	nop			@ (mov r8, r8)
 800c42c:	200016e0 	.word	0x200016e0

0800c430 <_write_r>:
 800c430:	b570      	push	{r4, r5, r6, lr}
 800c432:	0004      	movs	r4, r0
 800c434:	0008      	movs	r0, r1
 800c436:	0011      	movs	r1, r2
 800c438:	001a      	movs	r2, r3
 800c43a:	2300      	movs	r3, #0
 800c43c:	4d05      	ldr	r5, [pc, #20]	@ (800c454 <_write_r+0x24>)
 800c43e:	602b      	str	r3, [r5, #0]
 800c440:	f7f4 f900 	bl	8000644 <_write>
 800c444:	1c43      	adds	r3, r0, #1
 800c446:	d103      	bne.n	800c450 <_write_r+0x20>
 800c448:	682b      	ldr	r3, [r5, #0]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d000      	beq.n	800c450 <_write_r+0x20>
 800c44e:	6023      	str	r3, [r4, #0]
 800c450:	bd70      	pop	{r4, r5, r6, pc}
 800c452:	46c0      	nop			@ (mov r8, r8)
 800c454:	200016e0 	.word	0x200016e0

0800c458 <__errno>:
 800c458:	4b01      	ldr	r3, [pc, #4]	@ (800c460 <__errno+0x8>)
 800c45a:	6818      	ldr	r0, [r3, #0]
 800c45c:	4770      	bx	lr
 800c45e:	46c0      	nop			@ (mov r8, r8)
 800c460:	20000098 	.word	0x20000098

0800c464 <__libc_init_array>:
 800c464:	b570      	push	{r4, r5, r6, lr}
 800c466:	2600      	movs	r6, #0
 800c468:	4c0c      	ldr	r4, [pc, #48]	@ (800c49c <__libc_init_array+0x38>)
 800c46a:	4d0d      	ldr	r5, [pc, #52]	@ (800c4a0 <__libc_init_array+0x3c>)
 800c46c:	1b64      	subs	r4, r4, r5
 800c46e:	10a4      	asrs	r4, r4, #2
 800c470:	42a6      	cmp	r6, r4
 800c472:	d109      	bne.n	800c488 <__libc_init_array+0x24>
 800c474:	2600      	movs	r6, #0
 800c476:	f000 fdd9 	bl	800d02c <_init>
 800c47a:	4c0a      	ldr	r4, [pc, #40]	@ (800c4a4 <__libc_init_array+0x40>)
 800c47c:	4d0a      	ldr	r5, [pc, #40]	@ (800c4a8 <__libc_init_array+0x44>)
 800c47e:	1b64      	subs	r4, r4, r5
 800c480:	10a4      	asrs	r4, r4, #2
 800c482:	42a6      	cmp	r6, r4
 800c484:	d105      	bne.n	800c492 <__libc_init_array+0x2e>
 800c486:	bd70      	pop	{r4, r5, r6, pc}
 800c488:	00b3      	lsls	r3, r6, #2
 800c48a:	58eb      	ldr	r3, [r5, r3]
 800c48c:	4798      	blx	r3
 800c48e:	3601      	adds	r6, #1
 800c490:	e7ee      	b.n	800c470 <__libc_init_array+0xc>
 800c492:	00b3      	lsls	r3, r6, #2
 800c494:	58eb      	ldr	r3, [r5, r3]
 800c496:	4798      	blx	r3
 800c498:	3601      	adds	r6, #1
 800c49a:	e7f2      	b.n	800c482 <__libc_init_array+0x1e>
 800c49c:	0800d2b8 	.word	0x0800d2b8
 800c4a0:	0800d2b8 	.word	0x0800d2b8
 800c4a4:	0800d2bc 	.word	0x0800d2bc
 800c4a8:	0800d2b8 	.word	0x0800d2b8

0800c4ac <__retarget_lock_init_recursive>:
 800c4ac:	4770      	bx	lr

0800c4ae <__retarget_lock_acquire_recursive>:
 800c4ae:	4770      	bx	lr

0800c4b0 <__retarget_lock_release_recursive>:
 800c4b0:	4770      	bx	lr
	...

0800c4b4 <_free_r>:
 800c4b4:	b570      	push	{r4, r5, r6, lr}
 800c4b6:	0005      	movs	r5, r0
 800c4b8:	1e0c      	subs	r4, r1, #0
 800c4ba:	d010      	beq.n	800c4de <_free_r+0x2a>
 800c4bc:	3c04      	subs	r4, #4
 800c4be:	6823      	ldr	r3, [r4, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	da00      	bge.n	800c4c6 <_free_r+0x12>
 800c4c4:	18e4      	adds	r4, r4, r3
 800c4c6:	0028      	movs	r0, r5
 800c4c8:	f000 f8e0 	bl	800c68c <__malloc_lock>
 800c4cc:	4a1d      	ldr	r2, [pc, #116]	@ (800c544 <_free_r+0x90>)
 800c4ce:	6813      	ldr	r3, [r2, #0]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d105      	bne.n	800c4e0 <_free_r+0x2c>
 800c4d4:	6063      	str	r3, [r4, #4]
 800c4d6:	6014      	str	r4, [r2, #0]
 800c4d8:	0028      	movs	r0, r5
 800c4da:	f000 f8df 	bl	800c69c <__malloc_unlock>
 800c4de:	bd70      	pop	{r4, r5, r6, pc}
 800c4e0:	42a3      	cmp	r3, r4
 800c4e2:	d908      	bls.n	800c4f6 <_free_r+0x42>
 800c4e4:	6820      	ldr	r0, [r4, #0]
 800c4e6:	1821      	adds	r1, r4, r0
 800c4e8:	428b      	cmp	r3, r1
 800c4ea:	d1f3      	bne.n	800c4d4 <_free_r+0x20>
 800c4ec:	6819      	ldr	r1, [r3, #0]
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	1809      	adds	r1, r1, r0
 800c4f2:	6021      	str	r1, [r4, #0]
 800c4f4:	e7ee      	b.n	800c4d4 <_free_r+0x20>
 800c4f6:	001a      	movs	r2, r3
 800c4f8:	685b      	ldr	r3, [r3, #4]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d001      	beq.n	800c502 <_free_r+0x4e>
 800c4fe:	42a3      	cmp	r3, r4
 800c500:	d9f9      	bls.n	800c4f6 <_free_r+0x42>
 800c502:	6811      	ldr	r1, [r2, #0]
 800c504:	1850      	adds	r0, r2, r1
 800c506:	42a0      	cmp	r0, r4
 800c508:	d10b      	bne.n	800c522 <_free_r+0x6e>
 800c50a:	6820      	ldr	r0, [r4, #0]
 800c50c:	1809      	adds	r1, r1, r0
 800c50e:	1850      	adds	r0, r2, r1
 800c510:	6011      	str	r1, [r2, #0]
 800c512:	4283      	cmp	r3, r0
 800c514:	d1e0      	bne.n	800c4d8 <_free_r+0x24>
 800c516:	6818      	ldr	r0, [r3, #0]
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	1841      	adds	r1, r0, r1
 800c51c:	6011      	str	r1, [r2, #0]
 800c51e:	6053      	str	r3, [r2, #4]
 800c520:	e7da      	b.n	800c4d8 <_free_r+0x24>
 800c522:	42a0      	cmp	r0, r4
 800c524:	d902      	bls.n	800c52c <_free_r+0x78>
 800c526:	230c      	movs	r3, #12
 800c528:	602b      	str	r3, [r5, #0]
 800c52a:	e7d5      	b.n	800c4d8 <_free_r+0x24>
 800c52c:	6820      	ldr	r0, [r4, #0]
 800c52e:	1821      	adds	r1, r4, r0
 800c530:	428b      	cmp	r3, r1
 800c532:	d103      	bne.n	800c53c <_free_r+0x88>
 800c534:	6819      	ldr	r1, [r3, #0]
 800c536:	685b      	ldr	r3, [r3, #4]
 800c538:	1809      	adds	r1, r1, r0
 800c53a:	6021      	str	r1, [r4, #0]
 800c53c:	6063      	str	r3, [r4, #4]
 800c53e:	6054      	str	r4, [r2, #4]
 800c540:	e7ca      	b.n	800c4d8 <_free_r+0x24>
 800c542:	46c0      	nop			@ (mov r8, r8)
 800c544:	200016ec 	.word	0x200016ec

0800c548 <sbrk_aligned>:
 800c548:	b570      	push	{r4, r5, r6, lr}
 800c54a:	4e0f      	ldr	r6, [pc, #60]	@ (800c588 <sbrk_aligned+0x40>)
 800c54c:	000d      	movs	r5, r1
 800c54e:	6831      	ldr	r1, [r6, #0]
 800c550:	0004      	movs	r4, r0
 800c552:	2900      	cmp	r1, #0
 800c554:	d102      	bne.n	800c55c <sbrk_aligned+0x14>
 800c556:	f000 fcbb 	bl	800ced0 <_sbrk_r>
 800c55a:	6030      	str	r0, [r6, #0]
 800c55c:	0029      	movs	r1, r5
 800c55e:	0020      	movs	r0, r4
 800c560:	f000 fcb6 	bl	800ced0 <_sbrk_r>
 800c564:	1c43      	adds	r3, r0, #1
 800c566:	d103      	bne.n	800c570 <sbrk_aligned+0x28>
 800c568:	2501      	movs	r5, #1
 800c56a:	426d      	negs	r5, r5
 800c56c:	0028      	movs	r0, r5
 800c56e:	bd70      	pop	{r4, r5, r6, pc}
 800c570:	2303      	movs	r3, #3
 800c572:	1cc5      	adds	r5, r0, #3
 800c574:	439d      	bics	r5, r3
 800c576:	42a8      	cmp	r0, r5
 800c578:	d0f8      	beq.n	800c56c <sbrk_aligned+0x24>
 800c57a:	1a29      	subs	r1, r5, r0
 800c57c:	0020      	movs	r0, r4
 800c57e:	f000 fca7 	bl	800ced0 <_sbrk_r>
 800c582:	3001      	adds	r0, #1
 800c584:	d1f2      	bne.n	800c56c <sbrk_aligned+0x24>
 800c586:	e7ef      	b.n	800c568 <sbrk_aligned+0x20>
 800c588:	200016e8 	.word	0x200016e8

0800c58c <_malloc_r>:
 800c58c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c58e:	2203      	movs	r2, #3
 800c590:	1ccb      	adds	r3, r1, #3
 800c592:	4393      	bics	r3, r2
 800c594:	3308      	adds	r3, #8
 800c596:	0005      	movs	r5, r0
 800c598:	001f      	movs	r7, r3
 800c59a:	2b0c      	cmp	r3, #12
 800c59c:	d234      	bcs.n	800c608 <_malloc_r+0x7c>
 800c59e:	270c      	movs	r7, #12
 800c5a0:	42b9      	cmp	r1, r7
 800c5a2:	d833      	bhi.n	800c60c <_malloc_r+0x80>
 800c5a4:	0028      	movs	r0, r5
 800c5a6:	f000 f871 	bl	800c68c <__malloc_lock>
 800c5aa:	4e37      	ldr	r6, [pc, #220]	@ (800c688 <_malloc_r+0xfc>)
 800c5ac:	6833      	ldr	r3, [r6, #0]
 800c5ae:	001c      	movs	r4, r3
 800c5b0:	2c00      	cmp	r4, #0
 800c5b2:	d12f      	bne.n	800c614 <_malloc_r+0x88>
 800c5b4:	0039      	movs	r1, r7
 800c5b6:	0028      	movs	r0, r5
 800c5b8:	f7ff ffc6 	bl	800c548 <sbrk_aligned>
 800c5bc:	0004      	movs	r4, r0
 800c5be:	1c43      	adds	r3, r0, #1
 800c5c0:	d15f      	bne.n	800c682 <_malloc_r+0xf6>
 800c5c2:	6834      	ldr	r4, [r6, #0]
 800c5c4:	9400      	str	r4, [sp, #0]
 800c5c6:	9b00      	ldr	r3, [sp, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d14a      	bne.n	800c662 <_malloc_r+0xd6>
 800c5cc:	2c00      	cmp	r4, #0
 800c5ce:	d052      	beq.n	800c676 <_malloc_r+0xea>
 800c5d0:	6823      	ldr	r3, [r4, #0]
 800c5d2:	0028      	movs	r0, r5
 800c5d4:	18e3      	adds	r3, r4, r3
 800c5d6:	9900      	ldr	r1, [sp, #0]
 800c5d8:	9301      	str	r3, [sp, #4]
 800c5da:	f000 fc79 	bl	800ced0 <_sbrk_r>
 800c5de:	9b01      	ldr	r3, [sp, #4]
 800c5e0:	4283      	cmp	r3, r0
 800c5e2:	d148      	bne.n	800c676 <_malloc_r+0xea>
 800c5e4:	6823      	ldr	r3, [r4, #0]
 800c5e6:	0028      	movs	r0, r5
 800c5e8:	1aff      	subs	r7, r7, r3
 800c5ea:	0039      	movs	r1, r7
 800c5ec:	f7ff ffac 	bl	800c548 <sbrk_aligned>
 800c5f0:	3001      	adds	r0, #1
 800c5f2:	d040      	beq.n	800c676 <_malloc_r+0xea>
 800c5f4:	6823      	ldr	r3, [r4, #0]
 800c5f6:	19db      	adds	r3, r3, r7
 800c5f8:	6023      	str	r3, [r4, #0]
 800c5fa:	6833      	ldr	r3, [r6, #0]
 800c5fc:	685a      	ldr	r2, [r3, #4]
 800c5fe:	2a00      	cmp	r2, #0
 800c600:	d133      	bne.n	800c66a <_malloc_r+0xde>
 800c602:	9b00      	ldr	r3, [sp, #0]
 800c604:	6033      	str	r3, [r6, #0]
 800c606:	e019      	b.n	800c63c <_malloc_r+0xb0>
 800c608:	2b00      	cmp	r3, #0
 800c60a:	dac9      	bge.n	800c5a0 <_malloc_r+0x14>
 800c60c:	230c      	movs	r3, #12
 800c60e:	602b      	str	r3, [r5, #0]
 800c610:	2000      	movs	r0, #0
 800c612:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c614:	6821      	ldr	r1, [r4, #0]
 800c616:	1bc9      	subs	r1, r1, r7
 800c618:	d420      	bmi.n	800c65c <_malloc_r+0xd0>
 800c61a:	290b      	cmp	r1, #11
 800c61c:	d90a      	bls.n	800c634 <_malloc_r+0xa8>
 800c61e:	19e2      	adds	r2, r4, r7
 800c620:	6027      	str	r7, [r4, #0]
 800c622:	42a3      	cmp	r3, r4
 800c624:	d104      	bne.n	800c630 <_malloc_r+0xa4>
 800c626:	6032      	str	r2, [r6, #0]
 800c628:	6863      	ldr	r3, [r4, #4]
 800c62a:	6011      	str	r1, [r2, #0]
 800c62c:	6053      	str	r3, [r2, #4]
 800c62e:	e005      	b.n	800c63c <_malloc_r+0xb0>
 800c630:	605a      	str	r2, [r3, #4]
 800c632:	e7f9      	b.n	800c628 <_malloc_r+0x9c>
 800c634:	6862      	ldr	r2, [r4, #4]
 800c636:	42a3      	cmp	r3, r4
 800c638:	d10e      	bne.n	800c658 <_malloc_r+0xcc>
 800c63a:	6032      	str	r2, [r6, #0]
 800c63c:	0028      	movs	r0, r5
 800c63e:	f000 f82d 	bl	800c69c <__malloc_unlock>
 800c642:	0020      	movs	r0, r4
 800c644:	2207      	movs	r2, #7
 800c646:	300b      	adds	r0, #11
 800c648:	1d23      	adds	r3, r4, #4
 800c64a:	4390      	bics	r0, r2
 800c64c:	1ac2      	subs	r2, r0, r3
 800c64e:	4298      	cmp	r0, r3
 800c650:	d0df      	beq.n	800c612 <_malloc_r+0x86>
 800c652:	1a1b      	subs	r3, r3, r0
 800c654:	50a3      	str	r3, [r4, r2]
 800c656:	e7dc      	b.n	800c612 <_malloc_r+0x86>
 800c658:	605a      	str	r2, [r3, #4]
 800c65a:	e7ef      	b.n	800c63c <_malloc_r+0xb0>
 800c65c:	0023      	movs	r3, r4
 800c65e:	6864      	ldr	r4, [r4, #4]
 800c660:	e7a6      	b.n	800c5b0 <_malloc_r+0x24>
 800c662:	9c00      	ldr	r4, [sp, #0]
 800c664:	6863      	ldr	r3, [r4, #4]
 800c666:	9300      	str	r3, [sp, #0]
 800c668:	e7ad      	b.n	800c5c6 <_malloc_r+0x3a>
 800c66a:	001a      	movs	r2, r3
 800c66c:	685b      	ldr	r3, [r3, #4]
 800c66e:	42a3      	cmp	r3, r4
 800c670:	d1fb      	bne.n	800c66a <_malloc_r+0xde>
 800c672:	2300      	movs	r3, #0
 800c674:	e7da      	b.n	800c62c <_malloc_r+0xa0>
 800c676:	230c      	movs	r3, #12
 800c678:	0028      	movs	r0, r5
 800c67a:	602b      	str	r3, [r5, #0]
 800c67c:	f000 f80e 	bl	800c69c <__malloc_unlock>
 800c680:	e7c6      	b.n	800c610 <_malloc_r+0x84>
 800c682:	6007      	str	r7, [r0, #0]
 800c684:	e7da      	b.n	800c63c <_malloc_r+0xb0>
 800c686:	46c0      	nop			@ (mov r8, r8)
 800c688:	200016ec 	.word	0x200016ec

0800c68c <__malloc_lock>:
 800c68c:	b510      	push	{r4, lr}
 800c68e:	4802      	ldr	r0, [pc, #8]	@ (800c698 <__malloc_lock+0xc>)
 800c690:	f7ff ff0d 	bl	800c4ae <__retarget_lock_acquire_recursive>
 800c694:	bd10      	pop	{r4, pc}
 800c696:	46c0      	nop			@ (mov r8, r8)
 800c698:	200016e4 	.word	0x200016e4

0800c69c <__malloc_unlock>:
 800c69c:	b510      	push	{r4, lr}
 800c69e:	4802      	ldr	r0, [pc, #8]	@ (800c6a8 <__malloc_unlock+0xc>)
 800c6a0:	f7ff ff06 	bl	800c4b0 <__retarget_lock_release_recursive>
 800c6a4:	bd10      	pop	{r4, pc}
 800c6a6:	46c0      	nop			@ (mov r8, r8)
 800c6a8:	200016e4 	.word	0x200016e4

0800c6ac <__sfputc_r>:
 800c6ac:	6893      	ldr	r3, [r2, #8]
 800c6ae:	b510      	push	{r4, lr}
 800c6b0:	3b01      	subs	r3, #1
 800c6b2:	6093      	str	r3, [r2, #8]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	da04      	bge.n	800c6c2 <__sfputc_r+0x16>
 800c6b8:	6994      	ldr	r4, [r2, #24]
 800c6ba:	42a3      	cmp	r3, r4
 800c6bc:	db07      	blt.n	800c6ce <__sfputc_r+0x22>
 800c6be:	290a      	cmp	r1, #10
 800c6c0:	d005      	beq.n	800c6ce <__sfputc_r+0x22>
 800c6c2:	6813      	ldr	r3, [r2, #0]
 800c6c4:	1c58      	adds	r0, r3, #1
 800c6c6:	6010      	str	r0, [r2, #0]
 800c6c8:	7019      	strb	r1, [r3, #0]
 800c6ca:	0008      	movs	r0, r1
 800c6cc:	bd10      	pop	{r4, pc}
 800c6ce:	f000 fb5e 	bl	800cd8e <__swbuf_r>
 800c6d2:	0001      	movs	r1, r0
 800c6d4:	e7f9      	b.n	800c6ca <__sfputc_r+0x1e>

0800c6d6 <__sfputs_r>:
 800c6d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6d8:	0006      	movs	r6, r0
 800c6da:	000f      	movs	r7, r1
 800c6dc:	0014      	movs	r4, r2
 800c6de:	18d5      	adds	r5, r2, r3
 800c6e0:	42ac      	cmp	r4, r5
 800c6e2:	d101      	bne.n	800c6e8 <__sfputs_r+0x12>
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	e007      	b.n	800c6f8 <__sfputs_r+0x22>
 800c6e8:	7821      	ldrb	r1, [r4, #0]
 800c6ea:	003a      	movs	r2, r7
 800c6ec:	0030      	movs	r0, r6
 800c6ee:	f7ff ffdd 	bl	800c6ac <__sfputc_r>
 800c6f2:	3401      	adds	r4, #1
 800c6f4:	1c43      	adds	r3, r0, #1
 800c6f6:	d1f3      	bne.n	800c6e0 <__sfputs_r+0xa>
 800c6f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c6fc <_vfiprintf_r>:
 800c6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6fe:	b0a1      	sub	sp, #132	@ 0x84
 800c700:	000f      	movs	r7, r1
 800c702:	0015      	movs	r5, r2
 800c704:	001e      	movs	r6, r3
 800c706:	9003      	str	r0, [sp, #12]
 800c708:	2800      	cmp	r0, #0
 800c70a:	d004      	beq.n	800c716 <_vfiprintf_r+0x1a>
 800c70c:	6a03      	ldr	r3, [r0, #32]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d101      	bne.n	800c716 <_vfiprintf_r+0x1a>
 800c712:	f7ff fdbb 	bl	800c28c <__sinit>
 800c716:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c718:	07db      	lsls	r3, r3, #31
 800c71a:	d405      	bmi.n	800c728 <_vfiprintf_r+0x2c>
 800c71c:	89bb      	ldrh	r3, [r7, #12]
 800c71e:	059b      	lsls	r3, r3, #22
 800c720:	d402      	bmi.n	800c728 <_vfiprintf_r+0x2c>
 800c722:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c724:	f7ff fec3 	bl	800c4ae <__retarget_lock_acquire_recursive>
 800c728:	89bb      	ldrh	r3, [r7, #12]
 800c72a:	071b      	lsls	r3, r3, #28
 800c72c:	d502      	bpl.n	800c734 <_vfiprintf_r+0x38>
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d113      	bne.n	800c75c <_vfiprintf_r+0x60>
 800c734:	0039      	movs	r1, r7
 800c736:	9803      	ldr	r0, [sp, #12]
 800c738:	f000 fb6c 	bl	800ce14 <__swsetup_r>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	d00d      	beq.n	800c75c <_vfiprintf_r+0x60>
 800c740:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c742:	07db      	lsls	r3, r3, #31
 800c744:	d503      	bpl.n	800c74e <_vfiprintf_r+0x52>
 800c746:	2001      	movs	r0, #1
 800c748:	4240      	negs	r0, r0
 800c74a:	b021      	add	sp, #132	@ 0x84
 800c74c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c74e:	89bb      	ldrh	r3, [r7, #12]
 800c750:	059b      	lsls	r3, r3, #22
 800c752:	d4f8      	bmi.n	800c746 <_vfiprintf_r+0x4a>
 800c754:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c756:	f7ff feab 	bl	800c4b0 <__retarget_lock_release_recursive>
 800c75a:	e7f4      	b.n	800c746 <_vfiprintf_r+0x4a>
 800c75c:	2300      	movs	r3, #0
 800c75e:	ac08      	add	r4, sp, #32
 800c760:	6163      	str	r3, [r4, #20]
 800c762:	3320      	adds	r3, #32
 800c764:	7663      	strb	r3, [r4, #25]
 800c766:	3310      	adds	r3, #16
 800c768:	76a3      	strb	r3, [r4, #26]
 800c76a:	9607      	str	r6, [sp, #28]
 800c76c:	002e      	movs	r6, r5
 800c76e:	7833      	ldrb	r3, [r6, #0]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d001      	beq.n	800c778 <_vfiprintf_r+0x7c>
 800c774:	2b25      	cmp	r3, #37	@ 0x25
 800c776:	d148      	bne.n	800c80a <_vfiprintf_r+0x10e>
 800c778:	1b73      	subs	r3, r6, r5
 800c77a:	9305      	str	r3, [sp, #20]
 800c77c:	42ae      	cmp	r6, r5
 800c77e:	d00b      	beq.n	800c798 <_vfiprintf_r+0x9c>
 800c780:	002a      	movs	r2, r5
 800c782:	0039      	movs	r1, r7
 800c784:	9803      	ldr	r0, [sp, #12]
 800c786:	f7ff ffa6 	bl	800c6d6 <__sfputs_r>
 800c78a:	3001      	adds	r0, #1
 800c78c:	d100      	bne.n	800c790 <_vfiprintf_r+0x94>
 800c78e:	e0ae      	b.n	800c8ee <_vfiprintf_r+0x1f2>
 800c790:	6963      	ldr	r3, [r4, #20]
 800c792:	9a05      	ldr	r2, [sp, #20]
 800c794:	189b      	adds	r3, r3, r2
 800c796:	6163      	str	r3, [r4, #20]
 800c798:	7833      	ldrb	r3, [r6, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d100      	bne.n	800c7a0 <_vfiprintf_r+0xa4>
 800c79e:	e0a6      	b.n	800c8ee <_vfiprintf_r+0x1f2>
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	4252      	negs	r2, r2
 800c7a6:	6062      	str	r2, [r4, #4]
 800c7a8:	a904      	add	r1, sp, #16
 800c7aa:	3254      	adds	r2, #84	@ 0x54
 800c7ac:	1852      	adds	r2, r2, r1
 800c7ae:	1c75      	adds	r5, r6, #1
 800c7b0:	6023      	str	r3, [r4, #0]
 800c7b2:	60e3      	str	r3, [r4, #12]
 800c7b4:	60a3      	str	r3, [r4, #8]
 800c7b6:	7013      	strb	r3, [r2, #0]
 800c7b8:	65a3      	str	r3, [r4, #88]	@ 0x58
 800c7ba:	4b59      	ldr	r3, [pc, #356]	@ (800c920 <_vfiprintf_r+0x224>)
 800c7bc:	2205      	movs	r2, #5
 800c7be:	0018      	movs	r0, r3
 800c7c0:	7829      	ldrb	r1, [r5, #0]
 800c7c2:	9305      	str	r3, [sp, #20]
 800c7c4:	f000 fb96 	bl	800cef4 <memchr>
 800c7c8:	1c6e      	adds	r6, r5, #1
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	d11f      	bne.n	800c80e <_vfiprintf_r+0x112>
 800c7ce:	6822      	ldr	r2, [r4, #0]
 800c7d0:	06d3      	lsls	r3, r2, #27
 800c7d2:	d504      	bpl.n	800c7de <_vfiprintf_r+0xe2>
 800c7d4:	2353      	movs	r3, #83	@ 0x53
 800c7d6:	a904      	add	r1, sp, #16
 800c7d8:	185b      	adds	r3, r3, r1
 800c7da:	2120      	movs	r1, #32
 800c7dc:	7019      	strb	r1, [r3, #0]
 800c7de:	0713      	lsls	r3, r2, #28
 800c7e0:	d504      	bpl.n	800c7ec <_vfiprintf_r+0xf0>
 800c7e2:	2353      	movs	r3, #83	@ 0x53
 800c7e4:	a904      	add	r1, sp, #16
 800c7e6:	185b      	adds	r3, r3, r1
 800c7e8:	212b      	movs	r1, #43	@ 0x2b
 800c7ea:	7019      	strb	r1, [r3, #0]
 800c7ec:	782b      	ldrb	r3, [r5, #0]
 800c7ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7f0:	d016      	beq.n	800c820 <_vfiprintf_r+0x124>
 800c7f2:	002e      	movs	r6, r5
 800c7f4:	2100      	movs	r1, #0
 800c7f6:	200a      	movs	r0, #10
 800c7f8:	68e3      	ldr	r3, [r4, #12]
 800c7fa:	7832      	ldrb	r2, [r6, #0]
 800c7fc:	1c75      	adds	r5, r6, #1
 800c7fe:	3a30      	subs	r2, #48	@ 0x30
 800c800:	2a09      	cmp	r2, #9
 800c802:	d950      	bls.n	800c8a6 <_vfiprintf_r+0x1aa>
 800c804:	2900      	cmp	r1, #0
 800c806:	d111      	bne.n	800c82c <_vfiprintf_r+0x130>
 800c808:	e017      	b.n	800c83a <_vfiprintf_r+0x13e>
 800c80a:	3601      	adds	r6, #1
 800c80c:	e7af      	b.n	800c76e <_vfiprintf_r+0x72>
 800c80e:	9b05      	ldr	r3, [sp, #20]
 800c810:	6822      	ldr	r2, [r4, #0]
 800c812:	1ac0      	subs	r0, r0, r3
 800c814:	2301      	movs	r3, #1
 800c816:	4083      	lsls	r3, r0
 800c818:	4313      	orrs	r3, r2
 800c81a:	0035      	movs	r5, r6
 800c81c:	6023      	str	r3, [r4, #0]
 800c81e:	e7cc      	b.n	800c7ba <_vfiprintf_r+0xbe>
 800c820:	9b07      	ldr	r3, [sp, #28]
 800c822:	1d19      	adds	r1, r3, #4
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	9107      	str	r1, [sp, #28]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	db01      	blt.n	800c830 <_vfiprintf_r+0x134>
 800c82c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c82e:	e004      	b.n	800c83a <_vfiprintf_r+0x13e>
 800c830:	425b      	negs	r3, r3
 800c832:	60e3      	str	r3, [r4, #12]
 800c834:	2302      	movs	r3, #2
 800c836:	4313      	orrs	r3, r2
 800c838:	6023      	str	r3, [r4, #0]
 800c83a:	7833      	ldrb	r3, [r6, #0]
 800c83c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c83e:	d10c      	bne.n	800c85a <_vfiprintf_r+0x15e>
 800c840:	7873      	ldrb	r3, [r6, #1]
 800c842:	2b2a      	cmp	r3, #42	@ 0x2a
 800c844:	d134      	bne.n	800c8b0 <_vfiprintf_r+0x1b4>
 800c846:	9b07      	ldr	r3, [sp, #28]
 800c848:	3602      	adds	r6, #2
 800c84a:	1d1a      	adds	r2, r3, #4
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	9207      	str	r2, [sp, #28]
 800c850:	2b00      	cmp	r3, #0
 800c852:	da01      	bge.n	800c858 <_vfiprintf_r+0x15c>
 800c854:	2301      	movs	r3, #1
 800c856:	425b      	negs	r3, r3
 800c858:	9309      	str	r3, [sp, #36]	@ 0x24
 800c85a:	4d32      	ldr	r5, [pc, #200]	@ (800c924 <_vfiprintf_r+0x228>)
 800c85c:	2203      	movs	r2, #3
 800c85e:	0028      	movs	r0, r5
 800c860:	7831      	ldrb	r1, [r6, #0]
 800c862:	f000 fb47 	bl	800cef4 <memchr>
 800c866:	2800      	cmp	r0, #0
 800c868:	d006      	beq.n	800c878 <_vfiprintf_r+0x17c>
 800c86a:	2340      	movs	r3, #64	@ 0x40
 800c86c:	1b40      	subs	r0, r0, r5
 800c86e:	4083      	lsls	r3, r0
 800c870:	6822      	ldr	r2, [r4, #0]
 800c872:	3601      	adds	r6, #1
 800c874:	4313      	orrs	r3, r2
 800c876:	6023      	str	r3, [r4, #0]
 800c878:	7831      	ldrb	r1, [r6, #0]
 800c87a:	2206      	movs	r2, #6
 800c87c:	482a      	ldr	r0, [pc, #168]	@ (800c928 <_vfiprintf_r+0x22c>)
 800c87e:	1c75      	adds	r5, r6, #1
 800c880:	7621      	strb	r1, [r4, #24]
 800c882:	f000 fb37 	bl	800cef4 <memchr>
 800c886:	2800      	cmp	r0, #0
 800c888:	d040      	beq.n	800c90c <_vfiprintf_r+0x210>
 800c88a:	4b28      	ldr	r3, [pc, #160]	@ (800c92c <_vfiprintf_r+0x230>)
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d122      	bne.n	800c8d6 <_vfiprintf_r+0x1da>
 800c890:	2207      	movs	r2, #7
 800c892:	9b07      	ldr	r3, [sp, #28]
 800c894:	3307      	adds	r3, #7
 800c896:	4393      	bics	r3, r2
 800c898:	3308      	adds	r3, #8
 800c89a:	9307      	str	r3, [sp, #28]
 800c89c:	6963      	ldr	r3, [r4, #20]
 800c89e:	9a04      	ldr	r2, [sp, #16]
 800c8a0:	189b      	adds	r3, r3, r2
 800c8a2:	6163      	str	r3, [r4, #20]
 800c8a4:	e762      	b.n	800c76c <_vfiprintf_r+0x70>
 800c8a6:	4343      	muls	r3, r0
 800c8a8:	002e      	movs	r6, r5
 800c8aa:	2101      	movs	r1, #1
 800c8ac:	189b      	adds	r3, r3, r2
 800c8ae:	e7a4      	b.n	800c7fa <_vfiprintf_r+0xfe>
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	200a      	movs	r0, #10
 800c8b4:	0019      	movs	r1, r3
 800c8b6:	3601      	adds	r6, #1
 800c8b8:	6063      	str	r3, [r4, #4]
 800c8ba:	7832      	ldrb	r2, [r6, #0]
 800c8bc:	1c75      	adds	r5, r6, #1
 800c8be:	3a30      	subs	r2, #48	@ 0x30
 800c8c0:	2a09      	cmp	r2, #9
 800c8c2:	d903      	bls.n	800c8cc <_vfiprintf_r+0x1d0>
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d0c8      	beq.n	800c85a <_vfiprintf_r+0x15e>
 800c8c8:	9109      	str	r1, [sp, #36]	@ 0x24
 800c8ca:	e7c6      	b.n	800c85a <_vfiprintf_r+0x15e>
 800c8cc:	4341      	muls	r1, r0
 800c8ce:	002e      	movs	r6, r5
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	1889      	adds	r1, r1, r2
 800c8d4:	e7f1      	b.n	800c8ba <_vfiprintf_r+0x1be>
 800c8d6:	aa07      	add	r2, sp, #28
 800c8d8:	9200      	str	r2, [sp, #0]
 800c8da:	0021      	movs	r1, r4
 800c8dc:	003a      	movs	r2, r7
 800c8de:	4b14      	ldr	r3, [pc, #80]	@ (800c930 <_vfiprintf_r+0x234>)
 800c8e0:	9803      	ldr	r0, [sp, #12]
 800c8e2:	e000      	b.n	800c8e6 <_vfiprintf_r+0x1ea>
 800c8e4:	bf00      	nop
 800c8e6:	9004      	str	r0, [sp, #16]
 800c8e8:	9b04      	ldr	r3, [sp, #16]
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	d1d6      	bne.n	800c89c <_vfiprintf_r+0x1a0>
 800c8ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c8f0:	07db      	lsls	r3, r3, #31
 800c8f2:	d405      	bmi.n	800c900 <_vfiprintf_r+0x204>
 800c8f4:	89bb      	ldrh	r3, [r7, #12]
 800c8f6:	059b      	lsls	r3, r3, #22
 800c8f8:	d402      	bmi.n	800c900 <_vfiprintf_r+0x204>
 800c8fa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c8fc:	f7ff fdd8 	bl	800c4b0 <__retarget_lock_release_recursive>
 800c900:	89bb      	ldrh	r3, [r7, #12]
 800c902:	065b      	lsls	r3, r3, #25
 800c904:	d500      	bpl.n	800c908 <_vfiprintf_r+0x20c>
 800c906:	e71e      	b.n	800c746 <_vfiprintf_r+0x4a>
 800c908:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800c90a:	e71e      	b.n	800c74a <_vfiprintf_r+0x4e>
 800c90c:	aa07      	add	r2, sp, #28
 800c90e:	9200      	str	r2, [sp, #0]
 800c910:	0021      	movs	r1, r4
 800c912:	003a      	movs	r2, r7
 800c914:	4b06      	ldr	r3, [pc, #24]	@ (800c930 <_vfiprintf_r+0x234>)
 800c916:	9803      	ldr	r0, [sp, #12]
 800c918:	f000 f87c 	bl	800ca14 <_printf_i>
 800c91c:	e7e3      	b.n	800c8e6 <_vfiprintf_r+0x1ea>
 800c91e:	46c0      	nop			@ (mov r8, r8)
 800c920:	0800d27c 	.word	0x0800d27c
 800c924:	0800d282 	.word	0x0800d282
 800c928:	0800d286 	.word	0x0800d286
 800c92c:	00000000 	.word	0x00000000
 800c930:	0800c6d7 	.word	0x0800c6d7

0800c934 <_printf_common>:
 800c934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c936:	0016      	movs	r6, r2
 800c938:	9301      	str	r3, [sp, #4]
 800c93a:	688a      	ldr	r2, [r1, #8]
 800c93c:	690b      	ldr	r3, [r1, #16]
 800c93e:	000c      	movs	r4, r1
 800c940:	9000      	str	r0, [sp, #0]
 800c942:	4293      	cmp	r3, r2
 800c944:	da00      	bge.n	800c948 <_printf_common+0x14>
 800c946:	0013      	movs	r3, r2
 800c948:	0022      	movs	r2, r4
 800c94a:	6033      	str	r3, [r6, #0]
 800c94c:	3243      	adds	r2, #67	@ 0x43
 800c94e:	7812      	ldrb	r2, [r2, #0]
 800c950:	2a00      	cmp	r2, #0
 800c952:	d001      	beq.n	800c958 <_printf_common+0x24>
 800c954:	3301      	adds	r3, #1
 800c956:	6033      	str	r3, [r6, #0]
 800c958:	6823      	ldr	r3, [r4, #0]
 800c95a:	069b      	lsls	r3, r3, #26
 800c95c:	d502      	bpl.n	800c964 <_printf_common+0x30>
 800c95e:	6833      	ldr	r3, [r6, #0]
 800c960:	3302      	adds	r3, #2
 800c962:	6033      	str	r3, [r6, #0]
 800c964:	6822      	ldr	r2, [r4, #0]
 800c966:	2306      	movs	r3, #6
 800c968:	0015      	movs	r5, r2
 800c96a:	401d      	ands	r5, r3
 800c96c:	421a      	tst	r2, r3
 800c96e:	d027      	beq.n	800c9c0 <_printf_common+0x8c>
 800c970:	0023      	movs	r3, r4
 800c972:	3343      	adds	r3, #67	@ 0x43
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	1e5a      	subs	r2, r3, #1
 800c978:	4193      	sbcs	r3, r2
 800c97a:	6822      	ldr	r2, [r4, #0]
 800c97c:	0692      	lsls	r2, r2, #26
 800c97e:	d430      	bmi.n	800c9e2 <_printf_common+0xae>
 800c980:	0022      	movs	r2, r4
 800c982:	9901      	ldr	r1, [sp, #4]
 800c984:	9800      	ldr	r0, [sp, #0]
 800c986:	9d08      	ldr	r5, [sp, #32]
 800c988:	3243      	adds	r2, #67	@ 0x43
 800c98a:	47a8      	blx	r5
 800c98c:	3001      	adds	r0, #1
 800c98e:	d025      	beq.n	800c9dc <_printf_common+0xa8>
 800c990:	2206      	movs	r2, #6
 800c992:	6823      	ldr	r3, [r4, #0]
 800c994:	2500      	movs	r5, #0
 800c996:	4013      	ands	r3, r2
 800c998:	2b04      	cmp	r3, #4
 800c99a:	d105      	bne.n	800c9a8 <_printf_common+0x74>
 800c99c:	6833      	ldr	r3, [r6, #0]
 800c99e:	68e5      	ldr	r5, [r4, #12]
 800c9a0:	1aed      	subs	r5, r5, r3
 800c9a2:	43eb      	mvns	r3, r5
 800c9a4:	17db      	asrs	r3, r3, #31
 800c9a6:	401d      	ands	r5, r3
 800c9a8:	68a3      	ldr	r3, [r4, #8]
 800c9aa:	6922      	ldr	r2, [r4, #16]
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	dd01      	ble.n	800c9b4 <_printf_common+0x80>
 800c9b0:	1a9b      	subs	r3, r3, r2
 800c9b2:	18ed      	adds	r5, r5, r3
 800c9b4:	2600      	movs	r6, #0
 800c9b6:	42b5      	cmp	r5, r6
 800c9b8:	d120      	bne.n	800c9fc <_printf_common+0xc8>
 800c9ba:	2000      	movs	r0, #0
 800c9bc:	e010      	b.n	800c9e0 <_printf_common+0xac>
 800c9be:	3501      	adds	r5, #1
 800c9c0:	68e3      	ldr	r3, [r4, #12]
 800c9c2:	6832      	ldr	r2, [r6, #0]
 800c9c4:	1a9b      	subs	r3, r3, r2
 800c9c6:	42ab      	cmp	r3, r5
 800c9c8:	ddd2      	ble.n	800c970 <_printf_common+0x3c>
 800c9ca:	0022      	movs	r2, r4
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	9901      	ldr	r1, [sp, #4]
 800c9d0:	9800      	ldr	r0, [sp, #0]
 800c9d2:	9f08      	ldr	r7, [sp, #32]
 800c9d4:	3219      	adds	r2, #25
 800c9d6:	47b8      	blx	r7
 800c9d8:	3001      	adds	r0, #1
 800c9da:	d1f0      	bne.n	800c9be <_printf_common+0x8a>
 800c9dc:	2001      	movs	r0, #1
 800c9de:	4240      	negs	r0, r0
 800c9e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c9e2:	2030      	movs	r0, #48	@ 0x30
 800c9e4:	18e1      	adds	r1, r4, r3
 800c9e6:	3143      	adds	r1, #67	@ 0x43
 800c9e8:	7008      	strb	r0, [r1, #0]
 800c9ea:	0021      	movs	r1, r4
 800c9ec:	1c5a      	adds	r2, r3, #1
 800c9ee:	3145      	adds	r1, #69	@ 0x45
 800c9f0:	7809      	ldrb	r1, [r1, #0]
 800c9f2:	18a2      	adds	r2, r4, r2
 800c9f4:	3243      	adds	r2, #67	@ 0x43
 800c9f6:	3302      	adds	r3, #2
 800c9f8:	7011      	strb	r1, [r2, #0]
 800c9fa:	e7c1      	b.n	800c980 <_printf_common+0x4c>
 800c9fc:	0022      	movs	r2, r4
 800c9fe:	2301      	movs	r3, #1
 800ca00:	9901      	ldr	r1, [sp, #4]
 800ca02:	9800      	ldr	r0, [sp, #0]
 800ca04:	9f08      	ldr	r7, [sp, #32]
 800ca06:	321a      	adds	r2, #26
 800ca08:	47b8      	blx	r7
 800ca0a:	3001      	adds	r0, #1
 800ca0c:	d0e6      	beq.n	800c9dc <_printf_common+0xa8>
 800ca0e:	3601      	adds	r6, #1
 800ca10:	e7d1      	b.n	800c9b6 <_printf_common+0x82>
	...

0800ca14 <_printf_i>:
 800ca14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca16:	b08b      	sub	sp, #44	@ 0x2c
 800ca18:	9206      	str	r2, [sp, #24]
 800ca1a:	000a      	movs	r2, r1
 800ca1c:	3243      	adds	r2, #67	@ 0x43
 800ca1e:	9307      	str	r3, [sp, #28]
 800ca20:	9005      	str	r0, [sp, #20]
 800ca22:	9203      	str	r2, [sp, #12]
 800ca24:	7e0a      	ldrb	r2, [r1, #24]
 800ca26:	000c      	movs	r4, r1
 800ca28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ca2a:	2a78      	cmp	r2, #120	@ 0x78
 800ca2c:	d809      	bhi.n	800ca42 <_printf_i+0x2e>
 800ca2e:	2a62      	cmp	r2, #98	@ 0x62
 800ca30:	d80b      	bhi.n	800ca4a <_printf_i+0x36>
 800ca32:	2a00      	cmp	r2, #0
 800ca34:	d100      	bne.n	800ca38 <_printf_i+0x24>
 800ca36:	e0ba      	b.n	800cbae <_printf_i+0x19a>
 800ca38:	497a      	ldr	r1, [pc, #488]	@ (800cc24 <_printf_i+0x210>)
 800ca3a:	9104      	str	r1, [sp, #16]
 800ca3c:	2a58      	cmp	r2, #88	@ 0x58
 800ca3e:	d100      	bne.n	800ca42 <_printf_i+0x2e>
 800ca40:	e08e      	b.n	800cb60 <_printf_i+0x14c>
 800ca42:	0025      	movs	r5, r4
 800ca44:	3542      	adds	r5, #66	@ 0x42
 800ca46:	702a      	strb	r2, [r5, #0]
 800ca48:	e022      	b.n	800ca90 <_printf_i+0x7c>
 800ca4a:	0010      	movs	r0, r2
 800ca4c:	3863      	subs	r0, #99	@ 0x63
 800ca4e:	2815      	cmp	r0, #21
 800ca50:	d8f7      	bhi.n	800ca42 <_printf_i+0x2e>
 800ca52:	f7f3 fb61 	bl	8000118 <__gnu_thumb1_case_shi>
 800ca56:	0016      	.short	0x0016
 800ca58:	fff6001f 	.word	0xfff6001f
 800ca5c:	fff6fff6 	.word	0xfff6fff6
 800ca60:	001ffff6 	.word	0x001ffff6
 800ca64:	fff6fff6 	.word	0xfff6fff6
 800ca68:	fff6fff6 	.word	0xfff6fff6
 800ca6c:	0036009f 	.word	0x0036009f
 800ca70:	fff6007e 	.word	0xfff6007e
 800ca74:	00b0fff6 	.word	0x00b0fff6
 800ca78:	0036fff6 	.word	0x0036fff6
 800ca7c:	fff6fff6 	.word	0xfff6fff6
 800ca80:	0082      	.short	0x0082
 800ca82:	0025      	movs	r5, r4
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	3542      	adds	r5, #66	@ 0x42
 800ca88:	1d11      	adds	r1, r2, #4
 800ca8a:	6019      	str	r1, [r3, #0]
 800ca8c:	6813      	ldr	r3, [r2, #0]
 800ca8e:	702b      	strb	r3, [r5, #0]
 800ca90:	2301      	movs	r3, #1
 800ca92:	e09e      	b.n	800cbd2 <_printf_i+0x1be>
 800ca94:	6818      	ldr	r0, [r3, #0]
 800ca96:	6809      	ldr	r1, [r1, #0]
 800ca98:	1d02      	adds	r2, r0, #4
 800ca9a:	060d      	lsls	r5, r1, #24
 800ca9c:	d50b      	bpl.n	800cab6 <_printf_i+0xa2>
 800ca9e:	6806      	ldr	r6, [r0, #0]
 800caa0:	601a      	str	r2, [r3, #0]
 800caa2:	2e00      	cmp	r6, #0
 800caa4:	da03      	bge.n	800caae <_printf_i+0x9a>
 800caa6:	232d      	movs	r3, #45	@ 0x2d
 800caa8:	9a03      	ldr	r2, [sp, #12]
 800caaa:	4276      	negs	r6, r6
 800caac:	7013      	strb	r3, [r2, #0]
 800caae:	4b5d      	ldr	r3, [pc, #372]	@ (800cc24 <_printf_i+0x210>)
 800cab0:	270a      	movs	r7, #10
 800cab2:	9304      	str	r3, [sp, #16]
 800cab4:	e018      	b.n	800cae8 <_printf_i+0xd4>
 800cab6:	6806      	ldr	r6, [r0, #0]
 800cab8:	601a      	str	r2, [r3, #0]
 800caba:	0649      	lsls	r1, r1, #25
 800cabc:	d5f1      	bpl.n	800caa2 <_printf_i+0x8e>
 800cabe:	b236      	sxth	r6, r6
 800cac0:	e7ef      	b.n	800caa2 <_printf_i+0x8e>
 800cac2:	6808      	ldr	r0, [r1, #0]
 800cac4:	6819      	ldr	r1, [r3, #0]
 800cac6:	c940      	ldmia	r1!, {r6}
 800cac8:	0605      	lsls	r5, r0, #24
 800caca:	d402      	bmi.n	800cad2 <_printf_i+0xbe>
 800cacc:	0640      	lsls	r0, r0, #25
 800cace:	d500      	bpl.n	800cad2 <_printf_i+0xbe>
 800cad0:	b2b6      	uxth	r6, r6
 800cad2:	6019      	str	r1, [r3, #0]
 800cad4:	4b53      	ldr	r3, [pc, #332]	@ (800cc24 <_printf_i+0x210>)
 800cad6:	270a      	movs	r7, #10
 800cad8:	9304      	str	r3, [sp, #16]
 800cada:	2a6f      	cmp	r2, #111	@ 0x6f
 800cadc:	d100      	bne.n	800cae0 <_printf_i+0xcc>
 800cade:	3f02      	subs	r7, #2
 800cae0:	0023      	movs	r3, r4
 800cae2:	2200      	movs	r2, #0
 800cae4:	3343      	adds	r3, #67	@ 0x43
 800cae6:	701a      	strb	r2, [r3, #0]
 800cae8:	6863      	ldr	r3, [r4, #4]
 800caea:	60a3      	str	r3, [r4, #8]
 800caec:	2b00      	cmp	r3, #0
 800caee:	db06      	blt.n	800cafe <_printf_i+0xea>
 800caf0:	2104      	movs	r1, #4
 800caf2:	6822      	ldr	r2, [r4, #0]
 800caf4:	9d03      	ldr	r5, [sp, #12]
 800caf6:	438a      	bics	r2, r1
 800caf8:	6022      	str	r2, [r4, #0]
 800cafa:	4333      	orrs	r3, r6
 800cafc:	d00c      	beq.n	800cb18 <_printf_i+0x104>
 800cafe:	9d03      	ldr	r5, [sp, #12]
 800cb00:	0030      	movs	r0, r6
 800cb02:	0039      	movs	r1, r7
 800cb04:	f7f3 fb98 	bl	8000238 <__aeabi_uidivmod>
 800cb08:	9b04      	ldr	r3, [sp, #16]
 800cb0a:	3d01      	subs	r5, #1
 800cb0c:	5c5b      	ldrb	r3, [r3, r1]
 800cb0e:	702b      	strb	r3, [r5, #0]
 800cb10:	0033      	movs	r3, r6
 800cb12:	0006      	movs	r6, r0
 800cb14:	429f      	cmp	r7, r3
 800cb16:	d9f3      	bls.n	800cb00 <_printf_i+0xec>
 800cb18:	2f08      	cmp	r7, #8
 800cb1a:	d109      	bne.n	800cb30 <_printf_i+0x11c>
 800cb1c:	6823      	ldr	r3, [r4, #0]
 800cb1e:	07db      	lsls	r3, r3, #31
 800cb20:	d506      	bpl.n	800cb30 <_printf_i+0x11c>
 800cb22:	6862      	ldr	r2, [r4, #4]
 800cb24:	6923      	ldr	r3, [r4, #16]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	dc02      	bgt.n	800cb30 <_printf_i+0x11c>
 800cb2a:	2330      	movs	r3, #48	@ 0x30
 800cb2c:	3d01      	subs	r5, #1
 800cb2e:	702b      	strb	r3, [r5, #0]
 800cb30:	9b03      	ldr	r3, [sp, #12]
 800cb32:	1b5b      	subs	r3, r3, r5
 800cb34:	6123      	str	r3, [r4, #16]
 800cb36:	9b07      	ldr	r3, [sp, #28]
 800cb38:	0021      	movs	r1, r4
 800cb3a:	9300      	str	r3, [sp, #0]
 800cb3c:	9805      	ldr	r0, [sp, #20]
 800cb3e:	9b06      	ldr	r3, [sp, #24]
 800cb40:	aa09      	add	r2, sp, #36	@ 0x24
 800cb42:	f7ff fef7 	bl	800c934 <_printf_common>
 800cb46:	3001      	adds	r0, #1
 800cb48:	d148      	bne.n	800cbdc <_printf_i+0x1c8>
 800cb4a:	2001      	movs	r0, #1
 800cb4c:	4240      	negs	r0, r0
 800cb4e:	b00b      	add	sp, #44	@ 0x2c
 800cb50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb52:	2220      	movs	r2, #32
 800cb54:	6809      	ldr	r1, [r1, #0]
 800cb56:	430a      	orrs	r2, r1
 800cb58:	6022      	str	r2, [r4, #0]
 800cb5a:	2278      	movs	r2, #120	@ 0x78
 800cb5c:	4932      	ldr	r1, [pc, #200]	@ (800cc28 <_printf_i+0x214>)
 800cb5e:	9104      	str	r1, [sp, #16]
 800cb60:	0021      	movs	r1, r4
 800cb62:	3145      	adds	r1, #69	@ 0x45
 800cb64:	700a      	strb	r2, [r1, #0]
 800cb66:	6819      	ldr	r1, [r3, #0]
 800cb68:	6822      	ldr	r2, [r4, #0]
 800cb6a:	c940      	ldmia	r1!, {r6}
 800cb6c:	0610      	lsls	r0, r2, #24
 800cb6e:	d402      	bmi.n	800cb76 <_printf_i+0x162>
 800cb70:	0650      	lsls	r0, r2, #25
 800cb72:	d500      	bpl.n	800cb76 <_printf_i+0x162>
 800cb74:	b2b6      	uxth	r6, r6
 800cb76:	6019      	str	r1, [r3, #0]
 800cb78:	07d3      	lsls	r3, r2, #31
 800cb7a:	d502      	bpl.n	800cb82 <_printf_i+0x16e>
 800cb7c:	2320      	movs	r3, #32
 800cb7e:	4313      	orrs	r3, r2
 800cb80:	6023      	str	r3, [r4, #0]
 800cb82:	2e00      	cmp	r6, #0
 800cb84:	d001      	beq.n	800cb8a <_printf_i+0x176>
 800cb86:	2710      	movs	r7, #16
 800cb88:	e7aa      	b.n	800cae0 <_printf_i+0xcc>
 800cb8a:	2220      	movs	r2, #32
 800cb8c:	6823      	ldr	r3, [r4, #0]
 800cb8e:	4393      	bics	r3, r2
 800cb90:	6023      	str	r3, [r4, #0]
 800cb92:	e7f8      	b.n	800cb86 <_printf_i+0x172>
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	680d      	ldr	r5, [r1, #0]
 800cb98:	1d10      	adds	r0, r2, #4
 800cb9a:	6949      	ldr	r1, [r1, #20]
 800cb9c:	6018      	str	r0, [r3, #0]
 800cb9e:	6813      	ldr	r3, [r2, #0]
 800cba0:	062e      	lsls	r6, r5, #24
 800cba2:	d501      	bpl.n	800cba8 <_printf_i+0x194>
 800cba4:	6019      	str	r1, [r3, #0]
 800cba6:	e002      	b.n	800cbae <_printf_i+0x19a>
 800cba8:	066d      	lsls	r5, r5, #25
 800cbaa:	d5fb      	bpl.n	800cba4 <_printf_i+0x190>
 800cbac:	8019      	strh	r1, [r3, #0]
 800cbae:	2300      	movs	r3, #0
 800cbb0:	9d03      	ldr	r5, [sp, #12]
 800cbb2:	6123      	str	r3, [r4, #16]
 800cbb4:	e7bf      	b.n	800cb36 <_printf_i+0x122>
 800cbb6:	681a      	ldr	r2, [r3, #0]
 800cbb8:	1d11      	adds	r1, r2, #4
 800cbba:	6019      	str	r1, [r3, #0]
 800cbbc:	6815      	ldr	r5, [r2, #0]
 800cbbe:	2100      	movs	r1, #0
 800cbc0:	0028      	movs	r0, r5
 800cbc2:	6862      	ldr	r2, [r4, #4]
 800cbc4:	f000 f996 	bl	800cef4 <memchr>
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	d001      	beq.n	800cbd0 <_printf_i+0x1bc>
 800cbcc:	1b40      	subs	r0, r0, r5
 800cbce:	6060      	str	r0, [r4, #4]
 800cbd0:	6863      	ldr	r3, [r4, #4]
 800cbd2:	6123      	str	r3, [r4, #16]
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	9a03      	ldr	r2, [sp, #12]
 800cbd8:	7013      	strb	r3, [r2, #0]
 800cbda:	e7ac      	b.n	800cb36 <_printf_i+0x122>
 800cbdc:	002a      	movs	r2, r5
 800cbde:	6923      	ldr	r3, [r4, #16]
 800cbe0:	9906      	ldr	r1, [sp, #24]
 800cbe2:	9805      	ldr	r0, [sp, #20]
 800cbe4:	9d07      	ldr	r5, [sp, #28]
 800cbe6:	47a8      	blx	r5
 800cbe8:	3001      	adds	r0, #1
 800cbea:	d0ae      	beq.n	800cb4a <_printf_i+0x136>
 800cbec:	6823      	ldr	r3, [r4, #0]
 800cbee:	079b      	lsls	r3, r3, #30
 800cbf0:	d415      	bmi.n	800cc1e <_printf_i+0x20a>
 800cbf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbf4:	68e0      	ldr	r0, [r4, #12]
 800cbf6:	4298      	cmp	r0, r3
 800cbf8:	daa9      	bge.n	800cb4e <_printf_i+0x13a>
 800cbfa:	0018      	movs	r0, r3
 800cbfc:	e7a7      	b.n	800cb4e <_printf_i+0x13a>
 800cbfe:	0022      	movs	r2, r4
 800cc00:	2301      	movs	r3, #1
 800cc02:	9906      	ldr	r1, [sp, #24]
 800cc04:	9805      	ldr	r0, [sp, #20]
 800cc06:	9e07      	ldr	r6, [sp, #28]
 800cc08:	3219      	adds	r2, #25
 800cc0a:	47b0      	blx	r6
 800cc0c:	3001      	adds	r0, #1
 800cc0e:	d09c      	beq.n	800cb4a <_printf_i+0x136>
 800cc10:	3501      	adds	r5, #1
 800cc12:	68e3      	ldr	r3, [r4, #12]
 800cc14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc16:	1a9b      	subs	r3, r3, r2
 800cc18:	42ab      	cmp	r3, r5
 800cc1a:	dcf0      	bgt.n	800cbfe <_printf_i+0x1ea>
 800cc1c:	e7e9      	b.n	800cbf2 <_printf_i+0x1de>
 800cc1e:	2500      	movs	r5, #0
 800cc20:	e7f7      	b.n	800cc12 <_printf_i+0x1fe>
 800cc22:	46c0      	nop			@ (mov r8, r8)
 800cc24:	0800d28d 	.word	0x0800d28d
 800cc28:	0800d29e 	.word	0x0800d29e

0800cc2c <__sflush_r>:
 800cc2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc2e:	220c      	movs	r2, #12
 800cc30:	5e8b      	ldrsh	r3, [r1, r2]
 800cc32:	0005      	movs	r5, r0
 800cc34:	000c      	movs	r4, r1
 800cc36:	071a      	lsls	r2, r3, #28
 800cc38:	d456      	bmi.n	800cce8 <__sflush_r+0xbc>
 800cc3a:	684a      	ldr	r2, [r1, #4]
 800cc3c:	2a00      	cmp	r2, #0
 800cc3e:	dc02      	bgt.n	800cc46 <__sflush_r+0x1a>
 800cc40:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800cc42:	2a00      	cmp	r2, #0
 800cc44:	dd4e      	ble.n	800cce4 <__sflush_r+0xb8>
 800cc46:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800cc48:	2f00      	cmp	r7, #0
 800cc4a:	d04b      	beq.n	800cce4 <__sflush_r+0xb8>
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	2080      	movs	r0, #128	@ 0x80
 800cc50:	682e      	ldr	r6, [r5, #0]
 800cc52:	602a      	str	r2, [r5, #0]
 800cc54:	001a      	movs	r2, r3
 800cc56:	0140      	lsls	r0, r0, #5
 800cc58:	6a21      	ldr	r1, [r4, #32]
 800cc5a:	4002      	ands	r2, r0
 800cc5c:	4203      	tst	r3, r0
 800cc5e:	d033      	beq.n	800ccc8 <__sflush_r+0x9c>
 800cc60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cc62:	89a3      	ldrh	r3, [r4, #12]
 800cc64:	075b      	lsls	r3, r3, #29
 800cc66:	d506      	bpl.n	800cc76 <__sflush_r+0x4a>
 800cc68:	6863      	ldr	r3, [r4, #4]
 800cc6a:	1ad2      	subs	r2, r2, r3
 800cc6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d001      	beq.n	800cc76 <__sflush_r+0x4a>
 800cc72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cc74:	1ad2      	subs	r2, r2, r3
 800cc76:	2300      	movs	r3, #0
 800cc78:	0028      	movs	r0, r5
 800cc7a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800cc7c:	6a21      	ldr	r1, [r4, #32]
 800cc7e:	47b8      	blx	r7
 800cc80:	89a2      	ldrh	r2, [r4, #12]
 800cc82:	1c43      	adds	r3, r0, #1
 800cc84:	d106      	bne.n	800cc94 <__sflush_r+0x68>
 800cc86:	6829      	ldr	r1, [r5, #0]
 800cc88:	291d      	cmp	r1, #29
 800cc8a:	d846      	bhi.n	800cd1a <__sflush_r+0xee>
 800cc8c:	4b29      	ldr	r3, [pc, #164]	@ (800cd34 <__sflush_r+0x108>)
 800cc8e:	40cb      	lsrs	r3, r1
 800cc90:	07db      	lsls	r3, r3, #31
 800cc92:	d542      	bpl.n	800cd1a <__sflush_r+0xee>
 800cc94:	2300      	movs	r3, #0
 800cc96:	6063      	str	r3, [r4, #4]
 800cc98:	6923      	ldr	r3, [r4, #16]
 800cc9a:	6023      	str	r3, [r4, #0]
 800cc9c:	04d2      	lsls	r2, r2, #19
 800cc9e:	d505      	bpl.n	800ccac <__sflush_r+0x80>
 800cca0:	1c43      	adds	r3, r0, #1
 800cca2:	d102      	bne.n	800ccaa <__sflush_r+0x7e>
 800cca4:	682b      	ldr	r3, [r5, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d100      	bne.n	800ccac <__sflush_r+0x80>
 800ccaa:	6560      	str	r0, [r4, #84]	@ 0x54
 800ccac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ccae:	602e      	str	r6, [r5, #0]
 800ccb0:	2900      	cmp	r1, #0
 800ccb2:	d017      	beq.n	800cce4 <__sflush_r+0xb8>
 800ccb4:	0023      	movs	r3, r4
 800ccb6:	3344      	adds	r3, #68	@ 0x44
 800ccb8:	4299      	cmp	r1, r3
 800ccba:	d002      	beq.n	800ccc2 <__sflush_r+0x96>
 800ccbc:	0028      	movs	r0, r5
 800ccbe:	f7ff fbf9 	bl	800c4b4 <_free_r>
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	6363      	str	r3, [r4, #52]	@ 0x34
 800ccc6:	e00d      	b.n	800cce4 <__sflush_r+0xb8>
 800ccc8:	2301      	movs	r3, #1
 800ccca:	0028      	movs	r0, r5
 800cccc:	47b8      	blx	r7
 800ccce:	0002      	movs	r2, r0
 800ccd0:	1c43      	adds	r3, r0, #1
 800ccd2:	d1c6      	bne.n	800cc62 <__sflush_r+0x36>
 800ccd4:	682b      	ldr	r3, [r5, #0]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d0c3      	beq.n	800cc62 <__sflush_r+0x36>
 800ccda:	2b1d      	cmp	r3, #29
 800ccdc:	d001      	beq.n	800cce2 <__sflush_r+0xb6>
 800ccde:	2b16      	cmp	r3, #22
 800cce0:	d11a      	bne.n	800cd18 <__sflush_r+0xec>
 800cce2:	602e      	str	r6, [r5, #0]
 800cce4:	2000      	movs	r0, #0
 800cce6:	e01e      	b.n	800cd26 <__sflush_r+0xfa>
 800cce8:	690e      	ldr	r6, [r1, #16]
 800ccea:	2e00      	cmp	r6, #0
 800ccec:	d0fa      	beq.n	800cce4 <__sflush_r+0xb8>
 800ccee:	680f      	ldr	r7, [r1, #0]
 800ccf0:	600e      	str	r6, [r1, #0]
 800ccf2:	1bba      	subs	r2, r7, r6
 800ccf4:	9201      	str	r2, [sp, #4]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	079b      	lsls	r3, r3, #30
 800ccfa:	d100      	bne.n	800ccfe <__sflush_r+0xd2>
 800ccfc:	694a      	ldr	r2, [r1, #20]
 800ccfe:	60a2      	str	r2, [r4, #8]
 800cd00:	9b01      	ldr	r3, [sp, #4]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	ddee      	ble.n	800cce4 <__sflush_r+0xb8>
 800cd06:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800cd08:	0032      	movs	r2, r6
 800cd0a:	001f      	movs	r7, r3
 800cd0c:	0028      	movs	r0, r5
 800cd0e:	9b01      	ldr	r3, [sp, #4]
 800cd10:	6a21      	ldr	r1, [r4, #32]
 800cd12:	47b8      	blx	r7
 800cd14:	2800      	cmp	r0, #0
 800cd16:	dc07      	bgt.n	800cd28 <__sflush_r+0xfc>
 800cd18:	89a2      	ldrh	r2, [r4, #12]
 800cd1a:	2340      	movs	r3, #64	@ 0x40
 800cd1c:	2001      	movs	r0, #1
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	b21b      	sxth	r3, r3
 800cd22:	81a3      	strh	r3, [r4, #12]
 800cd24:	4240      	negs	r0, r0
 800cd26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cd28:	9b01      	ldr	r3, [sp, #4]
 800cd2a:	1836      	adds	r6, r6, r0
 800cd2c:	1a1b      	subs	r3, r3, r0
 800cd2e:	9301      	str	r3, [sp, #4]
 800cd30:	e7e6      	b.n	800cd00 <__sflush_r+0xd4>
 800cd32:	46c0      	nop			@ (mov r8, r8)
 800cd34:	20400001 	.word	0x20400001

0800cd38 <_fflush_r>:
 800cd38:	690b      	ldr	r3, [r1, #16]
 800cd3a:	b570      	push	{r4, r5, r6, lr}
 800cd3c:	0005      	movs	r5, r0
 800cd3e:	000c      	movs	r4, r1
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d102      	bne.n	800cd4a <_fflush_r+0x12>
 800cd44:	2500      	movs	r5, #0
 800cd46:	0028      	movs	r0, r5
 800cd48:	bd70      	pop	{r4, r5, r6, pc}
 800cd4a:	2800      	cmp	r0, #0
 800cd4c:	d004      	beq.n	800cd58 <_fflush_r+0x20>
 800cd4e:	6a03      	ldr	r3, [r0, #32]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d101      	bne.n	800cd58 <_fflush_r+0x20>
 800cd54:	f7ff fa9a 	bl	800c28c <__sinit>
 800cd58:	220c      	movs	r2, #12
 800cd5a:	5ea3      	ldrsh	r3, [r4, r2]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d0f1      	beq.n	800cd44 <_fflush_r+0xc>
 800cd60:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cd62:	07d2      	lsls	r2, r2, #31
 800cd64:	d404      	bmi.n	800cd70 <_fflush_r+0x38>
 800cd66:	059b      	lsls	r3, r3, #22
 800cd68:	d402      	bmi.n	800cd70 <_fflush_r+0x38>
 800cd6a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd6c:	f7ff fb9f 	bl	800c4ae <__retarget_lock_acquire_recursive>
 800cd70:	0028      	movs	r0, r5
 800cd72:	0021      	movs	r1, r4
 800cd74:	f7ff ff5a 	bl	800cc2c <__sflush_r>
 800cd78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cd7a:	0005      	movs	r5, r0
 800cd7c:	07db      	lsls	r3, r3, #31
 800cd7e:	d4e2      	bmi.n	800cd46 <_fflush_r+0xe>
 800cd80:	89a3      	ldrh	r3, [r4, #12]
 800cd82:	059b      	lsls	r3, r3, #22
 800cd84:	d4df      	bmi.n	800cd46 <_fflush_r+0xe>
 800cd86:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd88:	f7ff fb92 	bl	800c4b0 <__retarget_lock_release_recursive>
 800cd8c:	e7db      	b.n	800cd46 <_fflush_r+0xe>

0800cd8e <__swbuf_r>:
 800cd8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd90:	0006      	movs	r6, r0
 800cd92:	000d      	movs	r5, r1
 800cd94:	0014      	movs	r4, r2
 800cd96:	2800      	cmp	r0, #0
 800cd98:	d004      	beq.n	800cda4 <__swbuf_r+0x16>
 800cd9a:	6a03      	ldr	r3, [r0, #32]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d101      	bne.n	800cda4 <__swbuf_r+0x16>
 800cda0:	f7ff fa74 	bl	800c28c <__sinit>
 800cda4:	69a3      	ldr	r3, [r4, #24]
 800cda6:	60a3      	str	r3, [r4, #8]
 800cda8:	89a3      	ldrh	r3, [r4, #12]
 800cdaa:	071b      	lsls	r3, r3, #28
 800cdac:	d502      	bpl.n	800cdb4 <__swbuf_r+0x26>
 800cdae:	6923      	ldr	r3, [r4, #16]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d109      	bne.n	800cdc8 <__swbuf_r+0x3a>
 800cdb4:	0021      	movs	r1, r4
 800cdb6:	0030      	movs	r0, r6
 800cdb8:	f000 f82c 	bl	800ce14 <__swsetup_r>
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	d003      	beq.n	800cdc8 <__swbuf_r+0x3a>
 800cdc0:	2501      	movs	r5, #1
 800cdc2:	426d      	negs	r5, r5
 800cdc4:	0028      	movs	r0, r5
 800cdc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdc8:	6923      	ldr	r3, [r4, #16]
 800cdca:	6820      	ldr	r0, [r4, #0]
 800cdcc:	b2ef      	uxtb	r7, r5
 800cdce:	1ac0      	subs	r0, r0, r3
 800cdd0:	6963      	ldr	r3, [r4, #20]
 800cdd2:	b2ed      	uxtb	r5, r5
 800cdd4:	4283      	cmp	r3, r0
 800cdd6:	dc05      	bgt.n	800cde4 <__swbuf_r+0x56>
 800cdd8:	0021      	movs	r1, r4
 800cdda:	0030      	movs	r0, r6
 800cddc:	f7ff ffac 	bl	800cd38 <_fflush_r>
 800cde0:	2800      	cmp	r0, #0
 800cde2:	d1ed      	bne.n	800cdc0 <__swbuf_r+0x32>
 800cde4:	68a3      	ldr	r3, [r4, #8]
 800cde6:	3001      	adds	r0, #1
 800cde8:	3b01      	subs	r3, #1
 800cdea:	60a3      	str	r3, [r4, #8]
 800cdec:	6823      	ldr	r3, [r4, #0]
 800cdee:	1c5a      	adds	r2, r3, #1
 800cdf0:	6022      	str	r2, [r4, #0]
 800cdf2:	701f      	strb	r7, [r3, #0]
 800cdf4:	6963      	ldr	r3, [r4, #20]
 800cdf6:	4283      	cmp	r3, r0
 800cdf8:	d004      	beq.n	800ce04 <__swbuf_r+0x76>
 800cdfa:	89a3      	ldrh	r3, [r4, #12]
 800cdfc:	07db      	lsls	r3, r3, #31
 800cdfe:	d5e1      	bpl.n	800cdc4 <__swbuf_r+0x36>
 800ce00:	2d0a      	cmp	r5, #10
 800ce02:	d1df      	bne.n	800cdc4 <__swbuf_r+0x36>
 800ce04:	0021      	movs	r1, r4
 800ce06:	0030      	movs	r0, r6
 800ce08:	f7ff ff96 	bl	800cd38 <_fflush_r>
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	d0d9      	beq.n	800cdc4 <__swbuf_r+0x36>
 800ce10:	e7d6      	b.n	800cdc0 <__swbuf_r+0x32>
	...

0800ce14 <__swsetup_r>:
 800ce14:	4b2d      	ldr	r3, [pc, #180]	@ (800cecc <__swsetup_r+0xb8>)
 800ce16:	b570      	push	{r4, r5, r6, lr}
 800ce18:	0005      	movs	r5, r0
 800ce1a:	6818      	ldr	r0, [r3, #0]
 800ce1c:	000c      	movs	r4, r1
 800ce1e:	2800      	cmp	r0, #0
 800ce20:	d004      	beq.n	800ce2c <__swsetup_r+0x18>
 800ce22:	6a03      	ldr	r3, [r0, #32]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d101      	bne.n	800ce2c <__swsetup_r+0x18>
 800ce28:	f7ff fa30 	bl	800c28c <__sinit>
 800ce2c:	220c      	movs	r2, #12
 800ce2e:	5ea3      	ldrsh	r3, [r4, r2]
 800ce30:	071a      	lsls	r2, r3, #28
 800ce32:	d423      	bmi.n	800ce7c <__swsetup_r+0x68>
 800ce34:	06da      	lsls	r2, r3, #27
 800ce36:	d407      	bmi.n	800ce48 <__swsetup_r+0x34>
 800ce38:	2209      	movs	r2, #9
 800ce3a:	602a      	str	r2, [r5, #0]
 800ce3c:	2240      	movs	r2, #64	@ 0x40
 800ce3e:	2001      	movs	r0, #1
 800ce40:	4313      	orrs	r3, r2
 800ce42:	81a3      	strh	r3, [r4, #12]
 800ce44:	4240      	negs	r0, r0
 800ce46:	e03a      	b.n	800cebe <__swsetup_r+0xaa>
 800ce48:	075b      	lsls	r3, r3, #29
 800ce4a:	d513      	bpl.n	800ce74 <__swsetup_r+0x60>
 800ce4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ce4e:	2900      	cmp	r1, #0
 800ce50:	d008      	beq.n	800ce64 <__swsetup_r+0x50>
 800ce52:	0023      	movs	r3, r4
 800ce54:	3344      	adds	r3, #68	@ 0x44
 800ce56:	4299      	cmp	r1, r3
 800ce58:	d002      	beq.n	800ce60 <__swsetup_r+0x4c>
 800ce5a:	0028      	movs	r0, r5
 800ce5c:	f7ff fb2a 	bl	800c4b4 <_free_r>
 800ce60:	2300      	movs	r3, #0
 800ce62:	6363      	str	r3, [r4, #52]	@ 0x34
 800ce64:	2224      	movs	r2, #36	@ 0x24
 800ce66:	89a3      	ldrh	r3, [r4, #12]
 800ce68:	4393      	bics	r3, r2
 800ce6a:	81a3      	strh	r3, [r4, #12]
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	6063      	str	r3, [r4, #4]
 800ce70:	6923      	ldr	r3, [r4, #16]
 800ce72:	6023      	str	r3, [r4, #0]
 800ce74:	2308      	movs	r3, #8
 800ce76:	89a2      	ldrh	r2, [r4, #12]
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	81a3      	strh	r3, [r4, #12]
 800ce7c:	6923      	ldr	r3, [r4, #16]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d10b      	bne.n	800ce9a <__swsetup_r+0x86>
 800ce82:	21a0      	movs	r1, #160	@ 0xa0
 800ce84:	2280      	movs	r2, #128	@ 0x80
 800ce86:	89a3      	ldrh	r3, [r4, #12]
 800ce88:	0089      	lsls	r1, r1, #2
 800ce8a:	0092      	lsls	r2, r2, #2
 800ce8c:	400b      	ands	r3, r1
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d003      	beq.n	800ce9a <__swsetup_r+0x86>
 800ce92:	0021      	movs	r1, r4
 800ce94:	0028      	movs	r0, r5
 800ce96:	f000 f863 	bl	800cf60 <__smakebuf_r>
 800ce9a:	220c      	movs	r2, #12
 800ce9c:	5ea3      	ldrsh	r3, [r4, r2]
 800ce9e:	2101      	movs	r1, #1
 800cea0:	001a      	movs	r2, r3
 800cea2:	400a      	ands	r2, r1
 800cea4:	420b      	tst	r3, r1
 800cea6:	d00b      	beq.n	800cec0 <__swsetup_r+0xac>
 800cea8:	2200      	movs	r2, #0
 800ceaa:	60a2      	str	r2, [r4, #8]
 800ceac:	6962      	ldr	r2, [r4, #20]
 800ceae:	4252      	negs	r2, r2
 800ceb0:	61a2      	str	r2, [r4, #24]
 800ceb2:	2000      	movs	r0, #0
 800ceb4:	6922      	ldr	r2, [r4, #16]
 800ceb6:	4282      	cmp	r2, r0
 800ceb8:	d101      	bne.n	800cebe <__swsetup_r+0xaa>
 800ceba:	061a      	lsls	r2, r3, #24
 800cebc:	d4be      	bmi.n	800ce3c <__swsetup_r+0x28>
 800cebe:	bd70      	pop	{r4, r5, r6, pc}
 800cec0:	0799      	lsls	r1, r3, #30
 800cec2:	d400      	bmi.n	800cec6 <__swsetup_r+0xb2>
 800cec4:	6962      	ldr	r2, [r4, #20]
 800cec6:	60a2      	str	r2, [r4, #8]
 800cec8:	e7f3      	b.n	800ceb2 <__swsetup_r+0x9e>
 800ceca:	46c0      	nop			@ (mov r8, r8)
 800cecc:	20000098 	.word	0x20000098

0800ced0 <_sbrk_r>:
 800ced0:	2300      	movs	r3, #0
 800ced2:	b570      	push	{r4, r5, r6, lr}
 800ced4:	4d06      	ldr	r5, [pc, #24]	@ (800cef0 <_sbrk_r+0x20>)
 800ced6:	0004      	movs	r4, r0
 800ced8:	0008      	movs	r0, r1
 800ceda:	602b      	str	r3, [r5, #0]
 800cedc:	f7f3 fee8 	bl	8000cb0 <_sbrk>
 800cee0:	1c43      	adds	r3, r0, #1
 800cee2:	d103      	bne.n	800ceec <_sbrk_r+0x1c>
 800cee4:	682b      	ldr	r3, [r5, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d000      	beq.n	800ceec <_sbrk_r+0x1c>
 800ceea:	6023      	str	r3, [r4, #0]
 800ceec:	bd70      	pop	{r4, r5, r6, pc}
 800ceee:	46c0      	nop			@ (mov r8, r8)
 800cef0:	200016e0 	.word	0x200016e0

0800cef4 <memchr>:
 800cef4:	b2c9      	uxtb	r1, r1
 800cef6:	1882      	adds	r2, r0, r2
 800cef8:	4290      	cmp	r0, r2
 800cefa:	d101      	bne.n	800cf00 <memchr+0xc>
 800cefc:	2000      	movs	r0, #0
 800cefe:	4770      	bx	lr
 800cf00:	7803      	ldrb	r3, [r0, #0]
 800cf02:	428b      	cmp	r3, r1
 800cf04:	d0fb      	beq.n	800cefe <memchr+0xa>
 800cf06:	3001      	adds	r0, #1
 800cf08:	e7f6      	b.n	800cef8 <memchr+0x4>
	...

0800cf0c <__swhatbuf_r>:
 800cf0c:	b570      	push	{r4, r5, r6, lr}
 800cf0e:	000e      	movs	r6, r1
 800cf10:	001d      	movs	r5, r3
 800cf12:	230e      	movs	r3, #14
 800cf14:	5ec9      	ldrsh	r1, [r1, r3]
 800cf16:	0014      	movs	r4, r2
 800cf18:	b096      	sub	sp, #88	@ 0x58
 800cf1a:	2900      	cmp	r1, #0
 800cf1c:	da0c      	bge.n	800cf38 <__swhatbuf_r+0x2c>
 800cf1e:	89b2      	ldrh	r2, [r6, #12]
 800cf20:	2380      	movs	r3, #128	@ 0x80
 800cf22:	0011      	movs	r1, r2
 800cf24:	4019      	ands	r1, r3
 800cf26:	421a      	tst	r2, r3
 800cf28:	d114      	bne.n	800cf54 <__swhatbuf_r+0x48>
 800cf2a:	2380      	movs	r3, #128	@ 0x80
 800cf2c:	00db      	lsls	r3, r3, #3
 800cf2e:	2000      	movs	r0, #0
 800cf30:	6029      	str	r1, [r5, #0]
 800cf32:	6023      	str	r3, [r4, #0]
 800cf34:	b016      	add	sp, #88	@ 0x58
 800cf36:	bd70      	pop	{r4, r5, r6, pc}
 800cf38:	466a      	mov	r2, sp
 800cf3a:	f000 f853 	bl	800cfe4 <_fstat_r>
 800cf3e:	2800      	cmp	r0, #0
 800cf40:	dbed      	blt.n	800cf1e <__swhatbuf_r+0x12>
 800cf42:	23f0      	movs	r3, #240	@ 0xf0
 800cf44:	9901      	ldr	r1, [sp, #4]
 800cf46:	021b      	lsls	r3, r3, #8
 800cf48:	4019      	ands	r1, r3
 800cf4a:	4b04      	ldr	r3, [pc, #16]	@ (800cf5c <__swhatbuf_r+0x50>)
 800cf4c:	18c9      	adds	r1, r1, r3
 800cf4e:	424b      	negs	r3, r1
 800cf50:	4159      	adcs	r1, r3
 800cf52:	e7ea      	b.n	800cf2a <__swhatbuf_r+0x1e>
 800cf54:	2100      	movs	r1, #0
 800cf56:	2340      	movs	r3, #64	@ 0x40
 800cf58:	e7e9      	b.n	800cf2e <__swhatbuf_r+0x22>
 800cf5a:	46c0      	nop			@ (mov r8, r8)
 800cf5c:	ffffe000 	.word	0xffffe000

0800cf60 <__smakebuf_r>:
 800cf60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf62:	2602      	movs	r6, #2
 800cf64:	898b      	ldrh	r3, [r1, #12]
 800cf66:	0005      	movs	r5, r0
 800cf68:	000c      	movs	r4, r1
 800cf6a:	b085      	sub	sp, #20
 800cf6c:	4233      	tst	r3, r6
 800cf6e:	d007      	beq.n	800cf80 <__smakebuf_r+0x20>
 800cf70:	0023      	movs	r3, r4
 800cf72:	3347      	adds	r3, #71	@ 0x47
 800cf74:	6023      	str	r3, [r4, #0]
 800cf76:	6123      	str	r3, [r4, #16]
 800cf78:	2301      	movs	r3, #1
 800cf7a:	6163      	str	r3, [r4, #20]
 800cf7c:	b005      	add	sp, #20
 800cf7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf80:	ab03      	add	r3, sp, #12
 800cf82:	aa02      	add	r2, sp, #8
 800cf84:	f7ff ffc2 	bl	800cf0c <__swhatbuf_r>
 800cf88:	9f02      	ldr	r7, [sp, #8]
 800cf8a:	9001      	str	r0, [sp, #4]
 800cf8c:	0039      	movs	r1, r7
 800cf8e:	0028      	movs	r0, r5
 800cf90:	f7ff fafc 	bl	800c58c <_malloc_r>
 800cf94:	2800      	cmp	r0, #0
 800cf96:	d108      	bne.n	800cfaa <__smakebuf_r+0x4a>
 800cf98:	220c      	movs	r2, #12
 800cf9a:	5ea3      	ldrsh	r3, [r4, r2]
 800cf9c:	059a      	lsls	r2, r3, #22
 800cf9e:	d4ed      	bmi.n	800cf7c <__smakebuf_r+0x1c>
 800cfa0:	2203      	movs	r2, #3
 800cfa2:	4393      	bics	r3, r2
 800cfa4:	431e      	orrs	r6, r3
 800cfa6:	81a6      	strh	r6, [r4, #12]
 800cfa8:	e7e2      	b.n	800cf70 <__smakebuf_r+0x10>
 800cfaa:	2380      	movs	r3, #128	@ 0x80
 800cfac:	89a2      	ldrh	r2, [r4, #12]
 800cfae:	6020      	str	r0, [r4, #0]
 800cfb0:	4313      	orrs	r3, r2
 800cfb2:	81a3      	strh	r3, [r4, #12]
 800cfb4:	9b03      	ldr	r3, [sp, #12]
 800cfb6:	6120      	str	r0, [r4, #16]
 800cfb8:	6167      	str	r7, [r4, #20]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d00c      	beq.n	800cfd8 <__smakebuf_r+0x78>
 800cfbe:	0028      	movs	r0, r5
 800cfc0:	230e      	movs	r3, #14
 800cfc2:	5ee1      	ldrsh	r1, [r4, r3]
 800cfc4:	f000 f820 	bl	800d008 <_isatty_r>
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	d005      	beq.n	800cfd8 <__smakebuf_r+0x78>
 800cfcc:	2303      	movs	r3, #3
 800cfce:	89a2      	ldrh	r2, [r4, #12]
 800cfd0:	439a      	bics	r2, r3
 800cfd2:	3b02      	subs	r3, #2
 800cfd4:	4313      	orrs	r3, r2
 800cfd6:	81a3      	strh	r3, [r4, #12]
 800cfd8:	89a3      	ldrh	r3, [r4, #12]
 800cfda:	9a01      	ldr	r2, [sp, #4]
 800cfdc:	4313      	orrs	r3, r2
 800cfde:	81a3      	strh	r3, [r4, #12]
 800cfe0:	e7cc      	b.n	800cf7c <__smakebuf_r+0x1c>
	...

0800cfe4 <_fstat_r>:
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	b570      	push	{r4, r5, r6, lr}
 800cfe8:	4d06      	ldr	r5, [pc, #24]	@ (800d004 <_fstat_r+0x20>)
 800cfea:	0004      	movs	r4, r0
 800cfec:	0008      	movs	r0, r1
 800cfee:	0011      	movs	r1, r2
 800cff0:	602b      	str	r3, [r5, #0]
 800cff2:	f7f3 fe3a 	bl	8000c6a <_fstat>
 800cff6:	1c43      	adds	r3, r0, #1
 800cff8:	d103      	bne.n	800d002 <_fstat_r+0x1e>
 800cffa:	682b      	ldr	r3, [r5, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d000      	beq.n	800d002 <_fstat_r+0x1e>
 800d000:	6023      	str	r3, [r4, #0]
 800d002:	bd70      	pop	{r4, r5, r6, pc}
 800d004:	200016e0 	.word	0x200016e0

0800d008 <_isatty_r>:
 800d008:	2300      	movs	r3, #0
 800d00a:	b570      	push	{r4, r5, r6, lr}
 800d00c:	4d06      	ldr	r5, [pc, #24]	@ (800d028 <_isatty_r+0x20>)
 800d00e:	0004      	movs	r4, r0
 800d010:	0008      	movs	r0, r1
 800d012:	602b      	str	r3, [r5, #0]
 800d014:	f7f3 fe37 	bl	8000c86 <_isatty>
 800d018:	1c43      	adds	r3, r0, #1
 800d01a:	d103      	bne.n	800d024 <_isatty_r+0x1c>
 800d01c:	682b      	ldr	r3, [r5, #0]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d000      	beq.n	800d024 <_isatty_r+0x1c>
 800d022:	6023      	str	r3, [r4, #0]
 800d024:	bd70      	pop	{r4, r5, r6, pc}
 800d026:	46c0      	nop			@ (mov r8, r8)
 800d028:	200016e0 	.word	0x200016e0

0800d02c <_init>:
 800d02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d02e:	46c0      	nop			@ (mov r8, r8)
 800d030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d032:	bc08      	pop	{r3}
 800d034:	469e      	mov	lr, r3
 800d036:	4770      	bx	lr

0800d038 <_fini>:
 800d038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d03a:	46c0      	nop			@ (mov r8, r8)
 800d03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d03e:	bc08      	pop	{r3}
 800d040:	469e      	mov	lr, r3
 800d042:	4770      	bx	lr
